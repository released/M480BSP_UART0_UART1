; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2s.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2s.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\i2s.crf ..\..\..\Library\StdDriver\src\i2s.c]
                          THUMB

                          AREA ||i.I2S_Close||, CODE, READONLY, ALIGN=1

                  I2S_Close PROC
;;;121      */
;;;122    void I2S_Close(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;123    {
;;;124        i2s->CTL0 &= ~I2S_CTL0_I2SEN_Msk;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;125    }
000008  4770              BX       lr
;;;126    
                          ENDP


                          AREA ||i.I2S_ConfigureTDM||, CODE, READONLY, ALIGN=1

                  I2S_ConfigureTDM PROC
;;;234      */
;;;235    void I2S_ConfigureTDM(I2S_T *i2s, uint32_t u32ChannelWidth, uint32_t u32ChannelNum, uint32_t u32SyncWidth)
000000  b510              PUSH     {r4,lr}
;;;236    {
;;;237        i2s->CTL0 = ((i2s->CTL0 & ~(I2S_CTL0_TDMCHNUM_Msk | I2S_CTL0_CHWIDTH_Msk | I2S_CTL0_PCMSYNC_Msk)) |
000002  6804              LDR      r4,[r0,#0]
000004  f0244478          BIC      r4,r4,#0xf8000000
000008  ea447101          ORR      r1,r4,r1,LSL #28
00000c  ea417182          ORR      r1,r1,r2,LSL #30
000010  ea4161c3          ORR      r1,r1,r3,LSL #27
000014  6001              STR      r1,[r0,#0]
;;;238                     (u32ChannelWidth << I2S_CTL0_CHWIDTH_Pos) |
;;;239                     (u32ChannelNum << I2S_CTL0_TDMCHNUM_Pos) |
;;;240                     (u32SyncWidth << I2S_CTL0_PCMSYNC_Pos));
;;;241    }
000016  bd10              POP      {r4,pc}
;;;242    
                          ENDP


                          AREA ||i.I2S_DisableInt||, CODE, READONLY, ALIGN=1

                  I2S_DisableInt PROC
;;;145      */
;;;146    void I2S_DisableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;147    {
;;;148        i2s->IEN &= ~u32Mask;
000002  438a              BICS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;149    }
000006  4770              BX       lr
;;;150    
                          ENDP


                          AREA ||i.I2S_DisableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_DisableMCLK PROC
;;;194      */
;;;195    void I2S_DisableMCLK(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;196    {
;;;197        i2s->CTL0 &= ~I2S_CTL0_MCLKEN_Msk;
000002  f4214100          BIC      r1,r1,#0x8000
000006  6001              STR      r1,[r0,#0]
;;;198    }
000008  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.I2S_EnableInt||, CODE, READONLY, ALIGN=1

                  I2S_EnableInt PROC
;;;133      */
;;;134    void I2S_EnableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;135    {
;;;136        i2s->IEN |= u32Mask;
000002  430a              ORRS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;137    }
000006  4770              BX       lr
;;;138    
                          ENDP


                          AREA ||i.I2S_EnableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_EnableMCLK PROC
;;;156      */
;;;157    uint32_t I2S_EnableMCLK(I2S_T *i2s, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;158    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;159        uint8_t u8Divider;
;;;160        uint32_t u32SrcClk, u32Reg, u32Clock;
;;;161    
;;;162        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000006  f7fffffe          BL       I2S_GetSourceClockFreq
;;;163        if (u32BusClock == u32SrcClk)
00000a  4285              CMP      r5,r0
00000c  d101              BNE      |L6.18|
;;;164        {
;;;165            u8Divider = 0U;
00000e  2100              MOVS     r1,#0
000010  e003              B        |L6.26|
                  |L6.18|
;;;166        }
;;;167        else
;;;168        {
;;;169            u8Divider = (uint8_t)(u32SrcClk/u32BusClock) >> 1U;
000012  fbb0f1f5          UDIV     r1,r0,r5
000016  f3c10146          UBFX     r1,r1,#1,#7
                  |L6.26|
;;;170        }
;;;171    
;;;172        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_MCLKDIV_Msk) | u8Divider;
00001a  6862              LDR      r2,[r4,#4]
00001c  f022023f          BIC      r2,r2,#0x3f
000020  430a              ORRS     r2,r2,r1
000022  6062              STR      r2,[r4,#4]
;;;173    
;;;174        i2s->CTL0 |= I2S_CTL0_MCLKEN_Msk;
000024  6821              LDR      r1,[r4,#0]
000026  f4414100          ORR      r1,r1,#0x8000
00002a  6021              STR      r1,[r4,#0]
;;;175    
;;;176        u32Reg = i2s->CLKDIV & I2S_CLKDIV_MCLKDIV_Msk;
00002c  6861              LDR      r1,[r4,#4]
00002e  f011013f          ANDS     r1,r1,#0x3f
;;;177    
;;;178        if (u32Reg == 0U)
000032  d002              BEQ      |L6.58|
;;;179        {
;;;180            u32Clock = u32SrcClk;
;;;181        }
;;;182        else
;;;183        {
;;;184            u32Clock = ((u32SrcClk >> 1U) / u32Reg);
000034  0840              LSRS     r0,r0,#1
000036  fbb0f0f1          UDIV     r0,r0,r1
                  |L6.58|
;;;185        }
;;;186    
;;;187        return u32Clock;
;;;188    }
00003a  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP


                          AREA ||i.I2S_GetSourceClockFreq||, CODE, READONLY, ALIGN=2

                  I2S_GetSourceClockFreq PROC
;;;30       */
;;;31     static uint32_t I2S_GetSourceClockFreq(I2S_T *i2s)
000000  f04f4080          MOV      r0,#0x40000000
;;;32     {
;;;33         uint32_t u32Freq, u32ClkSrcSel;
;;;34     
;;;35         /* get I2S selection clock source */
;;;36         u32ClkSrcSel = CLK->CLKSEL3 & CLK_CLKSEL3_I2S0SEL_Msk;
000004  f8d0021c          LDR      r0,[r0,#0x21c]
000008  f4103140          ANDS     r1,r0,#0x30000
;;;37     
;;;38         switch (u32ClkSrcSel)
;;;39         {
;;;40         case CLK_CLKSEL3_I2S0SEL_HXT:
;;;41             u32Freq = __HXT;
00000c  4806              LDR      r0,|L7.40|
00000e  d009              BEQ      |L7.36|
000010  f5b13f80          CMP      r1,#0x10000           ;38
000014  d004              BEQ      |L7.32|
000016  f5b13f00          CMP      r1,#0x20000           ;38
00001a  d103              BNE      |L7.36|
;;;42             break;
;;;43     
;;;44         case CLK_CLKSEL3_I2S0SEL_PLL:
;;;45             u32Freq = CLK_GetPLLClockFreq();
;;;46             break;
;;;47     
;;;48         case CLK_CLKSEL3_I2S0SEL_HIRC:
;;;49             u32Freq = __HIRC;
;;;50             break;
;;;51     
;;;52         case CLK_CLKSEL3_I2S0SEL_PCLK0:
;;;53             u32Freq = (uint32_t)CLK_GetPCLK0Freq();
00001c  f7ffbffe          B.W      CLK_GetPCLK0Freq
                  |L7.32|
000020  f7ffbffe          B.W      CLK_GetPLLClockFreq
                  |L7.36|
;;;54             break;
;;;55     
;;;56         default:
;;;57             u32Freq = __HIRC;
;;;58             break;
;;;59         }
;;;60     
;;;61         return u32Freq;
;;;62     }
000024  4770              BX       lr
;;;63     
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0x00b71b00

                          AREA ||i.I2S_Open||, CODE, READONLY, ALIGN=2

                  I2S_Open PROC
;;;89       */
;;;90     uint32_t I2S_Open(I2S_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32MonoData, uint32_t u32DataFormat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;91     {
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  4604              MOV      r4,r0
00000a  e9dd2306          LDRD     r2,r3,[sp,#0x18]
;;;92         uint16_t u16Divider;
;;;93         uint32_t u32BitRate, u32SrcClk;
;;;94     
;;;95         SYS->IPRST1 |= SYS_IPRST1_I2S0RST_Msk;
00000e  f04f4080          MOV      r0,#0x40000000
000012  68c7              LDR      r7,[r0,#0xc]
000014  f0475700          ORR      r7,r7,#0x20000000
000018  60c7              STR      r7,[r0,#0xc]
;;;96         SYS->IPRST1 &= ~SYS_IPRST1_I2S0RST_Msk;
00001a  68c7              LDR      r7,[r0,#0xc]
00001c  f0275700          BIC      r7,r7,#0x20000000
000020  60c7              STR      r7,[r0,#0xc]
;;;97     
;;;98         i2s->CTL0 = u32MasterSlave | u32WordWidth | u32MonoData | u32DataFormat;
000022  4329              ORRS     r1,r1,r5
000024  4311              ORRS     r1,r1,r2
000026  4319              ORRS     r1,r1,r3
000028  6021              STR      r1,[r4,#0]
;;;99         i2s->CTL1 = I2S_FIFO_TX_LEVEL_WORD_8 | I2S_FIFO_RX_LEVEL_WORD_8;
00002a  f44f20e1          MOV      r0,#0x70800
00002e  6220              STR      r0,[r4,#0x20]
;;;100    
;;;101        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       I2S_GetSourceClockFreq
;;;102    
;;;103        u32BitRate = u32SampleRate * (((u32WordWidth>>4U) & 0x3U) + 1U) * 16U;
000036  f3c51201          UBFX     r2,r5,#4,#2
00003a  1c51              ADDS     r1,r2,#1
00003c  434e              MULS     r6,r1,r6
;;;104        //u16Divider = (uint16_t)((u32SrcClk/u32BitRate) >> 1U) - 1U;
;;;105        u16Divider = (uint16_t)((((u32SrcClk * 10UL / u32BitRate) >> 1U) + 5UL) / 10UL) - 1U;
00003e  eb000380          ADD      r3,r0,r0,LSL #2
000042  0131              LSLS     r1,r6,#4              ;103
000044  005b              LSLS     r3,r3,#1
000046  fbb3f1f1          UDIV     r1,r3,r1
00004a  2305              MOVS     r3,#5
00004c  eb030151          ADD      r1,r3,r1,LSR #1
000050  230a              MOVS     r3,#0xa
000052  fbb1f1f3          UDIV     r1,r1,r3
000056  1e49              SUBS     r1,r1,#1
;;;106        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_BCLKDIV_Msk) | ((uint32_t)u16Divider << 8U);
000058  6863              LDR      r3,[r4,#4]
00005a  b289              UXTH     r1,r1                 ;105
00005c  4d09              LDR      r5,|L8.132|
00005e  402b              ANDS     r3,r3,r5
000060  ea432301          ORR      r3,r3,r1,LSL #8
000064  6063              STR      r3,[r4,#4]
;;;107    
;;;108        /* calculate real sample rate */
;;;109        u32BitRate = u32SrcClk / (2U*((uint32_t)u16Divider+1U));
000066  0049              LSLS     r1,r1,#1
000068  1c89              ADDS     r1,r1,#2
00006a  fbb0f0f1          UDIV     r0,r0,r1
;;;110        u32SampleRate = u32BitRate / ((((u32WordWidth>>4U) & 0x3U) + 1U) * 16U);
00006e  0111              LSLS     r1,r2,#4
000070  3110              ADDS     r1,r1,#0x10
000072  fbb0f0f1          UDIV     r0,r0,r1
;;;111    
;;;112        i2s->CTL0 |= I2S_CTL0_I2SEN_Msk;
000076  6821              LDR      r1,[r4,#0]
000078  f0410101          ORR      r1,r1,#1
00007c  6021              STR      r1,[r4,#0]
;;;113    
;;;114        return u32SampleRate;
;;;115    }
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;116    
                          ENDP

000082  0000              DCW      0x0000
                  |L8.132|
                          DCD      0xfffe00ff

                          AREA ||i.I2S_SetFIFO||, CODE, READONLY, ALIGN=2

                  I2S_SetFIFO PROC
;;;207      */
;;;208    void I2S_SetFIFO(I2S_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210        i2s->CTL1 = ((i2s->CTL1 & ~(I2S_CTL1_TXTH_Msk | I2S_CTL1_RXTH_Msk)) |
000002  6a03              LDR      r3,[r0,#0x20]
000004  4c03              LDR      r4,|L9.20|
000006  4023              ANDS     r3,r3,r4
000008  ea432101          ORR      r1,r3,r1,LSL #8
00000c  ea414102          ORR      r1,r1,r2,LSL #16
000010  6201              STR      r1,[r0,#0x20]
;;;211                     (u32TxThreshold << I2S_CTL1_TXTH_Pos) |
;;;212                     (u32RxThreshold << I2S_CTL1_RXTH_Pos));
;;;213    }
000012  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  |L9.20|
                          DCD      0xfff0f0ff

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\i2s.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_i2s_c_I2S_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REVSH|
#line 402
|__asm___5_i2s_c_I2S_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____RRX|
#line 587
|__asm___5_i2s_c_I2S_Open____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
