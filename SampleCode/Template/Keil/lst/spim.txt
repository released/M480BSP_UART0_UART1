; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spim.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spim.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\spim.crf ..\..\..\Library\StdDriver\src\spim.c]
                          THUMB

                          AREA ||i.SPIM_ChipErase||, CODE, READONLY, ALIGN=2

                  SPIM_ChipErase PROC
;;;896      */
;;;897    void SPIM_ChipErase(uint32_t u32NBit, int isSync)
000000  b5f8              PUSH     {r3-r7,lr}
;;;898    {
000002  4606              MOV      r6,r0
;;;899        uint8_t cmdBuf[] = { OPCODE_CHIP_ERASE };    /* 1-byte Chip Erase command. */
000004  a00e              ADR      r0,|L1.64|
000006  460d              MOV      r5,r1                 ;898
000008  6800              LDR      r0,[r0,#0]
;;;900    
;;;901        spim_set_write_enable(1, u32NBit);           /* Write Enable.    */
00000a  9000              STR      r0,[sp,#0]
00000c  4631              MOV      r1,r6
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       spim_set_write_enable
;;;902    
;;;903        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000014  4c0b              LDR      r4,|L1.68|
000016  6860              LDR      r0,[r4,#4]
000018  f0200010          BIC      r0,r0,#0x10
00001c  6060              STR      r0,[r4,#4]
;;;904        SwitchNBitOutput(u32NBit);
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       SwitchNBitOutput
;;;905        spim_write(cmdBuf, sizeof (cmdBuf));
000024  2101              MOVS     r1,#1
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       spim_write
;;;906        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
00002c  6860              LDR      r0,[r4,#4]
00002e  f0400010          ORR      r0,r0,#0x10
000032  6060              STR      r0,[r4,#4]
;;;907    
;;;908        if (isSync)
000034  2d00              CMP      r5,#0
000036  d002              BEQ      |L1.62|
;;;909        {
;;;910            spim_wait_write_done(u32NBit);
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       spim_wait_write_done
                  |L1.62|
;;;911        }
;;;912    }
00003e  bdf8              POP      {r3-r7,pc}
;;;913    
                          ENDP

                  |L1.64|
000040  c700              DCB      199,0
000042  00                DCB      0
000043  00                DCB      0
                  |L1.68|
                          DCD      0x40007000

                          AREA ||i.SPIM_DMA_Read||, CODE, READONLY, ALIGN=2

                  SPIM_DMA_Read PROC
;;;1228     */
;;;1229   void SPIM_DMA_Read(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NRx, uint8_t pu8RxBuf[],
000000  b5f0              PUSH     {r4-r7,lr}
;;;1230                      uint32_t u32RdCmd, int isSync)
;;;1231   {
;;;1232       SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_PAGEREAD); /* Switch to Page Read mode. */
000002  4c11              LDR      r4,|L2.72|
000004  e9dd7605          LDRD     r7,r6,[sp,#0x14]      ;1231
000008  6825              LDR      r5,[r4,#0]
00000a  f4250540          BIC      r5,r5,#0xc00000
00000e  f4450500          ORR      r5,r5,#0x800000
000012  6025              STR      r5,[r4,#0]
;;;1233       SPIM_SET_SPIM_MODE(u32RdCmd);               /* SPIM mode.       */
000014  6825              LDR      r5,[r4,#0]
000016  f025457f          BIC      r5,r5,#0xff000000
00001a  433d              ORRS     r5,r5,r7
00001c  6025              STR      r5,[r4,#0]
;;;1234       SPIM_SET_4BYTE_ADDR_EN(is4ByteAddr);        /* Enable/disable 4-Byte Address. */
00001e  6825              LDR      r5,[r4,#0]
000020  f0250520          BIC      r5,r5,#0x20
000024  b101              CBZ      r1,|L2.40|
000026  2101              MOVS     r1,#1
                  |L2.40|
000028  ea451141          ORR      r1,r5,r1,LSL #5
00002c  6021              STR      r1,[r4,#0]
;;;1235   
;;;1236       SPIM->SRAMADDR = (uint32_t) pu8RxBuf;        /* SRAM u32Address. */
00002e  6323              STR      r3,[r4,#0x30]
;;;1237       SPIM->DMACNT = u32NRx;                       /* Transfer length. */
000030  6362              STR      r2,[r4,#0x34]
;;;1238       SPIM->FADDR = u32Addr;                       /* Flash u32Address.*/
000032  63a0              STR      r0,[r4,#0x38]
;;;1239       SPIM_SET_GO();                              /* Go.              */
000034  6860              LDR      r0,[r4,#4]
000036  f0400001          ORR      r0,r0,#1
00003a  6060              STR      r0,[r4,#4]
;;;1240   
;;;1241       if (isSync)
00003c  2e00              CMP      r6,#0
00003e  d002              BEQ      |L2.70|
                  |L2.64|
;;;1242       {
;;;1243           SPIM_WAIT_FREE();                       /* Wait for DMA done.  */
000040  6860              LDR      r0,[r4,#4]
000042  07c0              LSLS     r0,r0,#31
000044  d1fc              BNE      |L2.64|
                  |L2.70|
;;;1244       }
;;;1245   }
000046  bdf0              POP      {r4-r7,pc}
;;;1246   
                          ENDP

                  |L2.72|
                          DCD      0x40007000

                          AREA ||i.SPIM_DMA_Write||, CODE, READONLY, ALIGN=1

                  SPIM_DMA_Write PROC
;;;1179     */
;;;1180   void SPIM_DMA_Write(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NTx, uint8_t pu8TxBuf[], uint32_t wrCmd)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1181   {
000004  4605              MOV      r5,r0
000006  b083              SUB      sp,sp,#0xc
000008  4698              MOV      r8,r3
00000a  4614              MOV      r4,r2
;;;1182       uint32_t   pageOffset, toWr;
;;;1183       uint32_t   buf_idx = 0UL;
;;;1184   
;;;1185       pageOffset = u32Addr % 256UL;
00000c  b2c0              UXTB     r0,r0
;;;1186   
;;;1187       if ((pageOffset + u32NTx) <= 256UL)
;;;1188       {
;;;1189           /* Do all the bytes fit onto one page ? */
;;;1190           SPIM_WriteInPageDataByPageWrite(u32Addr, is4ByteAddr, u32NTx, pu8TxBuf, wrCmd, 1);
;;;1191       }
;;;1192       else
;;;1193       {
;;;1194           toWr = 256UL - pageOffset;               /* Size of data remaining on the first page. */
;;;1195   
;;;1196           SPIM_WriteInPageDataByPageWrite(u32Addr, is4ByteAddr, toWr, &pu8TxBuf[buf_idx], wrCmd, 1);
;;;1197   
;;;1198           u32Addr += toWr;                         /* Advance indicator. */
;;;1199           u32NTx -= toWr;
;;;1200           buf_idx += toWr;
;;;1201   
;;;1202           while (u32NTx)
;;;1203           {
;;;1204               toWr = 256UL;
;;;1205               if (toWr > u32NTx)
;;;1206               {
;;;1207                   toWr = u32NTx;
;;;1208               }
;;;1209   
;;;1210               SPIM_WriteInPageDataByPageWrite(u32Addr, is4ByteAddr, toWr, &pu8TxBuf[buf_idx], wrCmd, 1);
;;;1211   
;;;1212               u32Addr += toWr;                 /* Advance indicator. */
;;;1213               u32NTx -= toWr;
;;;1214               buf_idx += toWr;
;;;1215           }
;;;1216       }
;;;1217   }
00000e  fa52f285          UXTAB    r2,r2,r5
000012  f44f7b80          MOV      r11,#0x100            ;1187
000016  2101              MOVS     r1,#1                 ;1190
000018  f8dd9040          LDR      r9,[sp,#0x40]         ;1187
00001c  455a              CMP      r2,r11                ;1187
00001e  d809              BHI      |L3.52|
000020  e9cd9100          STRD     r9,r1,[sp,#0]         ;1190
000024  4622              MOV      r2,r4                 ;1190
000026  4628              MOV      r0,r5                 ;1190
000028  9904              LDR      r1,[sp,#0x10]         ;1190
00002a  f7fffffe          BL       SPIM_WriteInPageDataByPageWrite
                  |L3.46|
00002e  b007              ADD      sp,sp,#0x1c
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.52|
000034  e9cd9100          STRD     r9,r1,[sp,#0]         ;1196
000038  f5c07680          RSB      r6,r0,#0x100          ;1194
00003c  468a              MOV      r10,r1                ;1196
00003e  4632              MOV      r2,r6                 ;1196
000040  4628              MOV      r0,r5                 ;1196
000042  9904              LDR      r1,[sp,#0x10]         ;1196
000044  f7fffffe          BL       SPIM_WriteInPageDataByPageWrite
000048  19af              ADDS     r7,r5,r6              ;1198
00004a  1ba4              SUBS     r4,r4,r6              ;1199
00004c  e00f              B        |L3.110|
                  |L3.78|
00004e  465d              MOV      r5,r11                ;1204
000050  42ac              CMP      r4,r5                 ;1205
000052  d200              BCS      |L3.86|
000054  4625              MOV      r5,r4                 ;1207
                  |L3.86|
000056  e9cd9a00          STRD     r9,r10,[sp,#0]        ;1210
00005a  eb080306          ADD      r3,r8,r6              ;1210
00005e  462a              MOV      r2,r5                 ;1210
000060  4638              MOV      r0,r7                 ;1210
000062  9904              LDR      r1,[sp,#0x10]         ;1210
000064  f7fffffe          BL       SPIM_WriteInPageDataByPageWrite
000068  442f              ADD      r7,r7,r5              ;1212
00006a  1b64              SUBS     r4,r4,r5              ;1213
00006c  442e              ADD      r6,r6,r5              ;1214
                  |L3.110|
00006e  2c00              CMP      r4,#0                 ;1202
000070  d1ed              BNE      |L3.78|
000072  e7dc              B        |L3.46|
;;;1218   
                          ENDP


                          AREA ||i.SPIM_Enable_4Bytes_Mode||, CODE, READONLY, ALIGN=2

                  SPIM_Enable_4Bytes_Mode PROC
;;;830      */
;;;831    int SPIM_Enable_4Bytes_Mode(int isEn, uint32_t u32NBit)
000000  b57c              PUSH     {r2-r6,lr}
;;;832    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;833        int  isSupt = 0L, ret = -1;
;;;834        uint8_t idBuf[3];
;;;835        uint8_t cmdBuf[1];                           /* 1-byte Enter/Exit 4-Byte Mode command. */
;;;836    
;;;837        SPIM_ReadJedecId(idBuf, sizeof (idBuf), u32NBit);
000006  460a              MOV      r2,r1
000008  f04f35ff          MOV      r5,#0xffffffff        ;833
00000c  2103              MOVS     r1,#3
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       SPIM_ReadJedecId
;;;838    
;;;839        /* Based on Flash size, check if 4-byte address mode is supported. */
;;;840        switch (idBuf[0])
000014  f89d0000          LDRB     r0,[sp,#0]
000018  287f              CMP      r0,#0x7f
00001a  d00e              BEQ      |L4.58|
00001c  dc04              BGT      |L4.40|
00001e  2801              CMP      r0,#1
000020  d01a              BEQ      |L4.88|
000022  281c              CMP      r0,#0x1c
000024  d142              BNE      |L4.172|
000026  e003              B        |L4.48|
                  |L4.40|
000028  28c2              CMP      r0,#0xc2
00002a  d001              BEQ      |L4.48|
00002c  28ef              CMP      r0,#0xef
00002e  d13d              BNE      |L4.172|
                  |L4.48|
;;;841        {
;;;842        case MFGID_WINBOND:
;;;843        case MFGID_MXIC:
;;;844        case MFGID_EON:
;;;845            isSupt = (idBuf[2] < 0x19U) ? 0L : 1L;
000030  f89d0002          LDRB     r0,[sp,#2]
000034  2819              CMP      r0,#0x19
000036  d204              BCS      |L4.66|
000038  e005              B        |L4.70|
                  |L4.58|
;;;846            break;
;;;847    
;;;848        case MFGID_ISSI:
;;;849            isSupt = (idBuf[2] < 0x49U) ? 0L : 1L;
00003a  f89d0002          LDRB     r0,[sp,#2]
00003e  2849              CMP      r0,#0x49
000040  d301              BCC      |L4.70|
                  |L4.66|
000042  2001              MOVS     r0,#1
000044  e000              B        |L4.72|
                  |L4.70|
000046  2000              MOVS     r0,#0
                  |L4.72|
;;;850            break;
;;;851    
;;;852        case MFGID_SPANSION:
;;;853            SPIM_SPANSION_4Bytes_Enable(isEn, u32NBit);
;;;854            isSupt = 1L;
;;;855            ret = 0L;
;;;856            break;
;;;857    
;;;858        default:
;;;859            break;
;;;860        }
;;;861    
;;;862        if ((isSupt) && (idBuf[0] != MFGID_SPANSION))
000048  b380              CBZ      r0,|L4.172|
                  |L4.74|
00004a  f89d0000          LDRB     r0,[sp,#0]
00004e  2801              CMP      r0,#1
000050  d02c              BEQ      |L4.172|
;;;863        {
;;;864            cmdBuf[0] = isEn ? OPCODE_EN4B : OPCODE_EX4B;
000052  b13e              CBZ      r6,|L4.100|
000054  20b7              MOVS     r0,#0xb7
000056  e006              B        |L4.102|
                  |L4.88|
000058  4621              MOV      r1,r4                 ;853
00005a  4630              MOV      r0,r6                 ;853
00005c  f7fffffe          BL       SPIM_SPANSION_4Bytes_Enable
000060  2500              MOVS     r5,#0                 ;855
000062  e7f2              B        |L4.74|
                  |L4.100|
000064  20e9              MOVS     r0,#0xe9
                  |L4.102|
;;;865    
;;;866            SPIM_SET_SS_EN(1);                      /* CS activated.    */
000066  4d12              LDR      r5,|L4.176|
000068  f88d0004          STRB     r0,[sp,#4]            ;864
00006c  6868              LDR      r0,[r5,#4]
00006e  f0200010          BIC      r0,r0,#0x10
000072  6068              STR      r0,[r5,#4]
;;;867            SwitchNBitOutput(u32NBit);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       SwitchNBitOutput
;;;868            spim_write(cmdBuf, sizeof (cmdBuf));
00007a  2101              MOVS     r1,#1
00007c  a801              ADD      r0,sp,#4
00007e  f7fffffe          BL       spim_write
;;;869            SPIM_SET_SS_EN(0);                      /* CS deactivated.  */
000082  6868              LDR      r0,[r5,#4]
000084  f0400010          ORR      r0,r0,#0x10
000088  6068              STR      r0,[r5,#4]
;;;870    
;;;871            /*
;;;872             * FIXME: Per test, 4BYTE Indicator bit doesn't set after EN4B, which
;;;873             * doesn't match spec(MX25L25635E), so skip the check below.
;;;874             */
;;;875            if (idBuf[0] != MFGID_MXIC)
00008a  f89d0000          LDRB     r0,[sp,#0]
00008e  28c2              CMP      r0,#0xc2
000090  d00b              BEQ      |L4.170|
;;;876            {
;;;877                if (isEn)
000092  b12e              CBZ      r6,|L4.160|
                  |L4.148|
;;;878                {
;;;879                    while (! SPIM_Is4ByteModeEnable(u32NBit)) { }
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       SPIM_Is4ByteModeEnable
00009a  2800              CMP      r0,#0
00009c  d0fa              BEQ      |L4.148|
00009e  e004              B        |L4.170|
                  |L4.160|
;;;880                }
;;;881                else
;;;882                {
;;;883                    while (SPIM_Is4ByteModeEnable(u32NBit)) { }
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       SPIM_Is4ByteModeEnable
0000a6  2800              CMP      r0,#0
0000a8  d1fa              BNE      |L4.160|
                  |L4.170|
;;;884                }
;;;885            }
;;;886            ret = 0;
0000aa  2500              MOVS     r5,#0
                  |L4.172|
;;;887        }
;;;888        return ret;
0000ac  4628              MOV      r0,r5
;;;889    }
0000ae  bd7c              POP      {r2-r6,pc}
;;;890    
                          ENDP

                  |L4.176|
                          DCD      0x40007000

                          AREA ||i.SPIM_EnterDirectMapMode||, CODE, READONLY, ALIGN=2

                  SPIM_EnterDirectMapMode PROC
;;;1253     */
;;;1254   void SPIM_EnterDirectMapMode(int is4ByteAddr, uint32_t u32RdCmd, uint32_t u32IdleIntvl)
000000  4b0c              LDR      r3,|L5.52|
;;;1255   {
000002  b510              PUSH     {r4,lr}
;;;1256       SPIM_SET_4BYTE_ADDR_EN(is4ByteAddr);        /* Enable/disable 4-byte u32Address. */
000004  681c              LDR      r4,[r3,#0]
000006  f0240420          BIC      r4,r4,#0x20
00000a  b100              CBZ      r0,|L5.14|
00000c  2001              MOVS     r0,#1
                  |L5.14|
00000e  ea441040          ORR      r0,r4,r0,LSL #5
000012  6018              STR      r0,[r3,#0]
;;;1257       SPIM_SET_SPIM_MODE(u32RdCmd);               /* SPIM mode.       */
000014  6818              LDR      r0,[r3,#0]
000016  f020407f          BIC      r0,r0,#0xff000000
00001a  4308              ORRS     r0,r0,r1
00001c  6018              STR      r0,[r3,#0]
;;;1258       SPIM_SET_IDL_INTVL(u32IdleIntvl);            /* Idle interval.   */
00001e  6858              LDR      r0,[r3,#4]
000020  f4206070          BIC      r0,r0,#0xf00
000024  ea402002          ORR      r0,r0,r2,LSL #8
000028  6058              STR      r0,[r3,#4]
;;;1259       SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_DIRECTMAP);   /* Switch to Direct Map mode.     */
00002a  6818              LDR      r0,[r3,#0]
00002c  f4400040          ORR      r0,r0,#0xc00000
000030  6018              STR      r0,[r3,#0]
;;;1260   }
000032  bd10              POP      {r4,pc}
;;;1261   
                          ENDP

                  |L5.52|
                          DCD      0x40007000

                          AREA ||i.SPIM_EraseBlock||, CODE, READONLY, ALIGN=2

                  SPIM_EraseBlock PROC
;;;922      */
;;;923    void SPIM_EraseBlock(uint32_t u32Addr, int is4ByteAddr, uint8_t u8ErsCmd, uint32_t u32NBit, int isSync)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;924    {
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
000008  4698              MOV      r8,r3
00000a  4617              MOV      r7,r2
;;;925        uint8_t  cmdBuf[16];
;;;926        uint32_t  buf_idx = 0UL;
;;;927    
;;;928        spim_set_write_enable(1, u32NBit);           /* Write Enable.    */
00000c  4619              MOV      r1,r3
00000e  2001              MOVS     r0,#1
000010  9d0a              LDR      r5,[sp,#0x28]
000012  f7fffffe          BL       spim_set_write_enable
;;;929    
;;;930        cmdBuf[buf_idx++] = u8ErsCmd;
000016  f88d7000          STRB     r7,[sp,#0]
;;;931    
;;;932        if (is4ByteAddr)
;;;933        {
;;;934            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 24);
;;;935            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
00001a  f3c44207          UBFX     r2,r4,#16,#8
;;;936            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
00001e  f3c42107          UBFX     r1,r4,#8,#8
;;;937            cmdBuf[buf_idx++] = (uint8_t) (u32Addr & 0xFFUL);
000022  b2e0              UXTB     r0,r4
000024  b156              CBZ      r6,|L6.60|
000026  0e23              LSRS     r3,r4,#24             ;934
000028  f88d3001          STRB     r3,[sp,#1]            ;934
00002c  f88d2002          STRB     r2,[sp,#2]            ;935
000030  f88d1003          STRB     r1,[sp,#3]            ;936
000034  f88d0004          STRB     r0,[sp,#4]
000038  2405              MOVS     r4,#5
00003a  e006              B        |L6.74|
                  |L6.60|
;;;938        }
;;;939        else
;;;940        {
;;;941            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
00003c  f88d2001          STRB     r2,[sp,#1]
;;;942            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
000040  f88d1002          STRB     r1,[sp,#2]
;;;943            cmdBuf[buf_idx++] = (uint8_t) (u32Addr & 0xFFUL);
000044  f88d0003          STRB     r0,[sp,#3]
000048  2404              MOVS     r4,#4
                  |L6.74|
;;;944        }
;;;945    
;;;946        SPIM_SET_SS_EN(1);                      /* CS activated.    */
00004a  4e0b              LDR      r6,|L6.120|
00004c  6870              LDR      r0,[r6,#4]
00004e  f0200010          BIC      r0,r0,#0x10
000052  6070              STR      r0,[r6,#4]
;;;947        SwitchNBitOutput(u32NBit);
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       SwitchNBitOutput
;;;948        spim_write(cmdBuf, buf_idx);
00005a  4621              MOV      r1,r4
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       spim_write
;;;949        SPIM_SET_SS_EN(0);                      /* CS deactivated.  */
000062  6870              LDR      r0,[r6,#4]
000064  f0400010          ORR      r0,r0,#0x10
000068  6070              STR      r0,[r6,#4]
;;;950    
;;;951        if (isSync)
00006a  2d00              CMP      r5,#0
00006c  d002              BEQ      |L6.116|
;;;952        {
;;;953            spim_wait_write_done(u32NBit);
00006e  4640              MOV      r0,r8
000070  f7fffffe          BL       spim_wait_write_done
                  |L6.116|
;;;954        }
;;;955    }
000074  e8bd81ff          POP      {r0-r8,pc}
;;;956    
                          ENDP

                  |L6.120|
                          DCD      0x40007000

                          AREA ||i.SPIM_ExitDirectMapMode||, CODE, READONLY, ALIGN=2

                  SPIM_ExitDirectMapMode PROC
;;;1265     */
;;;1266   void SPIM_ExitDirectMapMode(void)
000000  4802              LDR      r0,|L7.12|
;;;1267   {
;;;1268       SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_IO);       /* Switch back to Normal mode.  */
000002  6801              LDR      r1,[r0,#0]
000004  f4210140          BIC      r1,r1,#0xc00000
000008  6001              STR      r1,[r0,#0]
;;;1269   }
00000a  4770              BX       lr
;;;1270   
                          ENDP

                  |L7.12|
                          DCD      0x40007000

                          AREA ||i.SPIM_GetSClkFreq||, CODE, READONLY, ALIGN=2

                  SPIM_GetSClkFreq PROC
;;;477      */
;;;478    uint32_t SPIM_GetSClkFreq(void)
000000  4804              LDR      r0,|L8.20|
;;;479    {
;;;480        uint32_t clkDiv = SPIM_GET_CLOCK_DIVIDER();
000002  6840              LDR      r0,[r0,#4]
000004  0c01              LSRS     r1,r0,#16
;;;481    
;;;482        return clkDiv ? SystemCoreClock / (clkDiv * 2U) : SystemCoreClock;
000006  4804              LDR      r0,|L8.24|
000008  6800              LDR      r0,[r0,#0]
00000a  d002              BEQ      |L8.18|
00000c  0049              LSLS     r1,r1,#1
00000e  fbb0f0f1          UDIV     r0,r0,r1
                  |L8.18|
;;;483    }
000012  4770              BX       lr
;;;484    
                          ENDP

                  |L8.20|
                          DCD      0x40007000
                  |L8.24|
                          DCD      SystemCoreClock

                          AREA ||i.SPIM_IO_Read||, CODE, READONLY, ALIGN=2

                  SPIM_IO_Read PROC
;;;1126     */
;;;1127   void SPIM_IO_Read(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NRx, uint8_t pu8RxBuf[], uint8_t rdCmd,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;1128                     uint32_t u32NBitCmd, uint32_t u32NBitAddr, uint32_t u32NBitDat, int u32NDummy)
;;;1129   {
000004  4688              MOV      r8,r1
000006  a90e              ADD      r1,sp,#0x38
000008  4692              MOV      r10,r2
00000a  4604              MOV      r4,r0
00000c  e8910805          LDM      r1,{r0,r2,r11}
;;;1130       uint8_t   cmdBuf[16];
;;;1131       uint32_t  buf_idx;
;;;1132   
;;;1133       SPIM_SET_SS_EN(1);                      /* CS activated.    */
000010  4e24              LDR      r6,|L9.164|
000012  9d12              LDR      r5,[sp,#0x48]
000014  4699              MOV      r9,r3                 ;1129
000016  6871              LDR      r1,[r6,#4]
000018  f0210110          BIC      r1,r1,#0x10
00001c  6071              STR      r1,[r6,#4]
;;;1134   
;;;1135       cmdBuf[0] = rdCmd;
00001e  f88d0000          STRB     r0,[sp,#0]
;;;1136       SwitchNBitOutput(u32NBitCmd);
000022  4610              MOV      r0,r2
000024  f7fffffe          BL       SwitchNBitOutput
;;;1137       spim_write(cmdBuf, 1UL);                 /* Write out command. */
000028  2101              MOVS     r1,#1
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       spim_write
;;;1138   
;;;1139       buf_idx = 0UL;
;;;1140       if (is4ByteAddr)
;;;1141       {
;;;1142           cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 24);
;;;1143           cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
000030  f3c44207          UBFX     r2,r4,#16,#8
;;;1144           cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
000034  f3c42107          UBFX     r1,r4,#8,#8
;;;1145           cmdBuf[buf_idx++] = (uint8_t) u32Addr;
000038  b2e0              UXTB     r0,r4
00003a  466f              MOV      r7,sp                 ;1130
00003c  f1b80f00          CMP      r8,#0                 ;1140
000040  d00a              BEQ      |L9.88|
000042  0e23              LSRS     r3,r4,#24             ;1142
000044  f88d3000          STRB     r3,[sp,#0]            ;1142
000048  f88d2001          STRB     r2,[sp,#1]            ;1143
00004c  f88d1002          STRB     r1,[sp,#2]            ;1144
000050  f88d0003          STRB     r0,[sp,#3]
000054  2404              MOVS     r4,#4
000056  e006              B        |L9.102|
                  |L9.88|
;;;1146       }
;;;1147       else
;;;1148       {
;;;1149           cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
000058  f88d2000          STRB     r2,[sp,#0]
;;;1150           cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
00005c  f88d1001          STRB     r1,[sp,#1]
;;;1151           cmdBuf[buf_idx++] = (uint8_t) u32Addr;
000060  f88d0002          STRB     r0,[sp,#2]
000064  2403              MOVS     r4,#3
                  |L9.102|
;;;1152       }
;;;1153       SwitchNBitOutput(u32NBitAddr);
000066  4658              MOV      r0,r11
000068  f7fffffe          BL       SwitchNBitOutput
;;;1154       spim_write(cmdBuf, buf_idx);                 /* Write out u32Address. */
00006c  4621              MOV      r1,r4
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       spim_write
;;;1155   
;;;1156       buf_idx = 0UL;
000074  2100              MOVS     r1,#0
000076  4608              MOV      r0,r1
;;;1157       while (u32NDummy --)
000078  e001              B        |L9.126|
                  |L9.122|
;;;1158       {
;;;1159           cmdBuf[buf_idx++] = 0x00U;
00007a  5478              STRB     r0,[r7,r1]
00007c  1c49              ADDS     r1,r1,#1
                  |L9.126|
00007e  1e6d              SUBS     r5,r5,#1
000080  d2fb              BCS      |L9.122|
;;;1160       }
;;;1161   
;;;1162       /* Same bit mode as above. */
;;;1163       spim_write(cmdBuf, buf_idx);                 /* Write out dummy bytes. */
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       spim_write
;;;1164   
;;;1165       SwitchNBitInput(u32NBitDat);
000088  9811              LDR      r0,[sp,#0x44]
00008a  f7fffffe          BL       SwitchNBitInput
;;;1166       spim_read(pu8RxBuf, u32NRx);                 /* Read back data.  */
00008e  4651              MOV      r1,r10
000090  4648              MOV      r0,r9
000092  f7fffffe          BL       spim_read
;;;1167   
;;;1168       SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000096  6870              LDR      r0,[r6,#4]
000098  f0400010          ORR      r0,r0,#0x10
00009c  6070              STR      r0,[r6,#4]
;;;1169   }
00009e  e8bd9fff          POP      {r0-r12,pc}
;;;1170   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
                          DCD      0x40007000

                          AREA ||i.SPIM_IO_Write||, CODE, READONLY, ALIGN=1

                  SPIM_IO_Write PROC
;;;1073     */
;;;1074   void SPIM_IO_Write(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NTx, uint8_t pu8TxBuf[], uint8_t wrCmd,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1075                      uint32_t u32NBitCmd, uint32_t u32NBitAddr, uint32_t u32NBitDat)
;;;1076   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  e9dda914          LDRD     r10,r9,[sp,#0x50]
00000c  4698              MOV      r8,r3
00000e  4615              MOV      r5,r2
;;;1077       uint32_t  pageOffset, toWr;
;;;1078       uint32_t  buf_idx = 0UL;
;;;1079   
;;;1080       pageOffset = u32Addr % 256UL;
000010  b2c0              UXTB     r0,r0
;;;1081   
;;;1082       if ((pageOffset + u32NTx) <= 256UL)          /* Do all the bytes fit onto one page ? */
;;;1083       {
;;;1084           SPIM_WriteInPageDataByIo(u32Addr, is4ByteAddr, u32NTx, &pu8TxBuf[buf_idx],
;;;1085                                    wrCmd, u32NBitCmd, u32NBitAddr, u32NBitDat, 1);
;;;1086       }
;;;1087       else
;;;1088       {
;;;1089           toWr = 256UL - pageOffset;               /* Size of data remaining on the first page. */
;;;1090   
;;;1091           SPIM_WriteInPageDataByIo(u32Addr, is4ByteAddr, toWr, &pu8TxBuf[buf_idx],
;;;1092                                    wrCmd, u32NBitCmd, u32NBitAddr, u32NBitDat, 1);
;;;1093           u32Addr += toWr;                         /* Advance indicator.  */
;;;1094           u32NTx -= toWr;
;;;1095           buf_idx += toWr;
;;;1096   
;;;1097           while (u32NTx)
;;;1098           {
;;;1099               toWr = 256UL;
;;;1100               if (toWr > u32NTx)
;;;1101               {
;;;1102                   toWr = u32NTx;
;;;1103               }
;;;1104   
;;;1105               SPIM_WriteInPageDataByIo(u32Addr, is4ByteAddr, toWr, &pu8TxBuf[buf_idx],
;;;1106                                        wrCmd, u32NBitCmd, u32NBitAddr, u32NBitDat, 1);
;;;1107               u32Addr += toWr;                 /* Advance indicator.  */
;;;1108               u32NTx -= toWr;
;;;1109               buf_idx += toWr;
;;;1110           }
;;;1111       }
;;;1112   }
000012  fa52f284          UXTAB    r2,r2,r4
000016  2101              MOVS     r1,#1                 ;1084
000018  f8ddb04c          LDR      r11,[sp,#0x4c]        ;1082
00001c  f5b27f80          CMP      r2,#0x100             ;1082
000020  d80e              BHI      |L10.64|
000022  e9cd9103          STRD     r9,r1,[sp,#0xc]       ;1076
000026  e9cdba01          STRD     r11,r10,[sp,#4]       ;1076
00002a  9812              LDR      r0,[sp,#0x48]         ;1084
00002c  9000              STR      r0,[sp,#0]            ;1084
00002e  4643              MOV      r3,r8                 ;1084
000030  462a              MOV      r2,r5                 ;1084
000032  4620              MOV      r0,r4                 ;1084
000034  9906              LDR      r1,[sp,#0x18]         ;1084
000036  f7fffffe          BL       SPIM_WriteInPageDataByIo
                  |L10.58|
00003a  b009              ADD      sp,sp,#0x24
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.64|
000040  f5c07680          RSB      r6,r0,#0x100          ;1089
000044  af01              ADD      r7,sp,#4              ;1091
000046  2301              MOVS     r3,#1                 ;1091
000048  464a              MOV      r2,r9                 ;1091
00004a  4651              MOV      r1,r10                ;1091
00004c  4658              MOV      r0,r11                ;1091
00004e  e887000f          STM      r7,{r0-r3}            ;1091
000052  9812              LDR      r0,[sp,#0x48]         ;1091
000054  9000              STR      r0,[sp,#0]            ;1091
000056  4643              MOV      r3,r8                 ;1091
000058  4632              MOV      r2,r6                 ;1091
00005a  4620              MOV      r0,r4                 ;1091
00005c  9906              LDR      r1,[sp,#0x18]         ;1091
00005e  f7fffffe          BL       SPIM_WriteInPageDataByIo
000062  19a7              ADDS     r7,r4,r6              ;1093
000064  1bac              SUBS     r4,r5,r6              ;1094
000066  e015              B        |L10.148|
                  |L10.104|
000068  f44f7580          MOV      r5,#0x100             ;1099
00006c  42ac              CMP      r4,r5                 ;1100
00006e  d200              BCS      |L10.114|
000070  4625              MOV      r5,r4                 ;1102
                  |L10.114|
000072  2001              MOVS     r0,#1                 ;1105
000074  e9cd9003          STRD     r9,r0,[sp,#0xc]       ;1105
000078  e9cdba01          STRD     r11,r10,[sp,#4]       ;1105
00007c  9812              LDR      r0,[sp,#0x48]         ;1105
00007e  9000              STR      r0,[sp,#0]            ;1105
000080  eb080306          ADD      r3,r8,r6              ;1105
000084  462a              MOV      r2,r5                 ;1105
000086  4638              MOV      r0,r7                 ;1105
000088  9906              LDR      r1,[sp,#0x18]         ;1105
00008a  f7fffffe          BL       SPIM_WriteInPageDataByIo
00008e  442f              ADD      r7,r7,r5              ;1107
000090  1b64              SUBS     r4,r4,r5              ;1108
000092  442e              ADD      r6,r6,r5              ;1109
                  |L10.148|
000094  2c00              CMP      r4,#0                 ;1097
000096  d1e7              BNE      |L10.104|
000098  e7cf              B        |L10.58|
;;;1113   
                          ENDP


                          AREA ||i.SPIM_InitFlash||, CODE, READONLY, ALIGN=2

                  SPIM_InitFlash PROC
;;;490      */
;;;491    int SPIM_InitFlash(int clrWP)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;492    {
;;;493        uint8_t   idBuf[3];
;;;494        uint8_t   cmdBuf[1];
;;;495        uint32_t  i;
;;;496        int32_t   ret = -1;
;;;497    
;;;498        SPIM_SET_SS_ACTLVL(0);
000004  4c3e              LDR      r4,|L11.256|
000006  4680              MOV      r8,r0                 ;492
000008  f04f35ff          MOV      r5,#0xffffffff        ;496
00000c  6860              LDR      r0,[r4,#4]
00000e  f0200020          BIC      r0,r0,#0x20
000012  6060              STR      r0,[r4,#4]
;;;499    
;;;500        /*
;;;501         * Because not sure in SPI or QPI mode, do QPI reset and then SPI reset.
;;;502         */
;;;503        /* QPI Reset Enable */
;;;504        cmdBuf[0] = OPCODE_RSTEN;
000014  2766              MOVS     r7,#0x66
000016  f88d7000          STRB     r7,[sp,#0]
;;;505        SPIM_SET_SS_EN(1);                          /* CS activated.    */
00001a  6860              LDR      r0,[r4,#4]
00001c  f0200010          BIC      r0,r0,#0x10
000020  6060              STR      r0,[r4,#4]
;;;506        SPIM_ENABLE_QUAD_OUTPUT_MODE();             /* 1-bit, Output.   */
000022  6820              LDR      r0,[r4,#0]
000024  f4201042          BIC      r0,r0,#0x308000
000028  f4401002          ORR      r0,r0,#0x208000
00002c  6020              STR      r0,[r4,#0]
;;;507        spim_write(cmdBuf, sizeof (cmdBuf));
00002e  2101              MOVS     r1,#1
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       spim_write
;;;508        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000036  6860              LDR      r0,[r4,#4]
000038  f0400010          ORR      r0,r0,#0x10
00003c  6060              STR      r0,[r4,#4]
;;;509    
;;;510        /* QPI Reset */
;;;511        cmdBuf[0] = OPCODE_RST;
00003e  2699              MOVS     r6,#0x99
000040  f88d6000          STRB     r6,[sp,#0]
;;;512        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000044  6860              LDR      r0,[r4,#4]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6060              STR      r0,[r4,#4]
;;;513        SPIM_ENABLE_QUAD_OUTPUT_MODE();             /* 1-bit, Output.   */
00004c  6820              LDR      r0,[r4,#0]
00004e  f4201042          BIC      r0,r0,#0x308000
000052  f4401002          ORR      r0,r0,#0x208000
000056  6020              STR      r0,[r4,#0]
;;;514        spim_write(cmdBuf, sizeof (cmdBuf));
000058  2101              MOVS     r1,#1
00005a  4668              MOV      r0,sp
00005c  f7fffffe          BL       spim_write
;;;515        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000060  6860              LDR      r0,[r4,#4]
000062  f0400010          ORR      r0,r0,#0x10
000066  6060              STR      r0,[r4,#4]
;;;516    
;;;517        /* SPI ResetEnable */
;;;518        cmdBuf[0] = OPCODE_RSTEN;
000068  f88d7000          STRB     r7,[sp,#0]
;;;519        SPIM_SET_SS_EN(1);                          /* CS activated.    */
00006c  6860              LDR      r0,[r4,#4]
00006e  f0200010          BIC      r0,r0,#0x10
000072  6060              STR      r0,[r4,#4]
;;;520        SPIM_ENABLE_SING_OUTPUT_MODE();             /* 1-bit, Output.   */
000074  6820              LDR      r0,[r4,#0]
000076  f4201042          BIC      r0,r0,#0x308000
00007a  f4404000          ORR      r0,r0,#0x8000
00007e  6020              STR      r0,[r4,#0]
;;;521        spim_write(cmdBuf, sizeof (cmdBuf));
000080  2101              MOVS     r1,#1
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       spim_write
;;;522        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000088  6860              LDR      r0,[r4,#4]
00008a  f0400010          ORR      r0,r0,#0x10
00008e  6060              STR      r0,[r4,#4]
;;;523    
;;;524        /* SPI Reset */
;;;525        cmdBuf[0] = OPCODE_RST;
000090  f88d6000          STRB     r6,[sp,#0]
;;;526        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000094  6860              LDR      r0,[r4,#4]
000096  f0200010          BIC      r0,r0,#0x10
00009a  6060              STR      r0,[r4,#4]
;;;527        SPIM_ENABLE_SING_OUTPUT_MODE();             /* 1-bit, Output.   */
00009c  6820              LDR      r0,[r4,#0]
00009e  f4201042          BIC      r0,r0,#0x308000
0000a2  f4404000          ORR      r0,r0,#0x8000
0000a6  6020              STR      r0,[r4,#0]
;;;528        spim_write(cmdBuf, sizeof (cmdBuf));
0000a8  2101              MOVS     r1,#1
0000aa  4668              MOV      r0,sp
0000ac  f7fffffe          BL       spim_write
;;;529        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
0000b0  6860              LDR      r0,[r4,#4]
0000b2  f0400010          ORR      r0,r0,#0x10
0000b6  6060              STR      r0,[r4,#4]
;;;530    
;;;531        if (clrWP)
0000b8  f1b80f00          CMP      r8,#0
0000bc  d00d              BEQ      |L11.218|
;;;532        {
;;;533            uint8_t dataBuf[] = {0x00U};
0000be  2000              MOVS     r0,#0
;;;534    
;;;535            spim_set_write_enable(1, 1UL);           /* Clear Block Protect. */
0000c0  2101              MOVS     r1,#1
0000c2  9002              STR      r0,[sp,#8]
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       spim_set_write_enable
;;;536            SPIM_WriteStatusRegister(dataBuf, sizeof (dataBuf), 1U);
0000ca  2201              MOVS     r2,#1
0000cc  4611              MOV      r1,r2
0000ce  a802              ADD      r0,sp,#8
0000d0  f7fffffe          BL       SPIM_WriteStatusRegister
;;;537            spim_wait_write_done(1UL);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       spim_wait_write_done
                  |L11.218|
;;;538        }
;;;539    
;;;540        SPIM_ReadJedecId(idBuf, sizeof (idBuf), 1UL);
0000da  2201              MOVS     r2,#1
0000dc  2103              MOVS     r1,#3
0000de  a801              ADD      r0,sp,#4
0000e0  f7fffffe          BL       SPIM_ReadJedecId
;;;541    
;;;542        /* printf("ID: 0x%x, 0x%x, px%x\n", idBuf[0], idBuf[1], idBuf[2]); */
;;;543    
;;;544        for (i = 0UL; i < sizeof(g_Supported_List)/sizeof(g_Supported_List[0]); i++)
;;;545        {
;;;546            if (idBuf[0] == g_Supported_List[i])
0000e4  4807              LDR      r0,|L11.260|
0000e6  f89d2004          LDRB     r2,[sp,#4]
0000ea  2100              MOVS     r1,#0                 ;544
                  |L11.236|
0000ec  5c43              LDRB     r3,[r0,r1]
0000ee  429a              CMP      r2,r3
0000f0  d100              BNE      |L11.244|
;;;547            {
;;;548                ret = 0;
0000f2  2500              MOVS     r5,#0
                  |L11.244|
0000f4  1c49              ADDS     r1,r1,#1
0000f6  2905              CMP      r1,#5                 ;544
0000f8  d3f8              BCC      |L11.236|
;;;549            }
;;;550        }
;;;551        if (ret != 0)
;;;552        {
;;;553            SPIM_DBGMSG("Flash initialize failed!! 0x%x\n", idBuf[0]);
;;;554        }
;;;555        return ret;
0000fa  4628              MOV      r0,r5
;;;556    }
0000fc  e8bd83fe          POP      {r1-r9,pc}
;;;557    
                          ENDP

                  |L11.256|
                          DCD      0x40007000
                  |L11.260|
                          DCD      ||.data||

                          AREA ||i.SPIM_Is4ByteModeEnable||, CODE, READONLY, ALIGN=2

                  SPIM_Is4ByteModeEnable PROC
;;;775      */
;;;776    int SPIM_Is4ByteModeEnable(uint32_t u32NBit)
000000  b5fe              PUSH     {r1-r7,lr}
;;;777    {
000002  4605              MOV      r5,r0
;;;778        int  isEn = 0;
;;;779        int  isSupt = 0;
;;;780        uint8_t  idBuf[3];
;;;781        uint8_t  dataBuf[1];
;;;782    
;;;783        SPIM_ReadJedecId(idBuf, sizeof (idBuf), u32NBit);
000004  4602              MOV      r2,r0
000006  2600              MOVS     r6,#0                 ;778
000008  2103              MOVS     r1,#3
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       SPIM_ReadJedecId
;;;784    
;;;785        /* Based on Flash size, check if 4-byte address mode is supported.  */
;;;786        switch (idBuf[0])
000010  f89d0000          LDRB     r0,[sp,#0]
000014  281c              CMP      r0,#0x1c
000016  d005              BEQ      |L12.36|
000018  287f              CMP      r0,#0x7f
00001a  d008              BEQ      |L12.46|
00001c  28c2              CMP      r0,#0xc2
00001e  d001              BEQ      |L12.36|
000020  28ef              CMP      r0,#0xef
000022  d153              BNE      |L12.204|
                  |L12.36|
;;;787        {
;;;788        case MFGID_WINBOND:
;;;789        case MFGID_MXIC:
;;;790        case MFGID_EON:
;;;791            isSupt = (idBuf[2] < 0x19U) ? 0L : 1L;
000024  f89d1002          LDRB     r1,[sp,#2]
000028  2919              CMP      r1,#0x19
00002a  d204              BCS      |L12.54|
00002c  e005              B        |L12.58|
                  |L12.46|
;;;792            break;
;;;793    
;;;794        case MFGID_ISSI:
;;;795            isSupt = (idBuf[2] < 0x49U) ? 0L : 1L;
00002e  f89d1002          LDRB     r1,[sp,#2]
000032  2949              CMP      r1,#0x49
000034  d301              BCC      |L12.58|
                  |L12.54|
000036  2101              MOVS     r1,#1
000038  e000              B        |L12.60|
                  |L12.58|
00003a  2100              MOVS     r1,#0
                  |L12.60|
;;;796            break;
;;;797    
;;;798        default:
;;;799            break;
;;;800        }
;;;801    
;;;802        if (isSupt != 0)
00003c  b331              CBZ      r1,|L12.140|
00003e  4c24              LDR      r4,|L12.208|
;;;803        {
;;;804            if (idBuf[0] == MFGID_WINBOND)
000040  28ef              CMP      r0,#0xef
000042  d004              BEQ      |L12.78|
;;;805            {
;;;806                /* Winbond SPI flash. */
;;;807                SPIM_ReadStatusRegister3(dataBuf, sizeof (dataBuf), u32NBit);
;;;808                isEn = !! (dataBuf[0] & SR3_ADR);
;;;809            }
;;;810            else if ((idBuf[0] == MFGID_MXIC) || (idBuf[0] ==MFGID_EON))
000044  28c2              CMP      r0,#0xc2
000046  d022              BEQ      |L12.142|
000048  281c              CMP      r0,#0x1c
00004a  d020              BEQ      |L12.142|
00004c  e03e              B        |L12.204|
                  |L12.78|
00004e  a021              ADR      r0,|L12.212|
000050  af01              ADD      r7,sp,#4              ;807
000052  6800              LDR      r0,[r0,#0]            ;807
000054  9002              STR      r0,[sp,#8]            ;807
000056  6860              LDR      r0,[r4,#4]            ;807
000058  2601              MOVS     r6,#1                 ;807
00005a  f0200010          BIC      r0,r0,#0x10           ;807
00005e  6060              STR      r0,[r4,#4]            ;807
000060  4628              MOV      r0,r5                 ;807
000062  f7fffffe          BL       SwitchNBitOutput
000066  2101              MOVS     r1,#1                 ;807
000068  a802              ADD      r0,sp,#8              ;807
00006a  f7fffffe          BL       spim_write
00006e  4628              MOV      r0,r5                 ;807
000070  f7fffffe          BL       SwitchNBitInput
000074  4631              MOV      r1,r6                 ;807
000076  4638              MOV      r0,r7                 ;807
000078  f7fffffe          BL       spim_read
00007c  6860              LDR      r0,[r4,#4]            ;807
00007e  f0400010          ORR      r0,r0,#0x10           ;807
000082  6060              STR      r0,[r4,#4]            ;807
000084  f89d0004          LDRB     r0,[sp,#4]            ;808
000088  f0000601          AND      r6,r0,#1              ;808
                  |L12.140|
00008c  e01e              B        |L12.204|
                  |L12.142|
00008e  a012              ADR      r0,|L12.216|
;;;811            {
;;;812                /* MXIC/EON SPI flash. */
;;;813                SPIM_ReadSecurityRegister(dataBuf, sizeof (dataBuf), u32NBit);
000090  af01              ADD      r7,sp,#4
000092  6800              LDR      r0,[r0,#0]
000094  9002              STR      r0,[sp,#8]
000096  6860              LDR      r0,[r4,#4]
000098  2601              MOVS     r6,#1
00009a  f0200010          BIC      r0,r0,#0x10
00009e  6060              STR      r0,[r4,#4]
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       SwitchNBitOutput
0000a6  2101              MOVS     r1,#1
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       spim_write
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       SwitchNBitInput
0000b4  4631              MOV      r1,r6
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       spim_read
0000bc  6860              LDR      r0,[r4,#4]
0000be  f0400010          ORR      r0,r0,#0x10
0000c2  6060              STR      r0,[r4,#4]
;;;814                isEn = !! (dataBuf[0] & SCUR_4BYTE);
0000c4  f89d0004          LDRB     r0,[sp,#4]
0000c8  f3c00680          UBFX     r6,r0,#2,#1
                  |L12.204|
;;;815            }
;;;816        }
;;;817    
;;;818        return isEn;
0000cc  4630              MOV      r0,r6
;;;819    }
0000ce  bdfe              POP      {r1-r7,pc}
;;;820    
                          ENDP

                  |L12.208|
                          DCD      0x40007000
                  |L12.212|
0000d4  1500              DCB      21,0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L12.216|
0000d8  2b00              DCB      "+",0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.SPIM_ReadJedecId||, CODE, READONLY, ALIGN=2

                  SPIM_ReadJedecId PROC
;;;564      */
;;;565    void SPIM_ReadJedecId(uint8_t idBuf[], uint32_t u32NRx, uint32_t u32NBit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;566    {
000002  4606              MOV      r6,r0
;;;567        uint8_t cmdBuf[] = { OPCODE_RDID };          /* 1-byte JEDEC ID command.  */
000004  a00e              ADR      r0,|L13.64|
;;;568    
;;;569        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000006  4c0f              LDR      r4,|L13.68|
000008  6800              LDR      r0,[r0,#0]            ;567
00000a  9000              STR      r0,[sp,#0]
00000c  6860              LDR      r0,[r4,#4]
00000e  460d              MOV      r5,r1                 ;566
000010  4617              MOV      r7,r2                 ;566
000012  f0200010          BIC      r0,r0,#0x10
000016  6060              STR      r0,[r4,#4]
;;;570        SwitchNBitOutput(u32NBit);
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       SwitchNBitOutput
;;;571        spim_write(cmdBuf, sizeof (cmdBuf));
00001e  2101              MOVS     r1,#1
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       spim_write
;;;572        SwitchNBitInput(u32NBit);
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       SwitchNBitInput
;;;573        spim_read(idBuf, u32NRx);
00002c  4629              MOV      r1,r5
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       spim_read
;;;574        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000034  6860              LDR      r0,[r4,#4]
000036  f0400010          ORR      r0,r0,#0x10
00003a  6060              STR      r0,[r4,#4]
;;;575    }
00003c  bdf8              POP      {r3-r7,pc}
;;;576    
                          ENDP

00003e  0000              DCW      0x0000
                  |L13.64|
000040  9f00              DCB      159,0
000042  00                DCB      0
000043  00                DCB      0
                  |L13.68|
                          DCD      0x40007000

                          AREA ||i.SPIM_ReadStatusRegister||, CODE, READONLY, ALIGN=2

                  SPIM_ReadStatusRegister PROC
;;;269      */
;;;270    static void SPIM_ReadStatusRegister(uint8_t dataBuf[], uint32_t u32NRx, uint32_t u32NBit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;271    {
000002  4606              MOV      r6,r0
;;;272        uint8_t cmdBuf[] = {OPCODE_RDSR};            /* 1-byte Read Status Register #1 command. */
000004  a00e              ADR      r0,|L14.64|
;;;273    
;;;274        SPIM_SET_SS_EN(1);                          /* CS activated. */
000006  4c0f              LDR      r4,|L14.68|
000008  6800              LDR      r0,[r0,#0]            ;272
00000a  9000              STR      r0,[sp,#0]
00000c  6860              LDR      r0,[r4,#4]
00000e  460d              MOV      r5,r1                 ;271
000010  4617              MOV      r7,r2                 ;271
000012  f0200010          BIC      r0,r0,#0x10
000016  6060              STR      r0,[r4,#4]
;;;275        SwitchNBitOutput(u32NBit);
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       SwitchNBitOutput
;;;276        spim_write(cmdBuf, sizeof (cmdBuf));
00001e  2101              MOVS     r1,#1
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       spim_write
;;;277        SwitchNBitInput(u32NBit);
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       SwitchNBitInput
;;;278        spim_read(dataBuf, u32NRx);
00002c  4629              MOV      r1,r5
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       spim_read
;;;279        SPIM_SET_SS_EN(0);                          /* CS deactivated. */
000034  6860              LDR      r0,[r4,#4]
000036  f0400010          ORR      r0,r0,#0x10
00003a  6060              STR      r0,[r4,#4]
;;;280    }
00003c  bdf8              POP      {r3-r7,pc}
;;;281    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
000040  0500              DCB      5,0
000042  00                DCB      0
000043  00                DCB      0
                  |L14.68|
                          DCD      0x40007000

                          AREA ||i.SPIM_ReadStatusRegister2||, CODE, READONLY, ALIGN=2

                  SPIM_ReadStatusRegister2 PROC
;;;306      */
;;;307    static void SPIM_ReadStatusRegister2(uint8_t dataBuf[], uint32_t u32NRx, uint32_t u32NBit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;308    {
000002  4606              MOV      r6,r0
;;;309        uint8_t cmdBuf[] = {OPCODE_RDSR2};           /* 1-byte Read Status Register #1 command. */
000004  a00e              ADR      r0,|L15.64|
;;;310    
;;;311        SPIM_SET_SS_EN(1);                          /* CS activated.  */
000006  4c0f              LDR      r4,|L15.68|
000008  6800              LDR      r0,[r0,#0]            ;309
00000a  9000              STR      r0,[sp,#0]
00000c  6860              LDR      r0,[r4,#4]
00000e  460d              MOV      r5,r1                 ;308
000010  4617              MOV      r7,r2                 ;308
000012  f0200010          BIC      r0,r0,#0x10
000016  6060              STR      r0,[r4,#4]
;;;312        SwitchNBitOutput(u32NBit);
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       SwitchNBitOutput
;;;313        spim_write(cmdBuf, sizeof (cmdBuf));
00001e  2101              MOVS     r1,#1
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       spim_write
;;;314        SwitchNBitInput(u32NBit);
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       SwitchNBitInput
;;;315        spim_read(dataBuf, u32NRx);
00002c  4629              MOV      r1,r5
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       spim_read
;;;316        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000034  6860              LDR      r0,[r4,#4]
000036  f0400010          ORR      r0,r0,#0x10
00003a  6060              STR      r0,[r4,#4]
;;;317    }
00003c  bdf8              POP      {r3-r7,pc}
;;;318    
                          ENDP

00003e  0000              DCW      0x0000
                  |L15.64|
000040  3500              DCB      "5",0
000042  00                DCB      0
000043  00                DCB      0
                  |L15.68|
                          DCD      0x40007000

                          AREA ||i.SPIM_SPANSION_4Bytes_Enable||, CODE, READONLY, ALIGN=2

                  SPIM_SPANSION_4Bytes_Enable PROC
;;;736    
;;;737    static void SPIM_SPANSION_4Bytes_Enable(int isEn, uint32_t u32NBit)
000000  b57c              PUSH     {r2-r6,lr}
;;;738    {
000002  4605              MOV      r5,r0
;;;739        uint8_t cmdBuf[2];
;;;740        uint8_t dataBuf[1];
;;;741    
;;;742        cmdBuf[0] = OPCODE_BRRD;
;;;743        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000004  4c1b              LDR      r4,|L16.116|
000006  2016              MOVS     r0,#0x16              ;742
000008  f88d0000          STRB     r0,[sp,#0]            ;742
00000c  6860              LDR      r0,[r4,#4]
00000e  f0200010          BIC      r0,r0,#0x10
000012  6060              STR      r0,[r4,#4]
;;;744        SwitchNBitOutput(u32NBit);
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       SwitchNBitOutput
;;;745        spim_write(cmdBuf, 1UL);
00001a  2101              MOVS     r1,#1
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       spim_write
;;;746        SwitchNBitInput(1UL);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       SwitchNBitInput
;;;747        spim_read(dataBuf, 1UL);
000028  2101              MOVS     r1,#1
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       spim_read
;;;748        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000030  6860              LDR      r0,[r4,#4]
000032  f0400010          ORR      r0,r0,#0x10
000036  6060              STR      r0,[r4,#4]
;;;749    
;;;750        SPIM_DBGMSG("Bank Address register= 0x%x\n", dataBuf[0]);
;;;751    
;;;752        cmdBuf[0] =  OPCODE_BRWR;
000038  2017              MOVS     r0,#0x17
00003a  f88d0000          STRB     r0,[sp,#0]
;;;753    
;;;754        if (isEn)
;;;755        {
;;;756            cmdBuf[1] = dataBuf[0] | 0x80U;          /* set EXTADD       */
;;;757        }
;;;758        else
;;;759        {
;;;760            cmdBuf[1] = dataBuf[0] & ~0x80U;         /* clear EXTADD     */
00003e  f89d0004          LDRB     r0,[sp,#4]
000042  b115              CBZ      r5,|L16.74|
000044  f0400080          ORR      r0,r0,#0x80           ;756
000048  e001              B        |L16.78|
                  |L16.74|
00004a  f0200080          BIC      r0,r0,#0x80
                  |L16.78|
00004e  f88d0001          STRB     r0,[sp,#1]
;;;761        }
;;;762    
;;;763        SPIM_SET_SS_EN(1);                          /* CS activated.    */
000052  6860              LDR      r0,[r4,#4]
000054  f0200010          BIC      r0,r0,#0x10
000058  6060              STR      r0,[r4,#4]
;;;764        SwitchNBitOutput(1UL);
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       SwitchNBitOutput
;;;765        spim_write(cmdBuf, 2UL);
000060  2102              MOVS     r1,#2
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       spim_write
;;;766        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000068  6860              LDR      r0,[r4,#4]
00006a  f0400010          ORR      r0,r0,#0x10
00006e  6060              STR      r0,[r4,#4]
;;;767    }
000070  bd7c              POP      {r2-r6,pc}
;;;768    
                          ENDP

000072  0000              DCW      0x0000
                  |L16.116|
                          DCD      0x40007000

                          AREA ||i.SPIM_SetQuadEnable||, CODE, READONLY, ALIGN=2

                  SPIM_SetQuadEnable PROC
;;;648      */
;;;649    void SPIM_SetQuadEnable(int isEn, uint32_t u32NBit)
000000  b5fe              PUSH     {r1-r7,lr}
;;;650    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;651        uint8_t  idBuf[3];
;;;652        uint8_t  dataBuf[2];
;;;653    
;;;654        SPIM_ReadJedecId(idBuf, sizeof (idBuf), u32NBit);
000006  460a              MOV      r2,r1
000008  2103              MOVS     r1,#3
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       SPIM_ReadJedecId
;;;655    
;;;656        SPIM_DBGMSG("SPIM_SetQuadEnable - Flash ID is 0x%x\n", idBuf[0]);
;;;657    
;;;658        switch (idBuf[0])
000010  f89d3008          LDRB     r3,[sp,#8]
000014  2b7f              CMP      r3,#0x7f
000016  d04b              BEQ      |L17.176|
000018  dc04              BGT      |L17.36|
00001a  2b01              CMP      r3,#1
00001c  d05b              BEQ      |L17.214|
00001e  2b1c              CMP      r3,#0x1c
000020  d145              BNE      |L17.174|
000022  e045              B        |L17.176|
                  |L17.36|
000024  2bc2              CMP      r3,#0xc2
000026  d043              BEQ      |L17.176|
000028  2bef              CMP      r3,#0xef
00002a  d140              BNE      |L17.174|
;;;659        {
;;;660        case MFGID_WINBOND:                      /* Winbond SPI flash  */
;;;661            SPIM_ReadStatusRegister(&dataBuf[0], 1UL, u32NBit);
00002c  462a              MOV      r2,r5
00002e  2101              MOVS     r1,#1
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       SPIM_ReadStatusRegister
;;;662            SPIM_ReadStatusRegister2(&dataBuf[1], 1UL, u32NBit);
000036  466e              MOV      r6,sp
000038  462a              MOV      r2,r5
00003a  2101              MOVS     r1,#1
00003c  1c70              ADDS     r0,r6,#1
00003e  f7fffffe          BL       SPIM_ReadStatusRegister2
;;;663            SPIM_DBGMSG("Status Register: 0x%x - 0x%x\n", dataBuf[0], dataBuf[1]);
;;;664            if (isEn)
;;;665            {
;;;666                dataBuf[1] |= SR2_QE;
;;;667            }
;;;668            else
;;;669            {
;;;670                dataBuf[1] &= ~SR2_QE;
000042  f89d0001          LDRB     r0,[sp,#1]
000046  b114              CBZ      r4,|L17.78|
000048  f0400002          ORR      r0,r0,#2              ;666
00004c  e001              B        |L17.82|
                  |L17.78|
00004e  f0200002          BIC      r0,r0,#2
                  |L17.82|
000052  f88d0001          STRB     r0,[sp,#1]
;;;671            }
;;;672    
;;;673            spim_set_write_enable(1, u32NBit);   /* Write Enable.    */
000056  4629              MOV      r1,r5
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       spim_set_write_enable
00005e  a120              ADR      r1,|L17.224|
000060  4c20              LDR      r4,|L17.228|
000062  6809              LDR      r1,[r1,#0]
000064  9101              STR      r1,[sp,#4]
000066  f89d1000          LDRB     r1,[sp,#0]
00006a  f88d1005          STRB     r1,[sp,#5]
00006e  f89d1001          LDRB     r1,[sp,#1]
000072  f88d1006          STRB     r1,[sp,#6]
000076  6861              LDR      r1,[r4,#4]
;;;674            SPIM_WriteStatusRegister2(dataBuf, sizeof (dataBuf), u32NBit);
000078  4628              MOV      r0,r5
00007a  f0210110          BIC      r1,r1,#0x10
00007e  6061              STR      r1,[r4,#4]
000080  f7fffffe          BL       SwitchNBitOutput
000084  2103              MOVS     r1,#3
000086  a801              ADD      r0,sp,#4
000088  f7fffffe          BL       spim_write
00008c  6860              LDR      r0,[r4,#4]
00008e  f0400010          ORR      r0,r0,#0x10
000092  6060              STR      r0,[r4,#4]
;;;675            spim_wait_write_done(u32NBit);
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       spim_wait_write_done
;;;676    
;;;677            SPIM_ReadStatusRegister(&dataBuf[0], 1UL, u32NBit);
00009a  462a              MOV      r2,r5
00009c  2101              MOVS     r1,#1
00009e  4668              MOV      r0,sp
0000a0  f7fffffe          BL       SPIM_ReadStatusRegister
;;;678            SPIM_ReadStatusRegister2(&dataBuf[1], 1UL, u32NBit);
0000a4  462a              MOV      r2,r5
0000a6  2101              MOVS     r1,#1
0000a8  1c70              ADDS     r0,r6,#1
0000aa  f7fffffe          BL       SPIM_ReadStatusRegister2
                  |L17.174|
;;;679            SPIM_DBGMSG("Status Register: 0x%x - 0x%x\n", dataBuf[0], dataBuf[1]);
;;;680            break;
;;;681    
;;;682        case MFGID_MXIC:                         /* MXIC SPI flash.  */
;;;683        case MFGID_EON:
;;;684        case MFGID_ISSI:                         /* ISSI SPI flash.  */
;;;685            spim_set_write_enable(1, u32NBit);   /* Write Enable.    */
;;;686            dataBuf[0] = isEn ? SR_QE : 0U;
;;;687            SPIM_WriteStatusRegister(dataBuf, sizeof (dataBuf), u32NBit);
;;;688            spim_wait_write_done(u32NBit);
;;;689            break;
;;;690    
;;;691        case MFGID_SPANSION:
;;;692            spim_enable_spansion_quad_mode(isEn);
;;;693            break;
;;;694    
;;;695        default:
;;;696            break;
;;;697        }
;;;698    }
0000ae  bdfe              POP      {r1-r7,pc}
                  |L17.176|
0000b0  4629              MOV      r1,r5                 ;685
0000b2  2001              MOVS     r0,#1                 ;685
0000b4  f7fffffe          BL       spim_set_write_enable
0000b8  b10c              CBZ      r4,|L17.190|
0000ba  2340              MOVS     r3,#0x40              ;686
0000bc  e000              B        |L17.192|
                  |L17.190|
0000be  2300              MOVS     r3,#0                 ;686
                  |L17.192|
0000c0  f88d3000          STRB     r3,[sp,#0]            ;686
0000c4  462a              MOV      r2,r5                 ;687
0000c6  2102              MOVS     r1,#2                 ;687
0000c8  4668              MOV      r0,sp                 ;687
0000ca  f7fffffe          BL       SPIM_WriteStatusRegister
0000ce  4628              MOV      r0,r5                 ;688
0000d0  f7fffffe          BL       spim_wait_write_done
0000d4  bdfe              POP      {r1-r7,pc}
                  |L17.214|
0000d6  4620              MOV      r0,r4                 ;692
0000d8  f7fffffe          BL       spim_enable_spansion_quad_mode
0000dc  bdfe              POP      {r1-r7,pc}
;;;699    
                          ENDP

0000de  0000              DCW      0x0000
                  |L17.224|
0000e0  0100              DCB      1,0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L17.228|
                          DCD      0x40007000

                          AREA ||i.SPIM_WriteInPageDataByIo||, CODE, READONLY, ALIGN=2

                  SPIM_WriteInPageDataByIo PROC
;;;972      */
;;;973    static void SPIM_WriteInPageDataByIo(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NTx, uint8_t pu8TxBuf[], uint8_t wrCmd,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;974                                         uint32_t u32NBitCmd, uint32_t u32NBitAddr, uint32_t u32NBitDat, int isSync)
;;;975    {
000004  460f              MOV      r7,r1
000006  e9dd890e          LDRD     r8,r9,[sp,#0x38]
00000a  4604              MOV      r4,r0
00000c  469a              MOV      r10,r3
00000e  4693              MOV      r11,r2
;;;976        uint8_t   cmdBuf[16];
;;;977        uint32_t  buf_idx;
;;;978    
;;;979        spim_set_write_enable(1, u32NBitCmd);        /* Write Enable.    */
000010  4649              MOV      r1,r9
000012  2001              MOVS     r0,#1
000014  9e12              LDR      r6,[sp,#0x48]
000016  f7fffffe          BL       spim_set_write_enable
;;;980    
;;;981        SPIM_SET_SS_EN(1);                          /* CS activated.    */
00001a  4d1f              LDR      r5,|L18.152|
00001c  6868              LDR      r0,[r5,#4]
00001e  f0200010          BIC      r0,r0,#0x10
000022  6068              STR      r0,[r5,#4]
;;;982    
;;;983        SwitchNBitOutput(u32NBitCmd);
000024  4648              MOV      r0,r9
000026  f7fffffe          BL       SwitchNBitOutput
;;;984        cmdBuf[0] = wrCmd;
00002a  f88d8000          STRB     r8,[sp,#0]
;;;985        spim_write(cmdBuf, 1UL);                     /* Write out command. */
00002e  2101              MOVS     r1,#1
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       spim_write
;;;986    
;;;987        buf_idx = 0UL;
;;;988        if (is4ByteAddr)
;;;989        {
;;;990            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 24);
;;;991            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
000036  f3c44207          UBFX     r2,r4,#16,#8
;;;992            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
00003a  f3c42107          UBFX     r1,r4,#8,#8
;;;993            cmdBuf[buf_idx++] = (uint8_t) u32Addr;
00003e  b2e0              UXTB     r0,r4
000040  b157              CBZ      r7,|L18.88|
000042  0e23              LSRS     r3,r4,#24             ;990
000044  f88d3000          STRB     r3,[sp,#0]            ;990
000048  f88d2001          STRB     r2,[sp,#1]            ;991
00004c  f88d1002          STRB     r1,[sp,#2]            ;992
000050  f88d0003          STRB     r0,[sp,#3]
000054  2404              MOVS     r4,#4
000056  e006              B        |L18.102|
                  |L18.88|
;;;994        }
;;;995        else
;;;996        {
;;;997            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 16);
000058  f88d2000          STRB     r2,[sp,#0]
;;;998            cmdBuf[buf_idx++] = (uint8_t) (u32Addr >> 8);
00005c  f88d1001          STRB     r1,[sp,#1]
;;;999            cmdBuf[buf_idx++] = (uint8_t) u32Addr;
000060  f88d0002          STRB     r0,[sp,#2]
000064  2403              MOVS     r4,#3
                  |L18.102|
;;;1000       }
;;;1001   
;;;1002       SwitchNBitOutput(u32NBitAddr);
000066  9810              LDR      r0,[sp,#0x40]
000068  f7fffffe          BL       SwitchNBitOutput
;;;1003       spim_write(cmdBuf, buf_idx);                 /* Write out u32Address. */
00006c  4621              MOV      r1,r4
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       spim_write
;;;1004   
;;;1005       SwitchNBitOutput(u32NBitDat);
000074  9811              LDR      r0,[sp,#0x44]
000076  f7fffffe          BL       SwitchNBitOutput
;;;1006       spim_write(pu8TxBuf, u32NTx);                /* Write out data.  */
00007a  4659              MOV      r1,r11
00007c  4650              MOV      r0,r10
00007e  f7fffffe          BL       spim_write
;;;1007   
;;;1008       SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
000082  6868              LDR      r0,[r5,#4]
000084  f0400010          ORR      r0,r0,#0x10
000088  6068              STR      r0,[r5,#4]
;;;1009   
;;;1010       if (isSync)
00008a  2e00              CMP      r6,#0
00008c  d002              BEQ      |L18.148|
;;;1011       {
;;;1012           spim_wait_write_done(u32NBitCmd);
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       spim_wait_write_done
                  |L18.148|
;;;1013       }
;;;1014   }
000094  e8bd9fff          POP      {r0-r12,pc}
;;;1015   
                          ENDP

                  |L18.152|
                          DCD      0x40007000

                          AREA ||i.SPIM_WriteInPageDataByPageWrite||, CODE, READONLY, ALIGN=2

                  SPIM_WriteInPageDataByPageWrite PROC
;;;1025     */
;;;1026   static void SPIM_WriteInPageDataByPageWrite(uint32_t u32Addr, int is4ByteAddr, uint32_t u32NTx,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1027           uint8_t pu8TxBuf[], uint32_t wrCmd, int isSync)
;;;1028   {
000004  461e              MOV      r6,r3
000006  e9dd4a08          LDRD     r4,r10,[sp,#0x20]
00000a  4617              MOV      r7,r2
00000c  4688              MOV      r8,r1
00000e  4681              MOV      r9,r0
;;;1029       if ((wrCmd == CMD_QUAD_PAGE_PROGRAM_WINBOND) ||
;;;1030               (wrCmd == CMD_QUAD_PAGE_PROGRAM_MXIC))
;;;1031       {
;;;1032           SPIM_SetQuadEnable(1, 1UL);              /* Set Quad Enable. */
;;;1033       }
;;;1034       else if (wrCmd == CMD_QUAD_PAGE_PROGRAM_EON)
000010  f04f4580          MOV      r5,#0x40000000
000014  f1b45f48          CMP      r4,#0x32000000        ;1029
000018  d036              BEQ      |L19.136|
00001a  f1b45f60          CMP      r4,#0x38000000        ;1030
00001e  d033              BEQ      |L19.136|
000020  42ac              CMP      r4,r5
000022  d106              BNE      |L19.50|
;;;1035       {
;;;1036           SPIM_SetQuadEnable(1, 1UL);              /* Set Quad Enable. */
000024  2101              MOVS     r1,#1
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       SPIM_SetQuadEnable
;;;1037           spim_eon_set_qpi_mode(1);                /* Enter QPI mode.  */
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       spim_eon_set_qpi_mode
                  |L19.50|
;;;1038       }
;;;1039   
;;;1040       SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_PAGEWRITE);/* Switch to Page Write mode.   */
000032  4819              LDR      r0,|L19.152|
000034  6801              LDR      r1,[r0,#0]
000036  f4210140          BIC      r1,r1,#0xc00000
00003a  f4410180          ORR      r1,r1,#0x400000
00003e  6001              STR      r1,[r0,#0]
;;;1041       SPIM_SET_SPIM_MODE(wrCmd);                  /* SPIM mode.       */
000040  6801              LDR      r1,[r0,#0]
000042  f021417f          BIC      r1,r1,#0xff000000
000046  4321              ORRS     r1,r1,r4
000048  6001              STR      r1,[r0,#0]
;;;1042       SPIM_SET_4BYTE_ADDR_EN(is4ByteAddr);        /* Enable/disable 4-Byte Address.  */
00004a  6801              LDR      r1,[r0,#0]
00004c  f0210220          BIC      r2,r1,#0x20
000050  ea5f0108          MOVS     r1,r8
000054  d000              BEQ      |L19.88|
000056  2101              MOVS     r1,#1
                  |L19.88|
000058  ea421141          ORR      r1,r2,r1,LSL #5
00005c  6001              STR      r1,[r0,#0]
;;;1043   
;;;1044       SPIM->SRAMADDR = (uint32_t) pu8TxBuf;        /* SRAM u32Address. */
00005e  6306              STR      r6,[r0,#0x30]
;;;1045       SPIM->DMACNT = u32NTx;                       /* Transfer length. */
000060  6347              STR      r7,[r0,#0x34]
;;;1046       SPIM->FADDR = u32Addr;                       /* Flash u32Address.*/
000062  f8c09038          STR      r9,[r0,#0x38]
;;;1047       SPIM_SET_GO();                              /* Go.              */
000066  6841              LDR      r1,[r0,#4]
000068  f0410101          ORR      r1,r1,#1
00006c  6041              STR      r1,[r0,#4]
;;;1048   
;;;1049       if (isSync)
00006e  f1ba0f00          CMP      r10,#0
000072  d002              BEQ      |L19.122|
                  |L19.116|
;;;1050       {
;;;1051           SPIM_WAIT_FREE();
000074  6841              LDR      r1,[r0,#4]
000076  07c9              LSLS     r1,r1,#31
000078  d1fc              BNE      |L19.116|
                  |L19.122|
;;;1052       }
;;;1053   
;;;1054       if (wrCmd == CMD_QUAD_PAGE_PROGRAM_EON)
00007a  42ac              CMP      r4,r5
00007c  d109              BNE      |L19.146|
;;;1055       {
;;;1056           spim_eon_set_qpi_mode(0);                /* Exit QPI mode.   */
00007e  e8bd47f0          POP      {r4-r10,lr}
000082  2000              MOVS     r0,#0
000084  f7ffbffe          B.W      spim_eon_set_qpi_mode
                  |L19.136|
000088  2101              MOVS     r1,#1                 ;1032
00008a  4608              MOV      r0,r1                 ;1032
00008c  f7fffffe          BL       SPIM_SetQuadEnable
000090  e7cf              B        |L19.50|
                  |L19.146|
;;;1057       }
;;;1058   }
000092  e8bd87f0          POP      {r4-r10,pc}
;;;1059   
                          ENDP

000096  0000              DCW      0x0000
                  |L19.152|
                          DCD      0x40007000

                          AREA ||i.SPIM_WriteStatusRegister||, CODE, READONLY, ALIGN=2

                  SPIM_WriteStatusRegister PROC
;;;288      */
;;;289    static void SPIM_WriteStatusRegister(uint8_t dataBuf[], uint32_t u32NTx, uint32_t u32NBit)
000000  b538              PUSH     {r3-r5,lr}
;;;290    {
;;;291        uint8_t cmdBuf[] = {OPCODE_WRSR, 0x00U};     /* 1-byte Write Status Register #1 command + 1-byte data. */
000002  a10b              ADR      r1,|L20.48|
;;;292    
;;;293        cmdBuf[1] = dataBuf[0];
;;;294        SPIM_SET_SS_EN(1);                          /* CS activated. */
000004  4c0b              LDR      r4,|L20.52|
000006  6809              LDR      r1,[r1,#0]            ;291
000008  9100              STR      r1,[sp,#0]            ;293
00000a  7800              LDRB     r0,[r0,#0]            ;293
00000c  f88d0001          STRB     r0,[sp,#1]            ;293
000010  6860              LDR      r0,[r4,#4]
000012  f0200010          BIC      r0,r0,#0x10
000016  6060              STR      r0,[r4,#4]
;;;295        SwitchNBitOutput(u32NBit);
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       SwitchNBitOutput
;;;296        spim_write(cmdBuf, sizeof (cmdBuf));
00001e  2102              MOVS     r1,#2
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       spim_write
;;;297        SPIM_SET_SS_EN(0);                          /* CS deactivated. */
000026  6860              LDR      r0,[r4,#4]
000028  f0400010          ORR      r0,r0,#0x10
00002c  6060              STR      r0,[r4,#4]
;;;298    }
00002e  bd38              POP      {r3-r5,pc}
;;;299    
                          ENDP

                  |L20.48|
000030  0100              DCB      1,0
000032  00                DCB      0
000033  00                DCB      0
                  |L20.52|
                          DCD      0x40007000

                          AREA ||i.SwitchNBitInput||, CODE, READONLY, ALIGN=2

                  SwitchNBitInput PROC
;;;98     
;;;99     static void SwitchNBitInput(uint32_t u32NBit)
000000  490b              LDR      r1,|L21.48|
;;;100    {
;;;101        switch (u32NBit)
000002  2801              CMP      r0,#1
000004  d00a              BEQ      |L21.28|
000006  2802              CMP      r0,#2
000008  d00c              BEQ      |L21.36|
00000a  2804              CMP      r0,#4
00000c  d105              BNE      |L21.26|
;;;102        {
;;;103        case 1UL:
;;;104            SPIM_ENABLE_SING_INPUT_MODE();      /* 1-bit, Input.  */
;;;105            break;
;;;106    
;;;107        case 2UL:
;;;108            SPIM_ENABLE_DUAL_INPUT_MODE();      /* 2-bit, Input.  */
;;;109            break;
;;;110    
;;;111        case 4UL:
;;;112            SPIM_ENABLE_QUAD_INPUT_MODE();      /* 4-bit, Input.  */
00000e  6808              LDR      r0,[r1,#0]
000010  f4201042          BIC      r0,r0,#0x308000
000014  f4401000          ORR      r0,r0,#0x200000
                  |L21.24|
000018  6008              STR      r0,[r1,#0]
                  |L21.26|
;;;113            break;
;;;114    
;;;115        default:
;;;116            break;
;;;117        }
;;;118    }
00001a  4770              BX       lr
                  |L21.28|
00001c  6808              LDR      r0,[r1,#0]            ;104
00001e  f4201042          BIC      r0,r0,#0x308000       ;104
000022  e7f9              B        |L21.24|
                  |L21.36|
000024  6808              LDR      r0,[r1,#0]            ;108
000026  f4201042          BIC      r0,r0,#0x308000       ;108
00002a  f4401080          ORR      r0,r0,#0x100000       ;108
00002e  e7f3              B        |L21.24|
;;;119    
                          ENDP

                  |L21.48|
                          DCD      0x40007000

                          AREA ||i.SwitchNBitOutput||, CODE, READONLY, ALIGN=2

                  SwitchNBitOutput PROC
;;;77     
;;;78     static void SwitchNBitOutput(uint32_t u32NBit)
000000  490c              LDR      r1,|L22.52|
;;;79     {
;;;80         switch (u32NBit)
000002  2801              CMP      r0,#1
000004  d00a              BEQ      |L22.28|
000006  2802              CMP      r0,#2
000008  d00e              BEQ      |L22.40|
00000a  2804              CMP      r0,#4
00000c  d105              BNE      |L22.26|
;;;81         {
;;;82         case 1UL:
;;;83             SPIM_ENABLE_SING_OUTPUT_MODE();     /* 1-bit, Output. */
;;;84             break;
;;;85     
;;;86         case 2UL:
;;;87             SPIM_ENABLE_DUAL_OUTPUT_MODE();     /* 2-bit, Output. */
;;;88             break;
;;;89     
;;;90         case 4UL:
;;;91             SPIM_ENABLE_QUAD_OUTPUT_MODE();     /* 4-bit, Output. */
00000e  6808              LDR      r0,[r1,#0]
000010  f4201042          BIC      r0,r0,#0x308000
000014  f4401002          ORR      r0,r0,#0x208000
                  |L22.24|
000018  6008              STR      r0,[r1,#0]
                  |L22.26|
;;;92             break;
;;;93     
;;;94         default:
;;;95             break;
;;;96         }
;;;97     }
00001a  4770              BX       lr
                  |L22.28|
00001c  6808              LDR      r0,[r1,#0]            ;83
00001e  f4201042          BIC      r0,r0,#0x308000       ;83
000022  f4404000          ORR      r0,r0,#0x8000         ;83
000026  e7f7              B        |L22.24|
                  |L22.40|
000028  6808              LDR      r0,[r1,#0]            ;87
00002a  f4201042          BIC      r0,r0,#0x308000       ;87
00002e  f4401084          ORR      r0,r0,#0x108000       ;87
000032  e7f1              B        |L22.24|
;;;98     
                          ENDP

                  |L22.52|
                          DCD      0x40007000

                          AREA ||i.spim_enable_spansion_quad_mode||, CODE, READONLY, ALIGN=2

                  spim_enable_spansion_quad_mode PROC
;;;578    
;;;579    static void spim_enable_spansion_quad_mode(int isEn)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;580    {
000004  4607              MOV      r7,r0
;;;581        uint8_t cmdBuf[3];
;;;582        uint8_t dataBuf[1], status1;
;;;583    
;;;584        cmdBuf[0] = 0x5U;                            /* Read Status Register-1 */
;;;585    
;;;586        SPIM_SET_SS_EN(1);
000006  4c3e              LDR      r4,|L23.256|
000008  2005              MOVS     r0,#5                 ;584
00000a  f88d0000          STRB     r0,[sp,#0]            ;584
00000e  6860              LDR      r0,[r4,#4]
000010  f0200010          BIC      r0,r0,#0x10
000014  6060              STR      r0,[r4,#4]
;;;587        SwitchNBitOutput(1UL);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       SwitchNBitOutput
;;;588        spim_write(cmdBuf, sizeof (cmdBuf));
00001c  2103              MOVS     r1,#3
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       spim_write
;;;589        SwitchNBitInput(1UL);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       SwitchNBitInput
;;;590        spim_read(dataBuf, sizeof (dataBuf));
00002a  2101              MOVS     r1,#1
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       spim_read
;;;591        SPIM_SET_SS_EN(0);
000032  6860              LDR      r0,[r4,#4]
000034  f0400010          ORR      r0,r0,#0x10
000038  6060              STR      r0,[r4,#4]
;;;592        /* SPIM_DBGMSG("SR1 = 0x%x\n", dataBuf[0]); */
;;;593    
;;;594        status1 = dataBuf[0];
;;;595    
;;;596        cmdBuf[0] = 0x35U;                           /* Read Configuration Register-1 */
00003a  2635              MOVS     r6,#0x35
00003c  f88d6000          STRB     r6,[sp,#0]
000040  f89d5004          LDRB     r5,[sp,#4]            ;594
;;;597    
;;;598        SPIM_SET_SS_EN(1);
000044  6860              LDR      r0,[r4,#4]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6060              STR      r0,[r4,#4]
;;;599        SwitchNBitOutput(1UL);
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       SwitchNBitOutput
;;;600        spim_write(cmdBuf, sizeof (cmdBuf));
000052  2103              MOVS     r1,#3
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       spim_write
;;;601        SwitchNBitInput(1UL);
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       SwitchNBitInput
;;;602        spim_read(dataBuf, sizeof (dataBuf));
000060  2101              MOVS     r1,#1
000062  a801              ADD      r0,sp,#4
000064  f7fffffe          BL       spim_read
;;;603        SPIM_SET_SS_EN(0);
000068  6860              LDR      r0,[r4,#4]
00006a  f0400010          ORR      r0,r0,#0x10
00006e  6060              STR      r0,[r4,#4]
;;;604        /* SPIM_DBGMSG("CR1 = 0x%x\n", dataBuf[0]); */
;;;605    
;;;606        spim_set_write_enable(1, 1UL);
000070  2101              MOVS     r1,#1
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       spim_set_write_enable
;;;607    
;;;608        cmdBuf[0] =  0x1U;                           /* Write register   */
000078  2001              MOVS     r0,#1
00007a  f88d0000          STRB     r0,[sp,#0]
;;;609        cmdBuf[1] =  status1;
;;;610    
;;;611        if (isEn)
;;;612        {
;;;613            cmdBuf[2] = dataBuf[0] | 0x2U;           /* set QUAD         */
;;;614        }
;;;615        else
;;;616        {
;;;617            cmdBuf[2] = dataBuf[0] & ~0x2U;          /* clear QUAD       */
00007e  f89d0004          LDRB     r0,[sp,#4]
000082  f88d5001          STRB     r5,[sp,#1]            ;609
000086  b117              CBZ      r7,|L23.142|
000088  f0400002          ORR      r0,r0,#2              ;613
00008c  e001              B        |L23.146|
                  |L23.142|
00008e  f0200002          BIC      r0,r0,#2
                  |L23.146|
000092  f88d0002          STRB     r0,[sp,#2]
;;;618        }
;;;619    
;;;620        SPIM_SET_SS_EN(1);
000096  6860              LDR      r0,[r4,#4]
000098  f0200010          BIC      r0,r0,#0x10
00009c  6060              STR      r0,[r4,#4]
;;;621        SwitchNBitOutput(1UL);
00009e  2001              MOVS     r0,#1
0000a0  f7fffffe          BL       SwitchNBitOutput
;;;622        spim_write(cmdBuf, 3UL);
0000a4  2103              MOVS     r1,#3
0000a6  4668              MOV      r0,sp
0000a8  f7fffffe          BL       spim_write
;;;623        SPIM_SET_SS_EN(0);
0000ac  6860              LDR      r0,[r4,#4]
0000ae  f0400010          ORR      r0,r0,#0x10
0000b2  6060              STR      r0,[r4,#4]
;;;624    
;;;625        spim_set_write_enable(0, 1UL);
0000b4  2101              MOVS     r1,#1
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       spim_set_write_enable
;;;626    
;;;627    
;;;628        cmdBuf[0] = 0x35U;                           /* Read Configuration Register-1 */
0000bc  f88d6000          STRB     r6,[sp,#0]
;;;629    
;;;630        SPIM_SET_SS_EN(1);
0000c0  6860              LDR      r0,[r4,#4]
0000c2  f0200010          BIC      r0,r0,#0x10
0000c6  6060              STR      r0,[r4,#4]
;;;631        SwitchNBitOutput(1UL);
0000c8  2001              MOVS     r0,#1
0000ca  f7fffffe          BL       SwitchNBitOutput
;;;632        spim_write(cmdBuf, sizeof (cmdBuf));
0000ce  2103              MOVS     r1,#3
0000d0  4668              MOV      r0,sp
0000d2  f7fffffe          BL       spim_write
;;;633        SwitchNBitInput(1UL);
0000d6  2001              MOVS     r0,#1
0000d8  f7fffffe          BL       SwitchNBitInput
;;;634        spim_read(dataBuf, sizeof (dataBuf));
0000dc  2101              MOVS     r1,#1
0000de  a801              ADD      r0,sp,#4
0000e0  f7fffffe          BL       spim_read
;;;635        SPIM_SET_SS_EN(0);
0000e4  6860              LDR      r0,[r4,#4]
0000e6  f0400010          ORR      r0,r0,#0x10
0000ea  6060              STR      r0,[r4,#4]
;;;636    
;;;637        /* SPIM_DBGMSG("CR1 = 0x%x\n", dataBuf[0]); */
;;;638        N_delay(10000);
0000ec  f2427010          MOV      r0,#0x2710
0000f0  e000              B        |L23.244|
                  |L23.242|
0000f2  bf00              NOP      
                  |L23.244|
0000f4  1e01              SUBS     r1,r0,#0
0000f6  f1a00001          SUB      r0,r0,#1
0000fa  dcfa              BGT      |L23.242|
;;;639    }
0000fc  e8bd81fc          POP      {r2-r8,pc}
;;;640    
                          ENDP

                  |L23.256|
                          DCD      0x40007000

                          AREA ||i.spim_eon_set_qpi_mode||, CODE, READONLY, ALIGN=2

                  spim_eon_set_qpi_mode PROC
;;;704      */
;;;705    static void spim_eon_set_qpi_mode(int isEn)
000000  b57c              PUSH     {r2-r6,lr}
;;;706    {
000002  4605              MOV      r5,r0
;;;707        uint8_t cmdBuf[1];                           /* 1-byte command.  */
;;;708    
;;;709        uint8_t status[1];
;;;710        SPIM_ReadStatusRegister(status, sizeof (status), 1UL);
000004  2201              MOVS     r2,#1
000006  4611              MOV      r1,r2
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       SPIM_ReadStatusRegister
;;;711        SPIM_DBGMSG("Status: 0x%x\n", status[0]);
;;;712    
;;;713        if (isEn)                                    /* Assume in SPI mode. */
;;;714        {
;;;715            cmdBuf[0] = OPCODE_ENQPI;
;;;716    
;;;717            SPIM_SET_SS_EN(1);                      /* CS activated.    */
00000e  4c11              LDR      r4,|L24.84|
000010  b145              CBZ      r5,|L24.36|
000012  2038              MOVS     r0,#0x38              ;715
000014  f88d0000          STRB     r0,[sp,#0]            ;715
000018  6860              LDR      r0,[r4,#4]
00001a  f0200010          BIC      r0,r0,#0x10
00001e  6060              STR      r0,[r4,#4]
;;;718            SwitchNBitOutput(1UL);
000020  2001              MOVS     r0,#1
;;;719            spim_write(cmdBuf, sizeof (cmdBuf));
;;;720            SPIM_SET_SS_EN(0);                      /* CS deactivated.  */
000022  e007              B        |L24.52|
                  |L24.36|
;;;721        }
;;;722        else                                         /* Assume in QPI mode. */
;;;723        {
;;;724            cmdBuf[0] = OPCODE_EXQPI;
000024  20ff              MOVS     r0,#0xff
000026  f88d0000          STRB     r0,[sp,#0]
;;;725    
;;;726            SPIM_SET_SS_EN(1);                      /* CS activated.    */
00002a  6860              LDR      r0,[r4,#4]
00002c  f0200010          BIC      r0,r0,#0x10
000030  6060              STR      r0,[r4,#4]
;;;727            SwitchNBitOutput(4UL);
000032  2004              MOVS     r0,#4
                  |L24.52|
000034  f7fffffe          BL       SwitchNBitOutput
;;;728            spim_write(cmdBuf, sizeof (cmdBuf));
000038  2101              MOVS     r1,#1
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       spim_write
;;;729            SPIM_SET_SS_EN(0);                      /* CS deactivated.  */
000040  6860              LDR      r0,[r4,#4]
000042  f0400010          ORR      r0,r0,#0x10
000046  6060              STR      r0,[r4,#4]
;;;730        }
;;;731    
;;;732        SPIM_ReadStatusRegister(status, sizeof (status), 1UL);
000048  2201              MOVS     r2,#1
00004a  4611              MOV      r1,r2
00004c  a801              ADD      r0,sp,#4
00004e  f7fffffe          BL       SPIM_ReadStatusRegister
;;;733        SPIM_DBGMSG("Status: 0x%x\n", status[0]);
;;;734    }
000052  bd7c              POP      {r2-r6,pc}
;;;735    
                          ENDP

                  |L24.84|
                          DCD      0x40007000

                          AREA ||i.spim_read||, CODE, READONLY, ALIGN=2

                  spim_read PROC
;;;199      */
;;;200    static void spim_read(uint8_t pu8RxBuf[], uint32_t u32NRx)
000000  b5f8              PUSH     {r3-r7,lr}
;;;201    {
;;;202        uint32_t  buf_idx = 0UL;
000002  2200              MOVS     r2,#0
000004  2900              CMP      r1,#0                 ;201
000006  d054              BEQ      |L25.178|
;;;203    
;;;204        while (u32NRx)
;;;205        {
;;;206            uint32_t dataNum = 0UL;   /* number of words */
;;;207    
;;;208            if (u32NRx >= 16UL)
;;;209            {
;;;210                dataNum = 4UL;
;;;211            }
;;;212            else if (u32NRx >= 12UL)
;;;213            {
;;;214                dataNum = 3UL;
;;;215            }
;;;216            else if (u32NRx >= 8UL)
;;;217            {
;;;218                dataNum = 2UL;
;;;219            }
;;;220            else if (u32NRx >= 4UL)
;;;221            {
;;;222                dataNum = 1UL;
;;;223            }
;;;224    
;;;225            if (dataNum)
;;;226            {
;;;227                SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_IO);    /* Switch to Normal mode. */
000008  4c2a              LDR      r4,|L25.180|
                  |L25.10|
00000a  2910              CMP      r1,#0x10              ;208
00000c  d301              BCC      |L25.18|
00000e  2304              MOVS     r3,#4                 ;210
000010  e00a              B        |L25.40|
                  |L25.18|
000012  290c              CMP      r1,#0xc               ;212
000014  d301              BCC      |L25.26|
000016  2303              MOVS     r3,#3                 ;214
000018  e006              B        |L25.40|
                  |L25.26|
00001a  2908              CMP      r1,#8                 ;216
00001c  d301              BCC      |L25.34|
00001e  2302              MOVS     r3,#2                 ;218
000020  e002              B        |L25.40|
                  |L25.34|
000022  2904              CMP      r1,#4                 ;220
000024  d322              BCC      |L25.108|
000026  2301              MOVS     r3,#1                 ;222
                  |L25.40|
000028  6825              LDR      r5,[r4,#0]
00002a  f4250540          BIC      r5,r5,#0xc00000
00002e  6025              STR      r5,[r4,#0]
;;;228                SPIM_SET_DATA_WIDTH(32UL);
000030  6825              LDR      r5,[r4,#0]
000032  f44555f8          ORR      r5,r5,#0x1f00
000036  6025              STR      r5,[r4,#0]
;;;229                SPIM_SET_DATA_NUM(dataNum);
000038  6825              LDR      r5,[r4,#0]
00003a  4e1f              LDR      r6,|L25.184|
00003c  f42545c0          BIC      r5,r5,#0x6000
000040  eb063643          ADD      r6,r6,r3,LSL #13
000044  4335              ORRS     r5,r5,r6
000046  6025              STR      r5,[r4,#0]
;;;230                SPIM_SET_GO();
000048  6865              LDR      r5,[r4,#4]
00004a  f0450501          ORR      r5,r5,#1
00004e  6065              STR      r5,[r4,#4]
                  |L25.80|
;;;231                SPIM_WAIT_FREE();
000050  6865              LDR      r5,[r4,#4]
000052  07ed              LSLS     r5,r5,#31
000054  d1fc              BNE      |L25.80|
000056  e007              B        |L25.104|
                  |L25.88|
;;;232            }
;;;233    
;;;234            while (dataNum)
;;;235            {
;;;236                uint32_t tmp;
;;;237    
;;;238                tmp = SPIM->RX[dataNum-1UL];
000058  eb040583          ADD      r5,r4,r3,LSL #2
00005c  68ed              LDR      r5,[r5,#0xc]
;;;239                memcpy(&pu8RxBuf[buf_idx], &tmp, 4U);
00005e  1886              ADDS     r6,r0,r2
000060  1f09              SUBS     r1,r1,#4
000062  1d12              ADDS     r2,r2,#4
000064  6035              STR      r5,[r6,#0]
000066  1e5b              SUBS     r3,r3,#1
                  |L25.104|
000068  2b00              CMP      r3,#0                 ;234
00006a  d1f5              BNE      |L25.88|
                  |L25.108|
;;;240                buf_idx += 4UL;
;;;241                dataNum --;
;;;242                u32NRx -= 4UL;
;;;243            }
;;;244    
;;;245            if (u32NRx && (u32NRx < 4UL))
00006c  2900              CMP      r1,#0
00006e  d020              BEQ      |L25.178|
000070  2904              CMP      r1,#4
000072  d2ca              BCS      |L25.10|
;;;246            {
;;;247                uint32_t tmp;
;;;248    
;;;249                SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_IO);    /* Switch to Normal mode. */
000074  6823              LDR      r3,[r4,#0]
000076  f4230340          BIC      r3,r3,#0xc00000
00007a  6023              STR      r3,[r4,#0]
;;;250                SPIM_SET_DATA_WIDTH(u32NRx * 8UL);
00007c  6823              LDR      r3,[r4,#0]
00007e  f06f05ff          MVN      r5,#0xff
000082  f42353f8          BIC      r3,r3,#0x1f00
000086  eb0525c1          ADD      r5,r5,r1,LSL #11
00008a  432b              ORRS     r3,r3,r5
00008c  6023              STR      r3,[r4,#0]
;;;251                SPIM_SET_DATA_NUM(1UL);
00008e  6823              LDR      r3,[r4,#0]
000090  f42343c0          BIC      r3,r3,#0x6000
000094  6023              STR      r3,[r4,#0]
;;;252                SPIM_SET_GO();
000096  6863              LDR      r3,[r4,#4]
000098  f0430301          ORR      r3,r3,#1
00009c  6063              STR      r3,[r4,#4]
                  |L25.158|
;;;253                SPIM_WAIT_FREE();
00009e  6863              LDR      r3,[r4,#4]
0000a0  07db              LSLS     r3,r3,#31
0000a2  d1fc              BNE      |L25.158|
;;;254    
;;;255                tmp = SPIM->RX[0];
0000a4  6923              LDR      r3,[r4,#0x10]
;;;256                memcpy(&pu8RxBuf[buf_idx], &tmp, u32NRx);
0000a6  4410              ADD      r0,r0,r2
0000a8  460a              MOV      r2,r1
0000aa  4669              MOV      r1,sp
0000ac  9300              STR      r3,[sp,#0]
0000ae  f7fffffe          BL       __aeabi_memcpy
                  |L25.178|
;;;257                buf_idx += u32NRx;
;;;258                u32NRx = 0UL;
;;;259            }
;;;260        }
;;;261    }
0000b2  bdf8              POP      {r3-r7,pc}
;;;262    
                          ENDP

                  |L25.180|
                          DCD      0x40007000
                  |L25.184|
                          DCD      0xffffe000

                          AREA ||i.spim_set_write_enable||, CODE, READONLY, ALIGN=2

                  spim_set_write_enable PROC
;;;459      */
;;;460    static void spim_set_write_enable(int isEn, uint32_t u32NBit)
000000  b538              PUSH     {r3-r5,lr}
;;;461    {
;;;462        uint8_t cmdBuf[] = {0U};                     /* 1-byte Write Enable command. */
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]            ;461
000006  b108              CBZ      r0,|L26.12|
;;;463        cmdBuf[0] = isEn ? OPCODE_WREN : OPCODE_WRDI;
000008  2006              MOVS     r0,#6
00000a  e000              B        |L26.14|
                  |L26.12|
00000c  2004              MOVS     r0,#4
                  |L26.14|
;;;464    
;;;465        SPIM_SET_SS_EN(1);                          /* CS activated.   */
00000e  4c09              LDR      r4,|L26.52|
000010  f88d0000          STRB     r0,[sp,#0]            ;463
000014  6860              LDR      r0,[r4,#4]
000016  f0200010          BIC      r0,r0,#0x10
00001a  6060              STR      r0,[r4,#4]
;;;466        SwitchNBitOutput(u32NBit);
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SwitchNBitOutput
;;;467        spim_write(cmdBuf, sizeof (cmdBuf));
000022  2101              MOVS     r1,#1
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       spim_write
;;;468        SPIM_SET_SS_EN(0);                          /* CS deactivated.  */
00002a  6860              LDR      r0,[r4,#4]
00002c  f0400010          ORR      r0,r0,#0x10
000030  6060              STR      r0,[r4,#4]
;;;469    }
000032  bd38              POP      {r3-r5,pc}
;;;470    
                          ENDP

                  |L26.52|
                          DCD      0x40007000

                          AREA ||i.spim_wait_write_done||, CODE, READONLY, ALIGN=2

                  spim_wait_write_done PROC
;;;433      */
;;;434    static int spim_wait_write_done(uint32_t u32NBit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;435    {
000004  4607              MOV      r7,r0
;;;436        uint32_t   count;
;;;437        int        ret = -1;
000006  f04f35ff          MOV      r5,#0xffffffff
;;;438    
;;;439        for (count = 0UL; count < SystemCoreClock/1000UL; count++)
00000a  2400              MOVS     r4,#0
00000c  4e0c              LDR      r6,|L27.64|
00000e  f44f787a          MOV      r8,#0x3e8
000012  e00d              B        |L27.48|
                  |L27.20|
;;;440        {
;;;441            if (spim_is_write_done(u32NBit))
000014  463a              MOV      r2,r7
000016  2101              MOVS     r1,#1
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       SPIM_ReadStatusRegister
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f3400000          SBFX     r0,r0,#0,#1
000026  1c40              ADDS     r0,r0,#1
000028  d001              BEQ      |L27.46|
;;;442            {
;;;443                ret = 0;
00002a  2500              MOVS     r5,#0
;;;444                break;
00002c  e005              B        |L27.58|
                  |L27.46|
00002e  1c64              ADDS     r4,r4,#1
                  |L27.48|
000030  6831              LDR      r1,[r6,#0]            ;439  ; SystemCoreClock
000032  fbb1f0f8          UDIV     r0,r1,r8              ;439
000036  42a0              CMP      r0,r4                 ;439
000038  d8ec              BHI      |L27.20|
                  |L27.58|
;;;445            }
;;;446        }
;;;447        if (ret != 0)
;;;448        {
;;;449            SPIM_DBGMSG("spim_wait_write_done time-out!!\n");
;;;450        }
;;;451        return ret;
00003a  4628              MOV      r0,r5
;;;452    }
00003c  e8bd83f8          POP      {r3-r9,pc}
;;;453    
                          ENDP

                  |L27.64|
                          DCD      SystemCoreClock

                          AREA ||i.spim_write||, CODE, READONLY, ALIGN=2

                  spim_write PROC
;;;126      */
;;;127    static void spim_write(uint8_t pu8TxBuf[], uint32_t u32NTx)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;128    {
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;129        uint32_t  buf_idx = 0UL;
000008  2500              MOVS     r5,#0
;;;130    
;;;131        while (u32NTx)
;;;132        {
;;;133            uint32_t dataNum = 0UL, dataNum2;
;;;134    
;;;135            if (u32NTx >= 16UL)
;;;136            {
;;;137                dataNum = 4UL;
;;;138            }
;;;139            else if (u32NTx >= 12UL)
;;;140            {
;;;141                dataNum = 3UL;
;;;142            }
;;;143            else if (u32NTx >= 8UL)
;;;144            {
;;;145                dataNum = 2UL;
;;;146            }
;;;147            else if (u32NTx >= 4UL)
;;;148            {
;;;149                dataNum = 1UL;
;;;150            }
;;;151    
;;;152            dataNum2 = dataNum;
;;;153            while (dataNum2)
;;;154            {
;;;155                uint32_t tmp;
;;;156    
;;;157                memcpy(&tmp, &pu8TxBuf[buf_idx], 4U);
;;;158                buf_idx += 4UL;
;;;159                u32NTx -= 4UL;
;;;160    
;;;161                dataNum2 --;
;;;162                /*  *((__O uint32_t *) &SPIM->TX0 + dataNum2) = tmp; */
;;;163                SPIM->TX[dataNum2] = tmp;
00000a  f8df80dc          LDR      r8,|L28.232|
00000e  e066              B        |L28.222|
                  |L28.16|
000010  2100              MOVS     r1,#0                 ;133
000012  2c10              CMP      r4,#0x10              ;135
000014  d301              BCC      |L28.26|
000016  2104              MOVS     r1,#4                 ;137
000018  e00a              B        |L28.48|
                  |L28.26|
00001a  2c0c              CMP      r4,#0xc               ;139
00001c  d301              BCC      |L28.34|
00001e  2103              MOVS     r1,#3                 ;141
000020  e006              B        |L28.48|
                  |L28.34|
000022  2c08              CMP      r4,#8                 ;143
000024  d301              BCC      |L28.42|
000026  2102              MOVS     r1,#2                 ;145
000028  e002              B        |L28.48|
                  |L28.42|
00002a  2c04              CMP      r4,#4                 ;147
00002c  d300              BCC      |L28.48|
00002e  2101              MOVS     r1,#1                 ;149
                  |L28.48|
000030  4608              MOV      r0,r1                 ;152
000032  4642              MOV      r2,r8
000034  e009              B        |L28.74|
                  |L28.54|
000036  1973              ADDS     r3,r6,r5              ;157
000038  681f              LDR      r7,[r3,#0]            ;157
00003a  4603              MOV      r3,r0                 ;161
00003c  1e40              SUBS     r0,r0,#1              ;161
;;;164            }
;;;165    
;;;166            if (dataNum)
;;;167            {
;;;168                SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_IO);    /* Switch to Normal mode. */
;;;169                SPIM_SET_DATA_WIDTH(32UL);
;;;170                SPIM_SET_DATA_NUM(dataNum);
;;;171                SPIM_SET_GO();
;;;172                SPIM_WAIT_FREE();
;;;173            }
;;;174    
;;;175            if (u32NTx && (u32NTx < 4UL))
;;;176            {
;;;177                uint32_t  rnm, tmp;
;;;178    
;;;179                rnm = u32NTx;
;;;180                memcpy(&tmp, &pu8TxBuf[buf_idx], u32NTx);
;;;181                buf_idx += u32NTx;
;;;182                u32NTx = 0UL;
;;;183                SPIM->TX[0] = tmp;
;;;184    
;;;185                SPIM_SET_OPMODE(SPIM_CTL0_OPMODE_IO);    /* Switch to Normal mode. */
;;;186                SPIM_SET_DATA_WIDTH(rnm * 8UL);
;;;187                SPIM_SET_DATA_NUM(1UL);
;;;188                SPIM_SET_GO();
;;;189                SPIM_WAIT_FREE();
;;;190            }
;;;191        }
;;;192    }
00003e  009b              LSLS     r3,r3,#2
000040  1f1b              SUBS     r3,r3,#4
000042  4413              ADD      r3,r3,r2              ;163
000044  621f              STR      r7,[r3,#0x20]         ;163
000046  1f24              SUBS     r4,r4,#4              ;163
000048  1d2d              ADDS     r5,r5,#4              ;163
                  |L28.74|
00004a  2800              CMP      r0,#0                 ;153
00004c  d1f3              BNE      |L28.54|
00004e  b1b1              CBZ      r1,|L28.126|
000050  6810              LDR      r0,[r2,#0]            ;168
000052  f4200040          BIC      r0,r0,#0xc00000       ;168
000056  6010              STR      r0,[r2,#0]            ;168
000058  6810              LDR      r0,[r2,#0]            ;169
00005a  f44050f8          ORR      r0,r0,#0x1f00         ;169
00005e  6010              STR      r0,[r2,#0]            ;169
000060  6810              LDR      r0,[r2,#0]            ;170
000062  4b22              LDR      r3,|L28.236|
000064  f42040c0          BIC      r0,r0,#0x6000         ;170
000068  eb033141          ADD      r1,r3,r1,LSL #13      ;170
00006c  4308              ORRS     r0,r0,r1              ;170
00006e  6010              STR      r0,[r2,#0]            ;170
000070  6850              LDR      r0,[r2,#4]            ;171
000072  f0400001          ORR      r0,r0,#1              ;171
000076  6050              STR      r0,[r2,#4]            ;171
                  |L28.120|
000078  6850              LDR      r0,[r2,#4]            ;172
00007a  07c0              LSLS     r0,r0,#31             ;172
00007c  d1fc              BNE      |L28.120|
                  |L28.126|
00007e  2c00              CMP      r4,#0                 ;175
000080  d02f              BEQ      |L28.226|
000082  2c04              CMP      r4,#4                 ;175
000084  d2c4              BCS      |L28.16|
000086  4627              MOV      r7,r4                 ;179
000088  1971              ADDS     r1,r6,r5              ;180
00008a  463a              MOV      r2,r7                 ;180
00008c  4668              MOV      r0,sp                 ;180
00008e  f7fffffe          BL       __aeabi_memcpy
000092  4425              ADD      r5,r5,r4              ;181
000094  9900              LDR      r1,[sp,#0]            ;183
000096  2400              MOVS     r4,#0                 ;182
000098  4640              MOV      r0,r8                 ;183
00009a  f8c81020          STR      r1,[r8,#0x20]         ;183
00009e  f8d81000          LDR      r1,[r8,#0]            ;185
0000a2  f4210140          BIC      r1,r1,#0xc00000       ;185
0000a6  f8c81000          STR      r1,[r8,#0]            ;185
0000aa  f8d81000          LDR      r1,[r8,#0]            ;186
0000ae  f06f02ff          MVN      r2,#0xff              ;186
0000b2  f42151f8          BIC      r1,r1,#0x1f00         ;186
0000b6  eb0222c7          ADD      r2,r2,r7,LSL #11      ;186
0000ba  4311              ORRS     r1,r1,r2              ;186
0000bc  f8c81000          STR      r1,[r8,#0]            ;186
0000c0  f8d81000          LDR      r1,[r8,#0]            ;187
0000c4  f42141c0          BIC      r1,r1,#0x6000         ;187
0000c8  f8c81000          STR      r1,[r8,#0]            ;187
0000cc  f8d81004          LDR      r1,[r8,#4]            ;188
0000d0  f0410101          ORR      r1,r1,#1              ;188
0000d4  f8c81004          STR      r1,[r8,#4]            ;188
                  |L28.216|
0000d8  6841              LDR      r1,[r0,#4]            ;189
0000da  07c9              LSLS     r1,r1,#31             ;189
0000dc  d1fc              BNE      |L28.216|
                  |L28.222|
0000de  2c00              CMP      r4,#0                 ;131
0000e0  d196              BNE      |L28.16|
                  |L28.226|
0000e2  e8bd83f8          POP      {r3-r9,pc}
;;;193    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L28.232|
                          DCD      0x40007000
                  |L28.236|
                          DCD      0xffffe000

                          AREA ||.data||, DATA, ALIGN=0

                  g_Supported_List
000000  efc21c7f          DCB      0xef,0xc2,0x1c,0x7f
000004  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\spim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_spim_c_54fcc942____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_spim_c_54fcc942____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_spim_c_54fcc942____REVSH|
#line 402
|__asm___6_spim_c_54fcc942____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_spim_c_54fcc942____RRX|
#line 587
|__asm___6_spim_c_54fcc942____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
