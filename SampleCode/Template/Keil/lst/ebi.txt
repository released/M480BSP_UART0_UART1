; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ebi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ebi.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\ebi.crf ..\..\..\Library\StdDriver\src\ebi.c]
                          THUMB

                          AREA ||i.EBI_Close||, CODE, READONLY, ALIGN=2

                  EBI_Close PROC
;;;146      */
;;;147    void EBI_Close(uint32_t u32Bank)
000000  4903              LDR      r1,|L1.16|
;;;148    {
;;;149        uint32_t u32Index = (uint32_t)&EBI->CTL0 + u32Bank * 0x10U;
000002  eb011000          ADD      r0,r1,r0,LSL #4
;;;150        volatile uint32_t *pu32EBICTL = (uint32_t *)( u32Index );
;;;151    
;;;152        *pu32EBICTL &= ~EBI_CTL_EN_Msk;
000006  6801              LDR      r1,[r0,#0]
000008  f0210101          BIC      r1,r1,#1
00000c  6001              STR      r1,[r0,#0]
;;;153    }
00000e  4770              BX       lr
;;;154    
                          ENDP

                  |L1.16|
                          DCD      0x40010000

                          AREA ||i.EBI_Open||, CODE, READONLY, ALIGN=2

                  EBI_Open PROC
;;;54       */
;;;55     void EBI_Open(uint32_t u32Bank, uint32_t u32DataWidth, uint32_t u32TimingClass, uint32_t u32BusMode, uint32_t u32CSActiveLevel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;56     {
;;;57         uint32_t u32Index0 = (uint32_t)&EBI->CTL0 + (uint32_t)u32Bank * 0x10U;
000002  4c2d              LDR      r4,|L2.184|
;;;58         uint32_t u32Index1 = (uint32_t)&EBI->TCTL0 + (uint32_t)u32Bank * 0x10U;
000004  4e2c              LDR      r6,|L2.184|
000006  eb041400          ADD      r4,r4,r0,LSL #4       ;57
00000a  1d36              ADDS     r6,r6,#4
;;;59         volatile uint32_t *pu32EBICTL  = (uint32_t *)( u32Index0 );
;;;60         volatile uint32_t *pu32EBITCTL = (uint32_t *)( u32Index1 );
;;;61     
;;;62         if(u32DataWidth == EBI_BUSWIDTH_8BIT)
00000c  2908              CMP      r1,#8
00000e  9d05              LDR      r5,[sp,#0x14]
;;;63         {
;;;64             *pu32EBICTL &= ~EBI_CTL_DW16_Msk;
;;;65         }
;;;66         else
;;;67         {
;;;68             *pu32EBICTL |= EBI_CTL_DW16_Msk;
000010  6821              LDR      r1,[r4,#0]
000012  eb061000          ADD      r0,r6,r0,LSL #4       ;58
000016  d011              BEQ      |L2.60|
000018  f0410102          ORR      r1,r1,#2
                  |L2.28|
00001c  6021              STR      r1,[r4,#0]
;;;69         }
;;;70     
;;;71         *pu32EBICTL |= u32BusMode;
00001e  6821              LDR      r1,[r4,#0]
000020  4319              ORRS     r1,r1,r3
000022  6021              STR      r1,[r4,#0]
000024  2600              MOVS     r6,#0
;;;72     
;;;73         switch(u32TimingClass)
;;;74         {
;;;75         case EBI_TIMING_FASTEST:
;;;76             *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
000026  4925              LDR      r1,|L2.188|
;;;77                           (EBI_MCLKDIV_1 << EBI_CTL_MCLKDIV_Pos) |
;;;78                           (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk;
;;;79             *pu32EBITCTL = 0x0U;
;;;80             break;
;;;81     
;;;82         case EBI_TIMING_VERYFAST:
;;;83             *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;84                           (EBI_MCLKDIV_1 << EBI_CTL_MCLKDIV_Pos) |
;;;85                           (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk |
;;;86                           (0x3U << EBI_CTL_TALE_Pos) ;
;;;87             *pu32EBITCTL = 0x03003318U;
000028  4f25              LDR      r7,|L2.192|
;;;88             break;
;;;89     
;;;90         case EBI_TIMING_FAST:
;;;91             *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;92                           (EBI_MCLKDIV_2 << EBI_CTL_MCLKDIV_Pos) |
;;;93                           (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk;
;;;94             *pu32EBITCTL = 0x0U;
;;;95             break;
;;;96     
;;;97         case EBI_TIMING_NORMAL:
;;;98             *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;99                           (EBI_MCLKDIV_2 << EBI_CTL_MCLKDIV_Pos) |
;;;100                          (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk |
;;;101                          (0x3U << EBI_CTL_TALE_Pos) ;
;;;102            *pu32EBITCTL = 0x03003318U;
;;;103            break;
;;;104    
;;;105        case EBI_TIMING_SLOW:
;;;106            *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;107                          (EBI_MCLKDIV_2 << EBI_CTL_MCLKDIV_Pos) |
;;;108                          (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk |
;;;109                          (0x7U << EBI_CTL_TALE_Pos) ;
;;;110            *pu32EBITCTL = 0x07007738U;
00002a  4b26              LDR      r3,|L2.196|
00002c  2a07              CMP      r2,#7                 ;73
00002e  d23d              BCS      |L2.172|
000030  e8dff002          TBB      [pc,r2]               ;73
000034  070e141e          DCB      0x07,0x0e,0x14,0x1e
000038  272d3300          DCB      0x27,0x2d,0x33,0x00
                  |L2.60|
00003c  f0210102          BIC      r1,r1,#2              ;64
000040  e7ec              B        |L2.28|
000042  6822              LDR      r2,[r4,#0]            ;76
000044  400a              ANDS     r2,r2,r1              ;76
000046  ea420185          ORR      r1,r2,r5,LSL #2       ;76
00004a  f0410101          ORR      r1,r1,#1              ;76
00004e  e00c              B        |L2.106|
000050  6822              LDR      r2,[r4,#0]            ;83
000052  400a              ANDS     r2,r2,r1              ;83
000054  ea420185          ORR      r1,r2,r5,LSL #2       ;83
000058  4a1b              LDR      r2,|L2.200|
00005a  e00e              B        |L2.122|
00005c  6822              LDR      r2,[r4,#0]            ;91
00005e  400a              ANDS     r2,r2,r1              ;91
000060  ea420185          ORR      r1,r2,r5,LSL #2       ;91
000064  f2401201          MOV      r2,#0x101             ;91
000068  4311              ORRS     r1,r1,r2              ;91
                  |L2.106|
00006a  6021              STR      r1,[r4,#0]            ;91
00006c  6006              STR      r6,[r0,#0]            ;94
;;;111            break;
;;;112    
;;;113        case EBI_TIMING_VERYSLOW:
;;;114            *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;115                          (EBI_MCLKDIV_4 << EBI_CTL_MCLKDIV_Pos) |
;;;116                          (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk |
;;;117                          (0x7U << EBI_CTL_TALE_Pos) ;
;;;118            *pu32EBITCTL = 0x07007738U;
;;;119            break;
;;;120    
;;;121        case EBI_TIMING_SLOWEST:
;;;122            *pu32EBICTL = (*pu32EBICTL & ~(EBI_CTL_MCLKDIV_Msk | EBI_CTL_TALE_Msk)) |
;;;123                          (EBI_MCLKDIV_8 << EBI_CTL_MCLKDIV_Pos) |
;;;124                          (u32CSActiveLevel << EBI_CTL_CSPOLINV_Pos) | EBI_CTL_EN_Msk |
;;;125                          (0x7U << EBI_CTL_TALE_Pos) ;
;;;126            *pu32EBITCTL = 0x07007738U;
;;;127            break;
;;;128    
;;;129        default:
;;;130            *pu32EBICTL &= ~EBI_CTL_EN_Msk;
;;;131            break;
;;;132        }
;;;133    }
00006e  bdf0              POP      {r4-r7,pc}
000070  6822              LDR      r2,[r4,#0]            ;98
000072  400a              ANDS     r2,r2,r1              ;98
000074  ea420185          ORR      r1,r2,r5,LSL #2       ;98
000078  4a14              LDR      r2,|L2.204|
                  |L2.122|
00007a  4311              ORRS     r1,r1,r2              ;98
00007c  6021              STR      r1,[r4,#0]            ;98
00007e  6007              STR      r7,[r0,#0]            ;102
000080  bdf0              POP      {r4-r7,pc}
000082  6822              LDR      r2,[r4,#0]            ;106
000084  400a              ANDS     r2,r2,r1              ;106
000086  ea420185          ORR      r1,r2,r5,LSL #2       ;106
00008a  4a11              LDR      r2,|L2.208|
00008c  e00a              B        |L2.164|
00008e  6822              LDR      r2,[r4,#0]            ;114
000090  400a              ANDS     r2,r2,r1              ;114
000092  ea420185          ORR      r1,r2,r5,LSL #2       ;114
000096  4a0f              LDR      r2,|L2.212|
000098  e004              B        |L2.164|
00009a  6822              LDR      r2,[r4,#0]            ;122
00009c  400a              ANDS     r2,r2,r1              ;122
00009e  ea420185          ORR      r1,r2,r5,LSL #2       ;122
0000a2  4a0d              LDR      r2,|L2.216|
                  |L2.164|
0000a4  4311              ORRS     r1,r1,r2              ;122
0000a6  6021              STR      r1,[r4,#0]            ;122
0000a8  6003              STR      r3,[r0,#0]            ;126
0000aa  bdf0              POP      {r4-r7,pc}
                  |L2.172|
0000ac  6820              LDR      r0,[r4,#0]            ;130
0000ae  f0200001          BIC      r0,r0,#1              ;130
0000b2  6020              STR      r0,[r4,#0]            ;130
0000b4  bdf0              POP      {r4-r7,pc}
;;;134    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L2.184|
                          DCD      0x40010000
                  |L2.188|
                          DCD      0xfff8f8ff
                  |L2.192|
                          DCD      0x03003318
                  |L2.196|
                          DCD      0x07007738
                  |L2.200|
                          DCD      0x00030001
                  |L2.204|
                          DCD      0x00030101
                  |L2.208|
                          DCD      0x00070101
                  |L2.212|
                          DCD      0x00070201
                  |L2.216|
                          DCD      0x00070301

                          AREA ||i.EBI_SetBusTiming||, CODE, READONLY, ALIGN=2

                  EBI_SetBusTiming PROC
;;;176      */
;;;177    void EBI_SetBusTiming(uint32_t u32Bank, uint32_t u32TimingConfig, uint32_t u32MclkDiv)
000000  b510              PUSH     {r4,lr}
;;;178    {
;;;179        uint32_t u32Index0 = (uint32_t)&EBI->CTL0 + (uint32_t)u32Bank * 0x10U;
000002  4b07              LDR      r3,|L3.32|
;;;180        uint32_t u32Index1 = (uint32_t)&EBI->TCTL0 + (uint32_t)u32Bank * 0x10U;
000004  4c06              LDR      r4,|L3.32|
000006  eb031300          ADD      r3,r3,r0,LSL #4       ;179
00000a  1d24              ADDS     r4,r4,#4
00000c  eb041000          ADD      r0,r4,r0,LSL #4
;;;181        volatile uint32_t *pu32EBICTL  = (uint32_t *)( u32Index0 );
;;;182        volatile uint32_t *pu32EBITCTL = (uint32_t *)( u32Index1 );
;;;183    
;;;184        *pu32EBICTL = (*pu32EBICTL & ~EBI_CTL_MCLKDIV_Msk) | (u32MclkDiv << EBI_CTL_MCLKDIV_Pos);
000010  681c              LDR      r4,[r3,#0]
000012  f42464e0          BIC      r4,r4,#0x700
000016  ea442202          ORR      r2,r4,r2,LSL #8
00001a  601a              STR      r2,[r3,#0]
;;;185        *pu32EBITCTL = u32TimingConfig;
00001c  6001              STR      r1,[r0,#0]
;;;186    }
00001e  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  |L3.32|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\ebi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_ebi_c_EBI_Open____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_ebi_c_EBI_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_ebi_c_EBI_Open____REVSH|
#line 402
|__asm___5_ebi_c_EBI_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_ebi_c_EBI_Open____RRX|
#line 587
|__asm___5_ebi_c_EBI_Open____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
