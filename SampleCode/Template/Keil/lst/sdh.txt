; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sdh.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sdh.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\sdh.crf ..\..\..\Library\StdDriver\src\sdh.c]
                          THUMB

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.SDH_CardDetection||, CODE, READONLY, ALIGN=2

                  SDH_CardDetection PROC
;;;391    
;;;392    uint32_t SDH_CardDetection(SDH_T *sdh)
000000  b570              PUSH     {r4-r6,lr}
;;;393    {
;;;394        uint32_t i, val = TRUE;
;;;395        SDH_INFO_T *pSD;
;;;396    
;;;397        if (sdh == SDH0)
000002  491c              LDR      r1,|L2.116|
000004  2301              MOVS     r3,#1                 ;394
000006  4288              CMP      r0,r1
000008  d101              BNE      |L2.14|
;;;398        {
;;;399            pSD = &SD0;
00000a  4a1b              LDR      r2,|L2.120|
00000c  e001              B        |L2.18|
                  |L2.14|
;;;400        }
;;;401        else
;;;402        {
;;;403            pSD = &SD1;
00000e  4a1a              LDR      r2,|L2.120|
000010  3218              ADDS     r2,r2,#0x18
                  |L2.18|
;;;404        }
;;;405    
;;;406    
;;;407        if ((sdh->INTEN & SDH_INTEN_CDSRC_Msk) == SDH_INTEN_CDSRC_Msk)   /* Card detect pin from GPIO */
000012  f8d01828          LDR      r1,[r0,#0x828]
000016  f04f0500          MOV      r5,#0
00001a  0049              LSLS     r1,r1,#1
00001c  f04f0601          MOV      r6,#1                 ;394
000020  d508              BPL      |L2.52|
;;;408        {
;;;409            if ((sdh->INTSTS & SDH_INTSTS_CDSTS_Msk) == SDH_INTSTS_CDSTS_Msk)   /* Card remove */
000022  f8d0082c          LDR      r0,[r0,#0x82c]
000026  03c0              LSLS     r0,r0,#15
000028  d502              BPL      |L2.48|
;;;410            {
;;;411                pSD->IsCardInsert = (uint8_t)FALSE;
00002a  7215              STRB     r5,[r2,#8]
;;;412                val = FALSE;
00002c  2300              MOVS     r3,#0
00002e  e01f              B        |L2.112|
                  |L2.48|
;;;413            }
;;;414            else
;;;415            {
;;;416                pSD->IsCardInsert = (uint8_t)TRUE;
000030  7216              STRB     r6,[r2,#8]
000032  e01d              B        |L2.112|
                  |L2.52|
;;;417            }
;;;418        }
;;;419        else if ((sdh->INTEN & SDH_INTEN_CDSRC_Msk) != SDH_INTEN_CDSRC_Msk)
000034  f8d01828          LDR      r1,[r0,#0x828]
000038  0049              LSLS     r1,r1,#1
00003a  d419              BMI      |L2.112|
;;;420        {
;;;421            sdh->CTL |= SDH_CTL_CLKKEEP_Msk;
00003c  f8d01820          LDR      r1,[r0,#0x820]
000040  f0410180          ORR      r1,r1,#0x80
000044  f8c01820          STR      r1,[r0,#0x820]
;;;422            for(i= 0ul; i < 5000ul; i++)
000048  2100              MOVS     r1,#0
00004a  f2413488          MOV      r4,#0x1388
                  |L2.78|
00004e  1c49              ADDS     r1,r1,#1
000050  42a1              CMP      r1,r4
000052  d3fc              BCC      |L2.78|
;;;423            {
;;;424            }
;;;425    
;;;426            if ((sdh->INTSTS & SDH_INTSTS_CDSTS_Msk) == SDH_INTSTS_CDSTS_Msk)   /* Card insert */
000054  f8d0182c          LDR      r1,[r0,#0x82c]
000058  03c9              LSLS     r1,r1,#15
00005a  d501              BPL      |L2.96|
;;;427            {
;;;428                pSD->IsCardInsert = (uint8_t)TRUE;
00005c  7216              STRB     r6,[r2,#8]
00005e  e001              B        |L2.100|
                  |L2.96|
;;;429            }
;;;430            else
;;;431            {
;;;432                pSD->IsCardInsert = (uint8_t)FALSE;
000060  7215              STRB     r5,[r2,#8]
;;;433                val = FALSE;
000062  2300              MOVS     r3,#0
                  |L2.100|
;;;434            }
;;;435    
;;;436            sdh->CTL &= ~SDH_CTL_CLKKEEP_Msk;
000064  f8d01820          LDR      r1,[r0,#0x820]
000068  f0210180          BIC      r1,r1,#0x80
00006c  f8c01820          STR      r1,[r0,#0x820]
                  |L2.112|
;;;437        }
;;;438    
;;;439        return val;
000070  4618              MOV      r0,r3
;;;440    }
000072  bd70              POP      {r4-r6,pc}
;;;441    
                          ENDP

                  |L2.116|
                          DCD      0x4000d000
                  |L2.120|
                          DCD      ||.bss||+0x200

                          AREA ||i.SDH_CheckRB||, CODE, READONLY, ALIGN=1

                  SDH_CheckRB PROC
                  |L3.0|
;;;49     
;;;50     void SDH_CheckRB(SDH_T *sdh)
000000  f8d01820          LDR      r1,[r0,#0x820]
;;;51     {
;;;52         while(1)
;;;53         {
;;;54             sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
000004  f0410140          ORR      r1,r1,#0x40
000008  f8c01820          STR      r1,[r0,#0x820]
                  |L3.12|
;;;55             while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
00000c  f8d01820          LDR      r1,[r0,#0x820]
000010  0649              LSLS     r1,r1,#25
000012  d4fb              BMI      |L3.12|
;;;56             {
;;;57             }
;;;58             if ((sdh->INTSTS & SDH_INTSTS_DAT0STS_Msk) == SDH_INTSTS_DAT0STS_Msk)
000014  f8d0182c          LDR      r1,[r0,#0x82c]
000018  0609              LSLS     r1,r1,#24
00001a  d5f1              BPL      |L3.0|
;;;59             {
;;;60                 break;
;;;61             }
;;;62         }
;;;63     }
00001c  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.SDH_Get_SD_info||, CODE, READONLY, ALIGN=2

                  SDH_Get_SD_info PROC
;;;780    
;;;781    void SDH_Get_SD_info(SDH_T *sdh)
000000  b57f              PUSH     {r0-r6,lr}
;;;782    {
000002  4605              MOV      r5,r0
;;;783        unsigned int R_LEN, C_Size, MULT, size;
;;;784        uint32_t Buffer[4];
;;;785        //unsigned char *ptr;
;;;786        SDH_INFO_T *pSD;
;;;787    
;;;788        if (sdh == SDH0)
000004  4839              LDR      r0,|L4.236|
000006  4285              CMP      r5,r0
000008  d101              BNE      |L4.14|
;;;789        {
;;;790            pSD = &SD0;
00000a  4c39              LDR      r4,|L4.240|
00000c  e001              B        |L4.18|
                  |L4.14|
;;;791        }
;;;792        else
;;;793        {
;;;794            pSD = &SD1;
00000e  4c38              LDR      r4,|L4.240|
000010  3418              ADDS     r4,r4,#0x18
                  |L4.18|
;;;795        }
;;;796    
;;;797        SDH_SDCmdAndRsp2(sdh, 9ul, pSD->RCA, Buffer);
000012  466b              MOV      r3,sp
000014  2109              MOVS     r1,#9
000016  4628              MOV      r0,r5
000018  6862              LDR      r2,[r4,#4]
00001a  f7fffffe          BL       SDH_SDCmdAndRsp2
;;;798    
;;;799        if ((pSD->CardType == SDH_TYPE_MMC) || (pSD->CardType == SDH_TYPE_EMMC))
00001e  6820              LDR      r0,[r4,#0]
000020  2803              CMP      r0,#3
000022  d011              BEQ      |L4.72|
000024  2804              CMP      r0,#4
000026  d00f              BEQ      |L4.72|
;;;800        {
;;;801            /* for MMC/eMMC card */
;;;802            if ((Buffer[0] & 0xc0000000) == 0xc0000000)
;;;803            {
;;;804                /* CSD_STRUCTURE [127:126] is 3 */
;;;805                /* CSD version depend on EXT_CSD register in eMMC v4.4 for card size > 2GB */
;;;806                SDH_SDCmdAndRsp(sdh, 7ul, pSD->RCA, 0ul);
;;;807    
;;;808                //ptr = (uint8_t *)((uint32_t)_SDH_ucSDHCBuffer );
;;;809                sdh->DMASA = (uint32_t)_SDH_ucSDHCBuffer;
;;;810                sdh->BLEN = 511ul;  /* read 512 bytes for EXT_CSD */
;;;811    
;;;812                if (SDH_SDCmdAndRspDataIn(sdh, 8ul, 0x00ul) == Successful)
;;;813                {
;;;814                    SDH_SDCommand(sdh, 7ul, 0ul);
;;;815                    sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
;;;816                    while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
;;;817                    {
;;;818                    }
;;;819    
;;;820                    pSD->totalSectorN = (uint32_t)_SDH_ucSDHCBuffer[215]<<24;
;;;821                    pSD->totalSectorN |= (uint32_t)_SDH_ucSDHCBuffer[214]<<16;
;;;822                    pSD->totalSectorN |= (uint32_t)_SDH_ucSDHCBuffer[213]<<8;
;;;823                    pSD->totalSectorN |= (uint32_t)_SDH_ucSDHCBuffer[212];
;;;824                    pSD->diskSize = pSD->totalSectorN / 2ul;
;;;825                }
;;;826            }
;;;827            else
;;;828            {
;;;829                /* CSD version v1.0/1.1/1.2 in eMMC v4.4 spec for card size <= 2GB */
;;;830                R_LEN = (Buffer[1] & 0x000f0000ul) >> 16;
;;;831                C_Size = ((Buffer[1] & 0x000003fful) << 2) | ((Buffer[2] & 0xc0000000ul) >> 30);
;;;832                MULT = (Buffer[2] & 0x00038000ul) >> 15;
;;;833                size = (C_Size+1ul) * (1ul<<(MULT+2ul)) * (1ul<<R_LEN);
;;;834    
;;;835                pSD->diskSize = size / 1024ul;
;;;836                pSD->totalSectorN = size / 512ul;
;;;837            }
;;;838        }
;;;839        else
;;;840        {
;;;841            if ((Buffer[0] & 0xc0000000) != 0x0ul)
000028  9800              LDR      r0,[sp,#0]
00002a  0f80              LSRS     r0,r0,#30
00002c  d048              BEQ      |L4.192|
;;;842            {
;;;843                C_Size = ((Buffer[1] & 0x0000003ful) << 16) | ((Buffer[2] & 0xffff0000ul) >> 16);
00002e  9801              LDR      r0,[sp,#4]
000030  9902              LDR      r1,[sp,#8]
000032  0680              LSLS     r0,r0,#26
000034  0a80              LSRS     r0,r0,#10
000036  ea404011          ORR      r0,r0,r1,LSR #16
;;;844                size = (C_Size+1ul) * 512ul;    /* Kbytes */
00003a  0240              LSLS     r0,r0,#9
00003c  f5007000          ADD      r0,r0,#0x200
;;;845    
;;;846                pSD->diskSize = size;
;;;847                pSD->totalSectorN = size << 1;
000040  6120              STR      r0,[r4,#0x10]
000042  0040              LSLS     r0,r0,#1
000044  60e0              STR      r0,[r4,#0xc]
000046  e04d              B        |L4.228|
                  |L4.72|
000048  9800              LDR      r0,[sp,#0]            ;802
00004a  2103              MOVS     r1,#3                 ;802
00004c  ebb17f90          CMP      r1,r0,LSR #30         ;802
000050  d136              BNE      |L4.192|
000052  2300              MOVS     r3,#0                 ;806
000054  2107              MOVS     r1,#7                 ;806
000056  4628              MOV      r0,r5                 ;806
000058  6862              LDR      r2,[r4,#4]            ;806
00005a  f7fffffe          BL       SDH_SDCmdAndRsp
00005e  4e25              LDR      r6,|L4.244|
000060  f8c56408          STR      r6,[r5,#0x408]        ;809
000064  f24010ff          MOV      r0,#0x1ff             ;810
000068  f8c50838          STR      r0,[r5,#0x838]        ;810
00006c  2200              MOVS     r2,#0                 ;812
00006e  2108              MOVS     r1,#8                 ;812
000070  4628              MOV      r0,r5                 ;812
000072  f7fffffe          BL       SDH_SDCmdAndRspDataIn
000076  bb10              CBNZ     r0,|L4.190|
000078  2200              MOVS     r2,#0                 ;814
00007a  2107              MOVS     r1,#7                 ;814
00007c  4628              MOV      r0,r5                 ;814
00007e  f7fffffe          BL       SDH_SDCommand
000082  f8d50820          LDR      r0,[r5,#0x820]        ;815
000086  f0400040          ORR      r0,r0,#0x40           ;815
00008a  f8c50820          STR      r0,[r5,#0x820]        ;815
                  |L4.142|
00008e  f8d50820          LDR      r0,[r5,#0x820]        ;816
000092  0640              LSLS     r0,r0,#25             ;816
000094  d4fb              BMI      |L4.142|
000096  f89600d7          LDRB     r0,[r6,#0xd7]         ;820  ; _SDH_ucSDHCBuffer
00009a  0600              LSLS     r0,r0,#24             ;820
00009c  60e0              STR      r0,[r4,#0xc]          ;821
00009e  f89610d6          LDRB     r1,[r6,#0xd6]         ;821  ; _SDH_ucSDHCBuffer
0000a2  ea404001          ORR      r0,r0,r1,LSL #16      ;821
0000a6  60e0              STR      r0,[r4,#0xc]          ;822
0000a8  f89610d5          LDRB     r1,[r6,#0xd5]         ;822  ; _SDH_ucSDHCBuffer
0000ac  ea402001          ORR      r0,r0,r1,LSL #8       ;822
0000b0  60e0              STR      r0,[r4,#0xc]          ;823
0000b2  f89610d4          LDRB     r1,[r6,#0xd4]         ;823  ; _SDH_ucSDHCBuffer
0000b6  4308              ORRS     r0,r0,r1              ;823
0000b8  60e0              STR      r0,[r4,#0xc]          ;824
0000ba  0840              LSRS     r0,r0,#1              ;824
0000bc  6120              STR      r0,[r4,#0x10]         ;824
                  |L4.190|
0000be  e011              B        |L4.228|
                  |L4.192|
;;;848            }
;;;849            else
;;;850            {
;;;851                R_LEN = (Buffer[1] & 0x000f0000ul) >> 16;
0000c0  9801              LDR      r0,[sp,#4]
;;;852                C_Size = ((Buffer[1] & 0x000003fful) << 2) | ((Buffer[2] & 0xc0000000ul) >> 30);
0000c2  9902              LDR      r1,[sp,#8]
0000c4  f3c04203          UBFX     r2,r0,#16,#4          ;851
0000c8  0580              LSLS     r0,r0,#22
0000ca  0d00              LSRS     r0,r0,#20
0000cc  ea407091          ORR      r0,r0,r1,LSR #30
;;;853                MULT = (Buffer[2] & 0x00038000ul) >> 15;
0000d0  f3c131c2          UBFX     r1,r1,#15,#3
0000d4  1c40              ADDS     r0,r0,#1
0000d6  1c89              ADDS     r1,r1,#2
;;;854                size = (C_Size+1ul) * (1ul<<(MULT+2ul)) * (1ul<<R_LEN);
0000d8  4088              LSLS     r0,r0,r1
0000da  4090              LSLS     r0,r0,r2
;;;855    
;;;856                pSD->diskSize = size / 1024ul;
0000dc  0a81              LSRS     r1,r0,#10
;;;857                pSD->totalSectorN = size / 512ul;
0000de  0a40              LSRS     r0,r0,#9
0000e0  e9c40103          STRD     r0,r1,[r4,#0xc]
                  |L4.228|
;;;858            }
;;;859        }
;;;860        pSD->sectorSize = (int)512;
0000e4  f44f7000          MOV      r0,#0x200
0000e8  6160              STR      r0,[r4,#0x14]
;;;861    }
0000ea  bd7f              POP      {r0-r6,pc}
;;;862    
                          ENDP

                  |L4.236|
                          DCD      0x4000d000
                  |L4.240|
                          DCD      ||.bss||+0x200
                  |L4.244|
                          DCD      ||.bss||

                          AREA ||i.SDH_Init||, CODE, READONLY, ALIGN=2

                  SDH_Init PROC
;;;441    
;;;442    uint32_t SDH_Init(SDH_T *sdh)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;443    {
000004  4604              MOV      r4,r0
;;;444        uint32_t volatile i, status;
;;;445        uint32_t resp;
;;;446        uint32_t CIDBuffer[4];
;;;447        uint32_t volatile u32CmdTimeOut;
;;;448        SDH_INFO_T *pSD;
;;;449    
;;;450        if (sdh == SDH0)
000006  486f              LDR      r0,|L5.452|
000008  b087              SUB      sp,sp,#0x1c           ;443
00000a  4284              CMP      r4,r0
00000c  d101              BNE      |L5.18|
;;;451        {
;;;452            pSD = &SD0;
00000e  4d6e              LDR      r5,|L5.456|
000010  e001              B        |L5.22|
                  |L5.18|
;;;453        }
;;;454        else
;;;455        {
;;;456            pSD = &SD1;
000012  4d6d              LDR      r5,|L5.456|
000014  3518              ADDS     r5,r5,#0x18
                  |L5.22|
;;;457        }
;;;458    
;;;459        /* set the clock to 300KHz */
;;;460        SDH_Set_clock(sdh, 300ul);
000016  f44f7196          MOV      r1,#0x12c
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SDH_Set_clock
;;;461    
;;;462        /* power ON 74 clock */
;;;463        sdh->CTL |= SDH_CTL_CLK74OEN_Msk;
000020  f8d40820          LDR      r0,[r4,#0x820]
000024  f0400020          ORR      r0,r0,#0x20
000028  f8c40820          STR      r0,[r4,#0x820]
;;;464    
;;;465        while ((sdh->CTL & SDH_CTL_CLK74OEN_Msk) == SDH_CTL_CLK74OEN_Msk)
00002c  e001              B        |L5.50|
                  |L5.46|
;;;466        {
;;;467            if (pSD->IsCardInsert == FALSE)
00002e  7a28              LDRB     r0,[r5,#8]
000030  b3f0              CBZ      r0,|L5.176|
                  |L5.50|
000032  f8d40820          LDR      r0,[r4,#0x820]        ;465
000036  0680              LSLS     r0,r0,#26             ;465
000038  d4f9              BMI      |L5.46|
;;;468            {
;;;469                return SDH_NO_SD_CARD;
;;;470            }
;;;471        }
;;;472    
;;;473        SDH_SDCommand(sdh, 0ul, 0ul);        /* reset all cards */
00003a  2200              MOVS     r2,#0
00003c  4611              MOV      r1,r2
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       SDH_SDCommand
;;;474        for (i=0x1000ul; i>0ul; i--)
000044  f44f5080          MOV      r0,#0x1000
000048  9000              STR      r0,[sp,#0]
                  |L5.74|
00004a  1e40              SUBS     r0,r0,#1
00004c  9000              STR      r0,[sp,#0]
00004e  d1fc              BNE      |L5.74|
;;;475        {
;;;476        }
;;;477    
;;;478        /* initial SDHC */
;;;479        _SDH_uR7_CMD = 1ul;
000050  4f5e              LDR      r7,|L5.460|
000052  2601              MOVS     r6,#1
;;;480        u32CmdTimeOut = 0xFFFFFul;
000054  4b5e              LDR      r3,|L5.464|
000056  607e              STR      r6,[r7,#4]  ; _SDH_uR7_CMD
;;;481    
;;;482        i = SDH_SDCmdAndRsp(sdh, 8ul, 0x00000155ul, u32CmdTimeOut);
000058  f2401255          MOV      r2,#0x155
00005c  2108              MOVS     r1,#8
00005e  4620              MOV      r0,r4
000060  9301              STR      r3,[sp,#4]
000062  f7fffffe          BL       SDH_SDCmdAndRsp
;;;483        if (i == Successful)
;;;484        {
;;;485            /* SD 2.0 */
;;;486            SDH_SDCmdAndRsp(sdh, 55ul, 0x00ul, u32CmdTimeOut);
;;;487            g_u8R3Flag = 1ul;
;;;488            SDH_SDCmdAndRsp(sdh, 41ul, 0x40ff8000ul, u32CmdTimeOut); /* 2.7v-3.6v */
000066  f8df916c          LDR      r9,|L5.468|
;;;489            resp = sdh->RESP0;
;;;490    
;;;491            while ((resp & 0x00800000ul) != 0x00800000ul)        /* check if card is ready */
;;;492            {
;;;493                SDH_SDCmdAndRsp(sdh, 55ul, 0x00ul, u32CmdTimeOut);
;;;494                g_u8R3Flag = 1ul;
;;;495                SDH_SDCmdAndRsp(sdh, 41ul, 0x40ff8000ul, u32CmdTimeOut); /* 3.0v-3.4v */
;;;496                resp = sdh->RESP0;
;;;497            }
;;;498            if ((resp & 0x00400000ul) == 0x00400000ul)
;;;499            {
;;;500                pSD->CardType = SDH_TYPE_SD_HIGH;
;;;501            }
;;;502            else
;;;503            {
;;;504                pSD->CardType = SDH_TYPE_SD_LOW;
00006a  f04f0b02          MOV      r11,#2
00006e  9000              STR      r0,[sp,#0]            ;483
000070  b320              CBZ      r0,|L5.188|
;;;505            }
;;;506        }
;;;507        else
;;;508        {
;;;509            /* SD 1.1 */
;;;510            SDH_SDCommand(sdh, 0ul, 0ul);        /* reset all cards */
000072  2200              MOVS     r2,#0
000074  4611              MOV      r1,r2
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       SDH_SDCommand
;;;511            for (i=0x100ul; i>0ul; i--)
00007c  f44f7880          MOV      r8,#0x100
000080  4640              MOV      r0,r8
000082  f8cd8000          STR      r8,[sp,#0]
                  |L5.134|
000086  1e40              SUBS     r0,r0,#1
000088  9000              STR      r0,[sp,#0]
00008a  d1fc              BNE      |L5.134|
;;;512            {
;;;513            }
;;;514    
;;;515            i = SDH_SDCmdAndRsp(sdh, 55ul, 0x00ul, u32CmdTimeOut);
00008c  2200              MOVS     r2,#0
00008e  2137              MOVS     r1,#0x37
000090  4620              MOV      r0,r4
000092  9b01              LDR      r3,[sp,#4]
000094  f7fffffe          BL       SDH_SDCmdAndRsp
000098  f04f0a00          MOV      r10,#0
;;;516            if (i == 2ul)     /* MMC memory */
00009c  9000              STR      r0,[sp,#0]
00009e  2802              CMP      r0,#2
0000a0  d024              BEQ      |L5.236|
;;;517            {
;;;518    
;;;519                SDH_SDCommand(sdh, 0ul, 0ul);        /* reset */
;;;520                for (i=0x100ul; i>0ul; i--)
;;;521                {
;;;522                }
;;;523    
;;;524                g_u8R3Flag = 1ul;
;;;525    
;;;526                if (SDH_SDCmdAndRsp(sdh, 1ul, 0x40ff8000ul, u32CmdTimeOut) != 2ul)    /* eMMC memory */
;;;527                {
;;;528                    resp = sdh->RESP0;
;;;529                    while ((resp & 0x00800000ul) != 0x00800000ul)
;;;530                    {
;;;531                        /* check if card is ready */
;;;532                        g_u8R3Flag = 1ul;
;;;533    
;;;534                        SDH_SDCmdAndRsp(sdh, 1ul, 0x40ff8000ul, u32CmdTimeOut);      /* high voltage */
;;;535                        resp = sdh->RESP0;
;;;536                    }
;;;537    
;;;538                    if ((resp & 0x00400000ul) == 0x00400000ul)
;;;539                    {
;;;540                        pSD->CardType = SDH_TYPE_EMMC;
;;;541                    }
;;;542                    else
;;;543                    {
;;;544                        pSD->CardType = SDH_TYPE_MMC;
;;;545                    }
;;;546                }
;;;547                else
;;;548                {
;;;549                    pSD->CardType = SDH_TYPE_UNKNOWN;
;;;550                    return SDH_ERR_DEVICE;
;;;551                }
;;;552            }
;;;553            else if (i == 0ul)     /* SD Memory */
0000a2  2800              CMP      r0,#0
0000a4  d069              BEQ      |L5.378|
;;;554            {
;;;555                g_u8R3Flag = 1ul;
;;;556                SDH_SDCmdAndRsp(sdh, 41ul, 0x00ff8000ul, u32CmdTimeOut); /* 3.0v-3.4v */
;;;557                resp = sdh->RESP0;
;;;558                while ((resp & 0x00800000ul) != 0x00800000ul)        /* check if card is ready */
;;;559                {
;;;560                    SDH_SDCmdAndRsp(sdh, 55ul, 0x00ul, u32CmdTimeOut);
;;;561                    g_u8R3Flag = 1ul;
;;;562                    SDH_SDCmdAndRsp(sdh, 41ul, 0x00ff8000ul, u32CmdTimeOut); /* 3.0v-3.4v */
;;;563                    resp = sdh->RESP0;
;;;564                }
;;;565                pSD->CardType = SDH_TYPE_SD_LOW;
;;;566            }
;;;567            else
;;;568            {
;;;569                pSD->CardType = SDH_TYPE_UNKNOWN;
;;;570                return SDH_INIT_ERROR;
0000a6  484c              LDR      r0,|L5.472|
0000a8  f8c5a000          STR      r10,[r5,#0]
                  |L5.172|
;;;571            }
;;;572        }
;;;573    
;;;574        if (pSD->CardType != SDH_TYPE_UNKNOWN)
;;;575        {
;;;576            SDH_SDCmdAndRsp2(sdh, 2ul, 0x00ul, CIDBuffer);
;;;577            if ((pSD->CardType == SDH_TYPE_MMC) || (pSD->CardType == SDH_TYPE_EMMC))
;;;578            {
;;;579                if ((status = SDH_SDCmdAndRsp(sdh, 3ul, 0x10000ul, 0ul)) != Successful)     /* set RCA */
;;;580                {
;;;581                    return status;
;;;582                }
;;;583                pSD->RCA = 0x10000ul;
;;;584            }
;;;585            else
;;;586            {
;;;587                if ((status = SDH_SDCmdAndRsp(sdh, 3ul, 0x00ul, 0ul)) != Successful)       /* get RCA */
;;;588                {
;;;589                    return status;
;;;590                }
;;;591                else
;;;592                {
;;;593                    pSD->RCA = (sdh->RESP0 << 8) & 0xffff0000;
;;;594                }
;;;595            }
;;;596        }
;;;597        return Successful;
;;;598    }
0000ac  b007              ADD      sp,sp,#0x1c
0000ae  e000              B        |L5.178|
                  |L5.176|
0000b0  e001              B        |L5.182|
                  |L5.178|
0000b2  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.182|
0000b6  4848              LDR      r0,|L5.472|
0000b8  1f40              SUBS     r0,r0,#5              ;469
0000ba  e7f7              B        |L5.172|
                  |L5.188|
0000bc  2200              MOVS     r2,#0                 ;486
0000be  2137              MOVS     r1,#0x37              ;486
0000c0  4620              MOV      r0,r4                 ;486
0000c2  9b01              LDR      r3,[sp,#4]            ;486
0000c4  f7fffffe          BL       SDH_SDCmdAndRsp
0000c8  703e              STRB     r6,[r7,#0]            ;487
0000ca  464a              MOV      r2,r9                 ;488
0000cc  2129              MOVS     r1,#0x29              ;488
0000ce  4620              MOV      r0,r4                 ;488
0000d0  9b01              LDR      r3,[sp,#4]            ;488
0000d2  f7fffffe          BL       SDH_SDCmdAndRsp
0000d6  f8d40830          LDR      r0,[r4,#0x830]        ;489
0000da  0201              LSLS     r1,r0,#8              ;491
0000dc  d5ee              BPL      |L5.188|
0000de  0240              LSLS     r0,r0,#9              ;498
0000e0  d501              BPL      |L5.230|
0000e2  602e              STR      r6,[r5,#0]            ;500
0000e4  e028              B        |L5.312|
                  |L5.230|
0000e6  f8c5b000          STR      r11,[r5,#0]           ;504
0000ea  e025              B        |L5.312|
                  |L5.236|
0000ec  2200              MOVS     r2,#0                 ;519
0000ee  4611              MOV      r1,r2                 ;519
0000f0  4620              MOV      r0,r4                 ;519
0000f2  f7fffffe          BL       SDH_SDCommand
0000f6  4640              MOV      r0,r8                 ;520
0000f8  f8cd8000          STR      r8,[sp,#0]            ;520
                  |L5.252|
0000fc  1e40              SUBS     r0,r0,#1              ;520
0000fe  9000              STR      r0,[sp,#0]            ;520
000100  d1fc              BNE      |L5.252|
000102  703e              STRB     r6,[r7,#0]            ;524
000104  464a              MOV      r2,r9                 ;526
000106  2101              MOVS     r1,#1                 ;526
000108  4620              MOV      r0,r4                 ;526
00010a  9b01              LDR      r3,[sp,#4]            ;526
00010c  f7fffffe          BL       SDH_SDCmdAndRsp
000110  2802              CMP      r0,#2                 ;526
000112  d02d              BEQ      |L5.368|
                  |L5.276|
000114  f8d40830          LDR      r0,[r4,#0x830]        ;528
000118  0201              LSLS     r1,r0,#8              ;529
00011a  d407              BMI      |L5.300|
00011c  703e              STRB     r6,[r7,#0]            ;532
00011e  464a              MOV      r2,r9                 ;534
000120  2101              MOVS     r1,#1                 ;534
000122  4620              MOV      r0,r4                 ;534
000124  9b01              LDR      r3,[sp,#4]            ;534
000126  f7fffffe          BL       SDH_SDCmdAndRsp
00012a  e7f3              B        |L5.276|
                  |L5.300|
00012c  0240              LSLS     r0,r0,#9              ;538
00012e  d501              BPL      |L5.308|
000130  2004              MOVS     r0,#4                 ;540
000132  e000              B        |L5.310|
                  |L5.308|
000134  2003              MOVS     r0,#3                 ;544
                  |L5.310|
000136  6028              STR      r0,[r5,#0]            ;540
                  |L5.312|
000138  ab02              ADD      r3,sp,#8              ;576
00013a  2200              MOVS     r2,#0                 ;576
00013c  2102              MOVS     r1,#2                 ;576
00013e  4620              MOV      r0,r4                 ;576
000140  f7fffffe          BL       SDH_SDCmdAndRsp2
000144  6828              LDR      r0,[r5,#0]            ;577
000146  2803              CMP      r0,#3                 ;577
000148  d02e              BEQ      |L5.424|
00014a  2804              CMP      r0,#4                 ;577
00014c  d02c              BEQ      |L5.424|
00014e  2300              MOVS     r3,#0                 ;587
000150  461a              MOV      r2,r3                 ;587
000152  2103              MOVS     r1,#3                 ;587
000154  4620              MOV      r0,r4                 ;587
000156  f7fffffe          BL       SDH_SDCmdAndRsp
00015a  9000              STR      r0,[sp,#0]            ;587
00015c  2800              CMP      r0,#0                 ;587
00015e  d1a5              BNE      |L5.172|
000160  f8d40830          LDR      r0,[r4,#0x830]        ;593
000164  491d              LDR      r1,|L5.476|
000166  ea012000          AND      r0,r1,r0,LSL #8       ;593
00016a  6068              STR      r0,[r5,#4]            ;593
                  |L5.364|
00016c  2000              MOVS     r0,#0                 ;597
                  |L5.366|
00016e  e79d              B        |L5.172|
                  |L5.368|
000170  4819              LDR      r0,|L5.472|
000172  f8c5a000          STR      r10,[r5,#0]           ;550
000176  1f00              SUBS     r0,r0,#4              ;550
000178  e798              B        |L5.172|
                  |L5.378|
00017a  703e              STRB     r6,[r7,#0]            ;555
00017c  f8df8060          LDR      r8,|L5.480|
000180  9b01              LDR      r3,[sp,#4]            ;558
000182  e007              B        |L5.404|
                  |L5.388|
000184  2200              MOVS     r2,#0                 ;560
000186  2137              MOVS     r1,#0x37              ;560
000188  4620              MOV      r0,r4                 ;560
00018a  9b01              LDR      r3,[sp,#4]            ;560
00018c  f7fffffe          BL       SDH_SDCmdAndRsp
000190  703e              STRB     r6,[r7,#0]            ;561
000192  9b01              LDR      r3,[sp,#4]            ;562
                  |L5.404|
000194  4642              MOV      r2,r8                 ;556
000196  2129              MOVS     r1,#0x29              ;556
000198  4620              MOV      r0,r4                 ;556
00019a  f7fffffe          BL       SDH_SDCmdAndRsp
00019e  f8d40830          LDR      r0,[r4,#0x830]        ;557
0001a2  0200              LSLS     r0,r0,#8              ;558
0001a4  d5ee              BPL      |L5.388|
0001a6  e79e              B        |L5.230|
                  |L5.424|
0001a8  f44f3680          MOV      r6,#0x10000           ;579
0001ac  2300              MOVS     r3,#0                 ;579
0001ae  4632              MOV      r2,r6                 ;579
0001b0  2103              MOVS     r1,#3                 ;579
0001b2  4620              MOV      r0,r4                 ;579
0001b4  f7fffffe          BL       SDH_SDCmdAndRsp
0001b8  9000              STR      r0,[sp,#0]            ;579
0001ba  2800              CMP      r0,#0                 ;579
0001bc  d1d7              BNE      |L5.366|
0001be  606e              STR      r6,[r5,#4]            ;583
0001c0  e7d4              B        |L5.364|
;;;599    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L5.452|
                          DCD      0x4000d000
                  |L5.456|
                          DCD      ||.bss||+0x200
                  |L5.460|
                          DCD      ||.data||
                  |L5.464|
                          DCD      0x000fffff
                  |L5.468|
                          DCD      0x40ff8000
                  |L5.472|
                          DCD      0xffff0115
                  |L5.476|
                          DCD      0xffff0000
                  |L5.480|
                          DCD      0x00ff8000

                          AREA ||i.SDH_Open||, CODE, READONLY, ALIGN=2

                  SDH_Open PROC
;;;873     */
;;;874    void SDH_Open(SDH_T *sdh, uint32_t u32CardDetSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;875    {
;;;876        sdh->DMACTL = SDH_DMACTL_DMARST_Msk;
000002  2502              MOVS     r5,#2
000004  460e              MOV      r6,r1                 ;875
000006  4604              MOV      r4,r0                 ;875
000008  f8c05400          STR      r5,[r0,#0x400]
                  |L6.12|
;;;877        while ((sdh->DMACTL & SDH_DMACTL_DMARST_Msk) == SDH_DMACTL_DMARST_Msk)
00000c  f8d40400          LDR      r0,[r4,#0x400]
000010  0780              LSLS     r0,r0,#30
000012  d4fb              BMI      |L6.12|
;;;878        {
;;;879        }
;;;880    
;;;881        sdh->DMACTL = SDH_DMACTL_DMAEN_Msk;
000014  2001              MOVS     r0,#1
000016  f8c40400          STR      r0,[r4,#0x400]
;;;882    
;;;883        sdh->GCTL = SDH_GCTL_GCTLRST_Msk | SDH_GCTL_SDEN_Msk;
00001a  2003              MOVS     r0,#3
00001c  f8c40800          STR      r0,[r4,#0x800]
                  |L6.32|
;;;884        while ((sdh->GCTL & SDH_GCTL_GCTLRST_Msk) == SDH_GCTL_GCTLRST_Msk)
000020  f8d40800          LDR      r0,[r4,#0x800]
000024  07c0              LSLS     r0,r0,#31
000026  d1fb              BNE      |L6.32|
;;;885        {
;;;886        }
;;;887    
;;;888        if (sdh == SDH0)
000028  4818              LDR      r0,|L6.140|
00002a  4284              CMP      r4,r0
00002c  d105              BNE      |L6.58|
;;;889        {
;;;890            NVIC_EnableIRQ(SDH0_IRQn);
00002e  2040              MOVS     r0,#0x40
000030  f7fffffe          BL       NVIC_EnableIRQ
;;;891            memset(&SD0, 0, sizeof(SDH_INFO_T));
000034  2118              MOVS     r1,#0x18
000036  4816              LDR      r0,|L6.144|
000038  e008              B        |L6.76|
                  |L6.58|
;;;892        }
;;;893        else if (sdh == SDH1)
00003a  4816              LDR      r0,|L6.148|
00003c  4284              CMP      r4,r0
00003e  d107              BNE      |L6.80|
;;;894        {
;;;895            NVIC_EnableIRQ(SDH1_IRQn);
000040  205a              MOVS     r0,#0x5a
000042  f7fffffe          BL       NVIC_EnableIRQ
;;;896            memset(&SD1, 0, sizeof(SDH_INFO_T));
000046  4812              LDR      r0,|L6.144|
000048  2118              MOVS     r1,#0x18
00004a  3018              ADDS     r0,r0,#0x18
                  |L6.76|
00004c  f7fffffe          BL       __aeabi_memclr4
                  |L6.80|
;;;897        }
;;;898        else
;;;899        {
;;;900        }
;;;901    
;;;902        sdh->GCTL = SDH_GCTL_SDEN_Msk;
000050  f8c45800          STR      r5,[r4,#0x800]
;;;903    
;;;904        if ((u32CardDetSrc & CardDetect_From_DAT3) == CardDetect_From_DAT3)
000054  05b0              LSLS     r0,r6,#22
;;;905        {
;;;906            sdh->INTEN &= ~SDH_INTEN_CDSRC_Msk;
;;;907        }
;;;908        else
;;;909        {
;;;910            sdh->INTEN |= SDH_INTEN_CDSRC_Msk;
000056  f8d40828          LDR      r0,[r4,#0x828]
00005a  d502              BPL      |L6.98|
00005c  f0204080          BIC      r0,r0,#0x40000000     ;906
000060  e001              B        |L6.102|
                  |L6.98|
000062  f0404080          ORR      r0,r0,#0x40000000
                  |L6.102|
000066  f8c40828          STR      r0,[r4,#0x828]
;;;911        }
;;;912        sdh->INTEN |= SDH_INTEN_CDIEN_Msk;
00006a  f8d40828          LDR      r0,[r4,#0x828]
00006e  f4407080          ORR      r0,r0,#0x100
000072  f8c40828          STR      r0,[r4,#0x828]
;;;913    
;;;914        sdh->CTL |= SDH_CTL_CTLRST_Msk;
000076  f8d40820          LDR      r0,[r4,#0x820]
00007a  f4404080          ORR      r0,r0,#0x4000
00007e  f8c40820          STR      r0,[r4,#0x820]
                  |L6.130|
;;;915        while ((sdh->CTL & SDH_CTL_CTLRST_Msk) == SDH_CTL_CTLRST_Msk)
000082  f8d40820          LDR      r0,[r4,#0x820]
000086  0440              LSLS     r0,r0,#17
000088  d4fb              BMI      |L6.130|
;;;916        {
;;;917        }
;;;918    }
00008a  bd70              POP      {r4-r6,pc}
;;;919    
                          ENDP

                  |L6.140|
                          DCD      0x4000d000
                  |L6.144|
                          DCD      ||.bss||+0x200
                  |L6.148|
                          DCD      0x4000e000

                          AREA ||i.SDH_Probe||, CODE, READONLY, ALIGN=2

                  SDH_Probe PROC
;;;930     */
;;;931    uint32_t SDH_Probe(SDH_T *sdh)
000000  b510              PUSH     {r4,lr}
;;;932    {
000002  4604              MOV      r4,r0
;;;933        uint32_t val;
;;;934    
;;;935        sdh->GINTEN = 0ul;
000004  2000              MOVS     r0,#0
000006  f8c40804          STR      r0,[r4,#0x804]
;;;936        sdh->CTL &= ~SDH_CTL_SDNWR_Msk;
00000a  f8d40820          LDR      r0,[r4,#0x820]
00000e  f0206070          BIC      r0,r0,#0xf000000
000012  f8c40820          STR      r0,[r4,#0x820]
;;;937        sdh->CTL |=  0x09ul << SDH_CTL_SDNWR_Pos;   /* set SDNWR = 9 */
000016  f8d40820          LDR      r0,[r4,#0x820]
00001a  f0406010          ORR      r0,r0,#0x9000000
00001e  f8c40820          STR      r0,[r4,#0x820]
;;;938        sdh->CTL &= ~SDH_CTL_BLKCNT_Msk;
000022  f8d40820          LDR      r0,[r4,#0x820]
000026  f420007f          BIC      r0,r0,#0xff0000
00002a  f8c40820          STR      r0,[r4,#0x820]
;;;939        sdh->CTL |=  0x01ul << SDH_CTL_BLKCNT_Pos;  /* set BLKCNT = 1 */
00002e  f8d40820          LDR      r0,[r4,#0x820]
000032  f4403080          ORR      r0,r0,#0x10000
000036  f8c40820          STR      r0,[r4,#0x820]
;;;940        sdh->CTL &= ~SDH_CTL_DBW_Msk;               /* SD 1-bit data bus */
00003a  f8d40820          LDR      r0,[r4,#0x820]
00003e  f4204000          BIC      r0,r0,#0x8000
000042  f8c40820          STR      r0,[r4,#0x820]
;;;941    
;;;942        if(!(SDH_CardDetection(sdh)))
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       SDH_CardDetection
00004c  b1f8              CBZ      r0,|L7.142|
;;;943        {
;;;944            return SDH_NO_SD_CARD;
;;;945        }
;;;946    
;;;947        if ((val = SDH_Init(sdh)) != 0ul)
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       SDH_Init
000054  2800              CMP      r0,#0
000056  d119              BNE      |L7.140|
;;;948        {
;;;949            return val;
;;;950        }
;;;951    
;;;952        /* divider */
;;;953        if ((SD0.CardType == SDH_TYPE_MMC) || (SD1.CardType == SDH_TYPE_MMC))
000058  480f              LDR      r0,|L7.152|
00005a  6800              LDR      r0,[r0,#0]  ; SD0
00005c  2803              CMP      r0,#3
00005e  d018              BEQ      |L7.146|
000060  480d              LDR      r0,|L7.152|
000062  3018              ADDS     r0,r0,#0x18
000064  6800              LDR      r0,[r0,#0]  ; SD1
000066  2803              CMP      r0,#3
000068  d013              BEQ      |L7.146|
;;;954        {
;;;955            SDH_Set_clock(sdh, MMC_FREQ);
;;;956        }
;;;957        else
;;;958        {
;;;959            SDH_Set_clock(sdh, SD_FREQ);
00006a  f24611a8          MOV      r1,#0x61a8
                  |L7.110|
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       SDH_Set_clock
;;;960        }
;;;961        SDH_Get_SD_info(sdh);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       SDH_Get_SD_info
;;;962    
;;;963        if ((val = SDH_SelectCardType(sdh)) != 0ul)
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       SDH_SelectCardType
000080  2800              CMP      r0,#0
000082  d103              BNE      |L7.140|
;;;964        {
;;;965            return val;
;;;966        }
;;;967    
;;;968        SDH_ok = 1;
000084  4905              LDR      r1,|L7.156|
000086  2001              MOVS     r0,#1
;;;969        return 0ul;
000088  6088              STR      r0,[r1,#8]  ; SDH_ok
00008a  2000              MOVS     r0,#0
                  |L7.140|
;;;970    }
00008c  bd10              POP      {r4,pc}
                  |L7.142|
00008e  4804              LDR      r0,|L7.160|
000090  bd10              POP      {r4,pc}
                  |L7.146|
000092  f6446120          MOV      r1,#0x4e20            ;955
000096  e7ea              B        |L7.110|
;;;971    
                          ENDP

                  |L7.152|
                          DCD      ||.bss||+0x200
                  |L7.156|
                          DCD      ||.data||
                  |L7.160|
                          DCD      0xffff0110

                          AREA ||i.SDH_Read||, CODE, READONLY, ALIGN=2

                  SDH_Read PROC
;;;981     */
;;;982    uint32_t SDH_Read(SDH_T *sdh, uint8_t *pu8BufAddr, uint32_t u32StartSec, uint32_t u32SecCount)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;983    {
000004  4604              MOV      r4,r0
;;;984        uint32_t volatile bIsSendCmd = FALSE, buf;
;;;985        uint32_t volatile reg;
;;;986        uint32_t volatile i, loop, status;
;;;987        uint32_t blksize = SDH_BLOCK_SIZE;
;;;988    
;;;989        SDH_INFO_T *pSD;
;;;990        if (sdh == SDH0)
000006  4867              LDR      r0,|L8.420|
000008  f04f0800          MOV      r8,#0                 ;984
00000c  461e              MOV      r6,r3                 ;983
00000e  4617              MOV      r7,r2                 ;983
000010  4689              MOV      r9,r1                 ;983
000012  f8cd8008          STR      r8,[sp,#8]
000016  4284              CMP      r4,r0
000018  d101              BNE      |L8.30|
;;;991        {
;;;992            pSD = &SD0;
00001a  4d63              LDR      r5,|L8.424|
00001c  e001              B        |L8.34|
                  |L8.30|
;;;993        }
;;;994        else
;;;995        {
;;;996            pSD = &SD1;
00001e  4d62              LDR      r5,|L8.424|
000020  3518              ADDS     r5,r5,#0x18
                  |L8.34|
;;;997        }
;;;998    
;;;999        if (u32SecCount == 0ul)
000022  b366              CBZ      r6,|L8.126|
;;;1000       {
;;;1001           return SDH_SELECT_ERROR;
;;;1002       }
;;;1003   
;;;1004       if ((status = SDH_SDCmdAndRsp(sdh, 7ul, pSD->RCA, 0ul)) != Successful)
000024  2300              MOVS     r3,#0
000026  2107              MOVS     r1,#7
000028  4620              MOV      r0,r4
00002a  686a              LDR      r2,[r5,#4]
00002c  f7fffffe          BL       SDH_SDCmdAndRsp
000030  9000              STR      r0,[sp,#0]
000032  2800              CMP      r0,#0
000034  d125              BNE      |L8.130|
;;;1005       {
;;;1006           return status;
;;;1007       }
;;;1008       SDH_CheckRB(sdh);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       SDH_CheckRB
;;;1009   
;;;1010       sdh->BLEN = blksize - 1ul;       /* the actual byte count is equal to (SDBLEN+1) */
00003c  f24010ff          MOV      r0,#0x1ff
000040  f8c40838          STR      r0,[r4,#0x838]
;;;1011   
;;;1012       if ( (pSD->CardType == SDH_TYPE_SD_HIGH) || (pSD->CardType == SDH_TYPE_EMMC) )
000044  6828              LDR      r0,[r5,#0]
000046  2801              CMP      r0,#1
000048  d01e              BEQ      |L8.136|
00004a  2804              CMP      r0,#4
00004c  d01c              BEQ      |L8.136|
;;;1013       {
;;;1014           sdh->CMDARG = u32StartSec;
;;;1015       }
;;;1016       else
;;;1017       {
;;;1018           sdh->CMDARG = u32StartSec * blksize;
00004e  0278              LSLS     r0,r7,#9
000050  f8c40824          STR      r0,[r4,#0x824]
                  |L8.84|
;;;1019       }
;;;1020   
;;;1021       sdh->DMASA = (uint32_t)pu8BufAddr;
000054  f8c49408          STR      r9,[r4,#0x408]
;;;1022   
;;;1023       loop = u32SecCount / 255ul;
000058  27ff              MOVS     r7,#0xff
00005a  fbb6f0f7          UDIV     r0,r6,r7
;;;1024       for (i=0ul; i<loop; i++)
;;;1025       {
;;;1026           g_u8SDDataReadyFlag = (uint8_t)FALSE;
;;;1027           reg = sdh->CTL & ~SDH_CTL_CMDCODE_Msk;
;;;1028           reg = reg | 0xff0000ul;   /* set BLK_CNT to 255 */
;;;1029           if (bIsSendCmd == FALSE)
;;;1030           {
;;;1031               sdh->CTL = reg|(18ul << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk);
;;;1032               bIsSendCmd = TRUE;
;;;1033           }
;;;1034           else
;;;1035           {
;;;1036               sdh->CTL = reg | SDH_CTL_DIEN_Msk;
;;;1037           }
;;;1038   
;;;1039           while(!g_u8SDDataReadyFlag)
;;;1040           {
;;;1041               if(g_u8SDDataReadyFlag)
;;;1042               {
;;;1043                   break;
;;;1044               }
;;;1045               if (pSD->IsCardInsert == FALSE)
;;;1046               {
;;;1047                   return SDH_NO_SD_CARD;
00005e  f8df914c          LDR      r9,|L8.428|
000062  4641              MOV      r1,r8                 ;1024
000064  9001              STR      r0,[sp,#4]            ;1026
;;;1048               }
;;;1049           }
;;;1050   
;;;1051           if ((sdh->INTSTS & SDH_INTSTS_CRC7_Msk) != SDH_INTSTS_CRC7_Msk)      /* check CRC7 */
;;;1052           {
;;;1053               return SDH_CRC7_ERROR;
000066  f1090b06          ADD      r11,r9,#6
;;;1054           }
;;;1055   
;;;1056           if ((sdh->INTSTS & SDH_INTSTS_CRC16_Msk) != SDH_INTSTS_CRC16_Msk)     /* check CRC16 */
;;;1057           {
;;;1058               return SDH_CRC16_ERROR;
00006a  f1090a07          ADD      r10,r9,#7
00006e  2201              MOVS     r2,#1                 ;1012
000070  f2412307          MOV      r3,#0x1207            ;1031
000074  f8cd800c          STR      r8,[sp,#0xc]          ;1026
000078  484d              LDR      r0,|L8.432|
00007a  468c              MOV      r12,r1                ;1024
00007c  e041              B        |L8.258|
                  |L8.126|
00007e  484b              LDR      r0,|L8.428|
000080  1cc0              ADDS     r0,r0,#3              ;1001
                  |L8.130|
;;;1059           }
;;;1060       }
;;;1061   
;;;1062       loop = u32SecCount % 255ul;
;;;1063       if (loop != 0ul)
;;;1064       {
;;;1065           g_u8SDDataReadyFlag = (uint8_t)FALSE;
;;;1066           reg = sdh->CTL & (~SDH_CTL_CMDCODE_Msk);
;;;1067           reg = reg & (~SDH_CTL_BLKCNT_Msk);
;;;1068           reg |= (loop << 16);    /* setup SDCR_BLKCNT */
;;;1069   
;;;1070           if (bIsSendCmd == FALSE)
;;;1071           {
;;;1072               sdh->CTL = reg|(18ul << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk);
;;;1073               bIsSendCmd = TRUE;
;;;1074           }
;;;1075           else
;;;1076           {
;;;1077               sdh->CTL = reg | SDH_CTL_DIEN_Msk;
;;;1078           }
;;;1079   
;;;1080           while(!g_u8SDDataReadyFlag)
;;;1081           {
;;;1082               if (pSD->IsCardInsert == FALSE)
;;;1083               {
;;;1084                   return SDH_NO_SD_CARD;
;;;1085               }
;;;1086           }
;;;1087   
;;;1088           if ((sdh->INTSTS & SDH_INTSTS_CRC7_Msk) != SDH_INTSTS_CRC7_Msk)      /* check CRC7 */
;;;1089           {
;;;1090               return SDH_CRC7_ERROR;
;;;1091           }
;;;1092   
;;;1093           if ((sdh->INTSTS & SDH_INTSTS_CRC16_Msk) != SDH_INTSTS_CRC16_Msk)     /* check CRC16 */
;;;1094           {
;;;1095               return SDH_CRC16_ERROR;
;;;1096           }
;;;1097       }
;;;1098   
;;;1099       if (SDH_SDCmdAndRsp(sdh, 12ul, 0ul, 0ul))      /* stop command */
;;;1100       {
;;;1101           return SDH_CRC7_ERROR;
;;;1102       }
;;;1103       SDH_CheckRB(sdh);
;;;1104   
;;;1105       SDH_SDCommand(sdh, 7ul, 0ul);
;;;1106       sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
;;;1107       while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
;;;1108       {
;;;1109       }
;;;1110   
;;;1111       return Successful;
;;;1112   }
000082  b004              ADD      sp,sp,#0x10
000084  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.136|
000088  f8c47824          STR      r7,[r4,#0x824]        ;1014
00008c  e7e2              B        |L8.84|
                  |L8.142|
00008e  7041              STRB     r1,[r0,#1]            ;1026
000090  f8d4c820          LDR      r12,[r4,#0x820]       ;1027
000094  f42c5c7c          BIC      r12,r12,#0x3f00       ;1027
000098  f44c0c7f          ORR      r12,r12,#0xff0000     ;1028
00009c  f8cdc000          STR      r12,[sp,#0]           ;1029
0000a0  f8ddc008          LDR      r12,[sp,#8]           ;1029
0000a4  f1bc0f00          CMP      r12,#0                ;1029
0000a8  f8ddc000          LDR      r12,[sp,#0]           ;1029
0000ac  d004              BEQ      |L8.184|
0000ae  f04c0c04          ORR      r12,r12,#4            ;1036
0000b2  f8c4c820          STR      r12,[r4,#0x820]       ;1036
0000b6  e00f              B        |L8.216|
                  |L8.184|
0000b8  ea4c0c03          ORR      r12,r12,r3            ;1031
0000bc  f8c4c820          STR      r12,[r4,#0x820]       ;1031
0000c0  9202              STR      r2,[sp,#8]            ;1032
0000c2  e009              B        |L8.216|
                  |L8.196|
0000c4  f890c001          LDRB     r12,[r0,#1]           ;1041  ; g_u8SDDataReadyFlag
0000c8  f1bc0f00          CMP      r12,#0                ;1041
0000cc  d109              BNE      |L8.226|
0000ce  f895c008          LDRB     r12,[r5,#8]           ;1045
0000d2  f1bc0f00          CMP      r12,#0                ;1045
0000d6  d045              BEQ      |L8.356|
                  |L8.216|
0000d8  f890c001          LDRB     r12,[r0,#1]           ;1039  ; g_u8SDDataReadyFlag
0000dc  f1bc0f00          CMP      r12,#0                ;1039
0000e0  d0f0              BEQ      |L8.196|
                  |L8.226|
0000e2  f8d4c82c          LDR      r12,[r4,#0x82c]       ;1051
0000e6  ea5f7c4c          LSLS     r12,r12,#29           ;1051
0000ea  d544              BPL      |L8.374|
0000ec  f8d4c82c          LDR      r12,[r4,#0x82c]       ;1056
0000f0  ea5f7c0c          LSLS     r12,r12,#28           ;1056
0000f4  d534              BPL      |L8.352|
0000f6  f8ddc00c          LDR      r12,[sp,#0xc]         ;1024
0000fa  f10c0c01          ADD      r12,r12,#1            ;1024
0000fe  f8cdc00c          STR      r12,[sp,#0xc]         ;1024
                  |L8.258|
000102  f8dd8004          LDR      r8,[sp,#4]            ;1024
000106  45c4              CMP      r12,r8                ;1024
000108  d3c1              BCC      |L8.142|
00010a  fbb6fcf7          UDIV     r12,r6,r7             ;1062
00010e  fb07661c          MLS      r6,r7,r12,r6          ;1062
000112  9601              STR      r6,[sp,#4]            ;1063
000114  b346              CBZ      r6,|L8.360|
000116  7041              STRB     r1,[r0,#1]            ;1065
000118  f8d41820          LDR      r1,[r4,#0x820]        ;1066
00011c  f421517c          BIC      r1,r1,#0x3f00         ;1066
000120  f421017f          BIC      r1,r1,#0xff0000       ;1067
000124  ea414106          ORR      r1,r1,r6,LSL #16      ;1068
000128  9100              STR      r1,[sp,#0]            ;1070
00012a  9902              LDR      r1,[sp,#8]            ;1070
00012c  2900              CMP      r1,#0                 ;1070
00012e  9900              LDR      r1,[sp,#0]            ;1070
000130  d004              BEQ      |L8.316|
000132  f0410104          ORR      r1,r1,#4              ;1077
000136  f8c41820          STR      r1,[r4,#0x820]        ;1077
00013a  e006              B        |L8.330|
                  |L8.316|
00013c  4319              ORRS     r1,r1,r3              ;1072
00013e  f8c41820          STR      r1,[r4,#0x820]        ;1072
000142  9202              STR      r2,[sp,#8]            ;1073
000144  e001              B        |L8.330|
                  |L8.326|
000146  7a29              LDRB     r1,[r5,#8]            ;1082
000148  b161              CBZ      r1,|L8.356|
                  |L8.330|
00014a  7841              LDRB     r1,[r0,#1]            ;1080  ; g_u8SDDataReadyFlag
00014c  2900              CMP      r1,#0                 ;1080
00014e  d0fa              BEQ      |L8.326|
000150  f8d4082c          LDR      r0,[r4,#0x82c]        ;1088
000154  0740              LSLS     r0,r0,#29             ;1088
000156  d50e              BPL      |L8.374|
000158  f8d4082c          LDR      r0,[r4,#0x82c]        ;1093
00015c  0700              LSLS     r0,r0,#28             ;1093
00015e  d403              BMI      |L8.360|
                  |L8.352|
000160  4650              MOV      r0,r10                ;1095
000162  e78e              B        |L8.130|
                  |L8.356|
000164  4648              MOV      r0,r9                 ;1084
000166  e78c              B        |L8.130|
                  |L8.360|
000168  2300              MOVS     r3,#0                 ;1099
00016a  461a              MOV      r2,r3                 ;1099
00016c  210c              MOVS     r1,#0xc               ;1099
00016e  4620              MOV      r0,r4                 ;1099
000170  f7fffffe          BL       SDH_SDCmdAndRsp
000174  b108              CBZ      r0,|L8.378|
                  |L8.374|
000176  4658              MOV      r0,r11                ;1101
000178  e783              B        |L8.130|
                  |L8.378|
00017a  4620              MOV      r0,r4                 ;1103
00017c  f7fffffe          BL       SDH_CheckRB
000180  2200              MOVS     r2,#0                 ;1105
000182  2107              MOVS     r1,#7                 ;1105
000184  4620              MOV      r0,r4                 ;1105
000186  f7fffffe          BL       SDH_SDCommand
00018a  f8d40820          LDR      r0,[r4,#0x820]        ;1106
00018e  f0400040          ORR      r0,r0,#0x40           ;1106
000192  f8c40820          STR      r0,[r4,#0x820]        ;1106
                  |L8.406|
000196  f8d40820          LDR      r0,[r4,#0x820]        ;1107
00019a  0640              LSLS     r0,r0,#25             ;1107
00019c  d4fb              BMI      |L8.406|
00019e  2000              MOVS     r0,#0                 ;1111
0001a0  e76f              B        |L8.130|
;;;1113   
                          ENDP

0001a2  0000              DCW      0x0000
                  |L8.420|
                          DCD      0x4000d000
                  |L8.424|
                          DCD      ||.bss||+0x200
                  |L8.428|
                          DCD      0xffff0110
                  |L8.432|
                          DCD      ||.data||

                          AREA ||i.SDH_SDCmdAndRsp||, CODE, READONLY, ALIGN=2

                  SDH_SDCmdAndRsp PROC
;;;94     
;;;95     uint32_t SDH_SDCmdAndRsp(SDH_T *sdh, uint32_t ucCmd, uint32_t uArg, uint32_t ntickCount)
000000  b518              PUSH     {r3,r4,lr}
;;;96     {
;;;97         volatile uint32_t buf;
;;;98         SDH_INFO_T *pSD;
;;;99     
;;;100        if (sdh == SDH0)
000002  4c29              LDR      r4,|L9.168|
000004  42a0              CMP      r0,r4
000006  d101              BNE      |L9.12|
;;;101        {
;;;102            pSD = &SD0;
000008  4c28              LDR      r4,|L9.172|
00000a  e001              B        |L9.16|
                  |L9.12|
;;;103        }
;;;104        else
;;;105        {
;;;106            pSD = &SD1;
00000c  4c27              LDR      r4,|L9.172|
00000e  3418              ADDS     r4,r4,#0x18
                  |L9.16|
;;;107        }
;;;108    
;;;109        sdh->CMDARG = uArg;
000010  f8c02824          STR      r2,[r0,#0x824]
;;;110        buf = (sdh->CTL & (~SDH_CTL_CMDCODE_Msk)) | (ucCmd << 8ul) | (SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk);
000014  f8d02820          LDR      r2,[r0,#0x820]
000018  f422527c          BIC      r2,r2,#0x3f00
00001c  ea422101          ORR      r1,r2,r1,LSL #8
000020  f0410103          ORR      r1,r1,#3
;;;111        sdh->CTL = buf;
000024  9100              STR      r1,[sp,#0]
000026  f8c01820          STR      r1,[r0,#0x820]
;;;112    
;;;113        if (ntickCount > 0ul)
;;;114        {
;;;115            while ((sdh->CTL & SDH_CTL_RIEN_Msk) == SDH_CTL_RIEN_Msk)
;;;116            {
;;;117                if(ntickCount-- == 0ul)
;;;118                {
;;;119                    sdh->CTL |= SDH_CTL_CTLRST_Msk; /* reset SD engine */
;;;120                    return 2ul;
;;;121                }
;;;122                if (pSD->IsCardInsert == FALSE)
;;;123                {
;;;124                    return SDH_NO_SD_CARD;
00002a  4a21              LDR      r2,|L9.176|
00002c  b963              CBNZ     r3,|L9.72|
00002e  e012              B        |L9.86|
                  |L9.48|
000030  1e5b              SUBS     r3,r3,#1              ;113
000032  d207              BCS      |L9.68|
000034  f8d01820          LDR      r1,[r0,#0x820]        ;119
000038  f4414180          ORR      r1,r1,#0x4000         ;119
00003c  f8c01820          STR      r1,[r0,#0x820]        ;119
000040  2002              MOVS     r0,#2                 ;120
;;;125                }
;;;126            }
;;;127        }
;;;128        else
;;;129        {
;;;130            while ((sdh->CTL & SDH_CTL_RIEN_Msk) == SDH_CTL_RIEN_Msk)
;;;131            {
;;;132                if (pSD->IsCardInsert == FALSE)
;;;133                {
;;;134                    return SDH_NO_SD_CARD;
;;;135                }
;;;136            }
;;;137        }
;;;138    
;;;139        if (_SDH_uR7_CMD)
;;;140        {
;;;141            uint32_t tmp0 = 0ul, tmp1= 0ul;
;;;142            tmp1 = sdh->RESP1 & 0xfful;
;;;143            tmp0 = sdh->RESP0 & 0xful;
;;;144            if ((tmp1 != 0x55ul) && (tmp0 != 0x01ul))
;;;145            {
;;;146                _SDH_uR7_CMD = 0ul;
;;;147                return SDH_CMD8_ERROR;
;;;148            }
;;;149        }
;;;150    
;;;151        if (!g_u8R3Flag)
;;;152        {
;;;153            if ((sdh->INTSTS & SDH_INTSTS_CRC7_Msk) == SDH_INTSTS_CRC7_Msk)     /* check CRC7 */
;;;154            {
;;;155                return Successful;
;;;156            }
;;;157            else
;;;158            {
;;;159                return SDH_CRC7_ERROR;
;;;160            }
;;;161        }
;;;162        else
;;;163        {
;;;164            /* ignore CRC error for R3 case */
;;;165            g_u8R3Flag = 0ul;
;;;166            sdh->INTSTS = SDH_INTSTS_CRCIF_Msk;
;;;167            return Successful;
;;;168        }
;;;169    }
000042  bd18              POP      {r3,r4,pc}
                  |L9.68|
000044  7a21              LDRB     r1,[r4,#8]            ;122
000046  b1e9              CBZ      r1,|L9.132|
                  |L9.72|
000048  f8d01820          LDR      r1,[r0,#0x820]        ;115
00004c  0789              LSLS     r1,r1,#30             ;115
00004e  d4ef              BMI      |L9.48|
000050  e005              B        |L9.94|
                  |L9.82|
000052  7a21              LDRB     r1,[r4,#8]            ;132
000054  b1b1              CBZ      r1,|L9.132|
                  |L9.86|
000056  f8d01820          LDR      r1,[r0,#0x820]        ;130
00005a  0789              LSLS     r1,r1,#30             ;130
00005c  d4f9              BMI      |L9.82|
                  |L9.94|
00005e  4915              LDR      r1,|L9.180|
000060  2400              MOVS     r4,#0                 ;139
000062  684a              LDR      r2,[r1,#4]            ;139  ; _SDH_uR7_CMD
000064  b182              CBZ      r2,|L9.136|
000066  f8d02834          LDR      r2,[r0,#0x834]        ;142
00006a  f8d03830          LDR      r3,[r0,#0x830]        ;143
00006e  b2d2              UXTB     r2,r2                 ;142
000070  f003030f          AND      r3,r3,#0xf            ;143
000074  2a55              CMP      r2,#0x55              ;144
000076  d007              BEQ      |L9.136|
000078  2b01              CMP      r3,#1                 ;144
00007a  d005              BEQ      |L9.136|
00007c  480c              LDR      r0,|L9.176|
00007e  604c              STR      r4,[r1,#4]            ;147  ; _SDH_uR7_CMD
000080  3009              ADDS     r0,r0,#9              ;147
000082  bd18              POP      {r3,r4,pc}
                  |L9.132|
000084  4610              MOV      r0,r2                 ;134
000086  bd18              POP      {r3,r4,pc}
                  |L9.136|
000088  780a              LDRB     r2,[r1,#0]            ;151  ; g_u8R3Flag
00008a  b122              CBZ      r2,|L9.150|
00008c  700c              STRB     r4,[r1,#0]            ;165
00008e  2102              MOVS     r1,#2                 ;166
000090  f8c0182c          STR      r1,[r0,#0x82c]        ;166
000094  e003              B        |L9.158|
                  |L9.150|
000096  f8d0082c          LDR      r0,[r0,#0x82c]        ;153
00009a  0740              LSLS     r0,r0,#29             ;153
00009c  d501              BPL      |L9.162|
                  |L9.158|
00009e  2000              MOVS     r0,#0                 ;155
0000a0  bd18              POP      {r3,r4,pc}
                  |L9.162|
0000a2  4803              LDR      r0,|L9.176|
0000a4  1d80              ADDS     r0,r0,#6              ;159
0000a6  bd18              POP      {r3,r4,pc}
;;;170    
                          ENDP

                  |L9.168|
                          DCD      0x4000d000
                  |L9.172|
                          DCD      ||.bss||+0x200
                  |L9.176|
                          DCD      0xffff0110
                  |L9.180|
                          DCD      ||.data||

                          AREA ||i.SDH_SDCmdAndRsp2||, CODE, READONLY, ALIGN=2

                  SDH_SDCmdAndRsp2 PROC
;;;184    /* Get 16 bytes CID or CSD */
;;;185    uint32_t SDH_SDCmdAndRsp2(SDH_T *sdh, uint32_t ucCmd, uint32_t uArg, uint32_t puR2ptr[])
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4605              MOV      r5,r0
;;;187        uint32_t i, buf;
;;;188        uint32_t tmpBuf[5];
;;;189        SDH_INFO_T *pSD;
;;;190    
;;;191        if (sdh == SDH0)
000004  481f              LDR      r0,|L10.132|
000006  b085              SUB      sp,sp,#0x14           ;186
000008  4285              CMP      r5,r0
00000a  d101              BNE      |L10.16|
;;;192        {
;;;193            pSD = &SD0;
00000c  481e              LDR      r0,|L10.136|
00000e  e001              B        |L10.20|
                  |L10.16|
;;;194        }
;;;195        else
;;;196        {
;;;197            pSD = &SD1;
000010  481d              LDR      r0,|L10.136|
000012  3018              ADDS     r0,r0,#0x18
                  |L10.20|
;;;198        }
;;;199    
;;;200        sdh->CMDARG = uArg;
000014  f8c52824          STR      r2,[r5,#0x824]
;;;201        buf = (sdh->CTL&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_R2EN_Msk);
000018  f8d52820          LDR      r2,[r5,#0x820]
00001c  f422527c          BIC      r2,r2,#0x3f00
000020  ea422101          ORR      r1,r2,r1,LSL #8
000024  f0410111          ORR      r1,r1,#0x11
;;;202        sdh->CTL = buf;
000028  f8c51820          STR      r1,[r5,#0x820]
;;;203    
;;;204        while ((sdh->CTL & SDH_CTL_R2EN_Msk) == SDH_CTL_R2EN_Msk)
00002c  e001              B        |L10.50|
                  |L10.46|
;;;205        {
;;;206            if (pSD->IsCardInsert == FALSE)
00002e  7a01              LDRB     r1,[r0,#8]
000030  b319              CBZ      r1,|L10.122|
                  |L10.50|
000032  f8d51820          LDR      r1,[r5,#0x820]        ;204
000036  06c9              LSLS     r1,r1,#27             ;204
000038  d4f9              BMI      |L10.46|
;;;207            {
;;;208                return SDH_NO_SD_CARD;
;;;209            }
;;;210        }
;;;211    
;;;212        if ((sdh->INTSTS & SDH_INTSTS_CRC7_Msk) == SDH_INTSTS_CRC7_Msk)
00003a  f8d5082c          LDR      r0,[r5,#0x82c]
00003e  0740              LSLS     r0,r0,#29
000040  d51d              BPL      |L10.126|
;;;213        {
;;;214            for (i=0ul; i<5ul; i++)
000042  2400              MOVS     r4,#0
000044  466e              MOV      r6,sp                 ;188
                  |L10.70|
;;;215            {
;;;216                tmpBuf[i] = SDH_Swap32(sdh->FB[i]);
000046  f8550024          LDR      r0,[r5,r4,LSL #2]
00004a  f7fffffe          BL       SDH_Swap32
00004e  f8460024          STR      r0,[r6,r4,LSL #2]
000052  1c64              ADDS     r4,r4,#1
000054  2c05              CMP      r4,#5                 ;214
000056  d3f6              BCC      |L10.70|
;;;217            }
;;;218            for (i=0ul; i<4ul; i++)
000058  2000              MOVS     r0,#0
                  |L10.90|
;;;219            {
;;;220                puR2ptr[i] = ((tmpBuf[i] & 0x00fffffful)<<8) | ((tmpBuf[i+1ul] & 0xff000000ul)>>24);
00005a  eb060280          ADD      r2,r6,r0,LSL #2
00005e  f8561020          LDR      r1,[r6,r0,LSL #2]
000062  6852              LDR      r2,[r2,#4]
000064  0209              LSLS     r1,r1,#8
000066  ea416112          ORR      r1,r1,r2,LSR #24
00006a  f8431020          STR      r1,[r3,r0,LSL #2]
00006e  1c40              ADDS     r0,r0,#1
000070  2804              CMP      r0,#4                 ;218
000072  d3f2              BCC      |L10.90|
;;;221            }
;;;222        }
;;;223        else
;;;224        {
;;;225            return SDH_CRC7_ERROR;
;;;226        }
;;;227        return Successful;
000074  2000              MOVS     r0,#0
                  |L10.118|
;;;228    }
000076  b005              ADD      sp,sp,#0x14
000078  bd70              POP      {r4-r6,pc}
                  |L10.122|
00007a  4804              LDR      r0,|L10.140|
00007c  e7fb              B        |L10.118|
                  |L10.126|
00007e  4803              LDR      r0,|L10.140|
000080  1d80              ADDS     r0,r0,#6              ;225
000082  e7f8              B        |L10.118|
;;;229    
                          ENDP

                  |L10.132|
                          DCD      0x4000d000
                  |L10.136|
                          DCD      ||.bss||+0x200
                  |L10.140|
                          DCD      0xffff0110

                          AREA ||i.SDH_SDCmdAndRspDataIn||, CODE, READONLY, ALIGN=2

                  SDH_SDCmdAndRspDataIn PROC
;;;230    
;;;231    uint32_t SDH_SDCmdAndRspDataIn(SDH_T *sdh, uint32_t ucCmd, uint32_t uArg)
000000  b508              PUSH     {r3,lr}
;;;232    {
;;;233        volatile uint32_t buf;
;;;234        SDH_INFO_T *pSD;
;;;235    
;;;236        if (sdh == SDH0)
000002  4b1a              LDR      r3,|L11.108|
000004  4298              CMP      r0,r3
000006  d101              BNE      |L11.12|
;;;237        {
;;;238            pSD = &SD0;
000008  4b19              LDR      r3,|L11.112|
00000a  e001              B        |L11.16|
                  |L11.12|
;;;239        }
;;;240        else
;;;241        {
;;;242            pSD = &SD1;
00000c  4b18              LDR      r3,|L11.112|
00000e  3318              ADDS     r3,r3,#0x18
                  |L11.16|
;;;243        }
;;;244    
;;;245        sdh->CMDARG = uArg;
000010  f8c02824          STR      r2,[r0,#0x824]
;;;246        buf = (sdh->CTL & (~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8ul)|
000014  f8d02820          LDR      r2,[r0,#0x820]
000018  f422527c          BIC      r2,r2,#0x3f00
00001c  ea422101          ORR      r1,r2,r1,LSL #8
000020  f0410107          ORR      r1,r1,#7
;;;247              (SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk);
;;;248    
;;;249        sdh->CTL = buf;
000024  9100              STR      r1,[sp,#0]
000026  f8c01820          STR      r1,[r0,#0x820]
;;;250    
;;;251        while ((sdh->CTL & SDH_CTL_RIEN_Msk) == SDH_CTL_RIEN_Msk)
;;;252        {
;;;253            if (pSD->IsCardInsert == FALSE)
;;;254            {
;;;255                return SDH_NO_SD_CARD;
00002a  4a12              LDR      r2,|L11.116|
00002c  e001              B        |L11.50|
                  |L11.46|
00002e  7a19              LDRB     r1,[r3,#8]            ;253
000030  b189              CBZ      r1,|L11.86|
                  |L11.50|
000032  f8d01820          LDR      r1,[r0,#0x820]        ;251
000036  0789              LSLS     r1,r1,#30             ;251
000038  d4f9              BMI      |L11.46|
00003a  e001              B        |L11.64|
                  |L11.60|
;;;256            }
;;;257        }
;;;258    
;;;259        while ((sdh->CTL & SDH_CTL_DIEN_Msk) == SDH_CTL_DIEN_Msk)
;;;260        {
;;;261            if (pSD->IsCardInsert == FALSE)
00003c  7a19              LDRB     r1,[r3,#8]
00003e  b151              CBZ      r1,|L11.86|
                  |L11.64|
000040  f8d01820          LDR      r1,[r0,#0x820]        ;259
000044  0749              LSLS     r1,r1,#29             ;259
000046  d4f9              BMI      |L11.60|
;;;262            {
;;;263                return SDH_NO_SD_CARD;
;;;264            }
;;;265        }
;;;266    
;;;267        if ((sdh->INTSTS & SDH_INTSTS_CRC7_Msk) != SDH_INTSTS_CRC7_Msk)
000048  f8d0182c          LDR      r1,[r0,#0x82c]
00004c  0749              LSLS     r1,r1,#29
00004e  d404              BMI      |L11.90|
;;;268        {
;;;269            /* check CRC7 */
;;;270            return SDH_CRC7_ERROR;
000050  4808              LDR      r0,|L11.116|
000052  1d80              ADDS     r0,r0,#6
;;;271        }
;;;272    
;;;273        if ((sdh->INTSTS & SDH_INTSTS_CRC16_Msk) != SDH_INTSTS_CRC16_Msk)
;;;274        {
;;;275            /* check CRC16 */
;;;276            return SDH_CRC16_ERROR;
;;;277        }
;;;278        return 0ul;
;;;279    }
000054  bd08              POP      {r3,pc}
                  |L11.86|
000056  4610              MOV      r0,r2                 ;263
000058  bd08              POP      {r3,pc}
                  |L11.90|
00005a  f8d0082c          LDR      r0,[r0,#0x82c]        ;273
00005e  0700              LSLS     r0,r0,#28             ;273
000060  d402              BMI      |L11.104|
000062  4804              LDR      r0,|L11.116|
000064  1dc0              ADDS     r0,r0,#7              ;276
000066  bd08              POP      {r3,pc}
                  |L11.104|
000068  2000              MOVS     r0,#0                 ;278
00006a  bd08              POP      {r3,pc}
;;;280    
                          ENDP

                  |L11.108|
                          DCD      0x4000d000
                  |L11.112|
                          DCD      ||.bss||+0x200
                  |L11.116|
                          DCD      0xffff0110

                          AREA ||i.SDH_SDCommand||, CODE, READONLY, ALIGN=2

                  SDH_SDCommand PROC
;;;65     
;;;66     uint32_t SDH_SDCommand(SDH_T *sdh, uint32_t ucCmd, uint32_t uArg)
000000  b50c              PUSH     {r2,r3,lr}
;;;67     {
;;;68         volatile uint32_t buf, val = 0ul;
000002  2300              MOVS     r3,#0
;;;69         SDH_INFO_T *pSD;
;;;70     
;;;71         if (sdh == SDH0)
000004  9300              STR      r3,[sp,#0]
000006  4b0f              LDR      r3,|L12.68|
000008  4298              CMP      r0,r3
00000a  d101              BNE      |L12.16|
;;;72         {
;;;73             pSD = &SD0;
00000c  4b0e              LDR      r3,|L12.72|
00000e  e001              B        |L12.20|
                  |L12.16|
;;;74         }
;;;75         else
;;;76         {
;;;77             pSD = &SD1;
000010  4b0d              LDR      r3,|L12.72|
000012  3318              ADDS     r3,r3,#0x18
                  |L12.20|
;;;78         }
;;;79     
;;;80         sdh->CMDARG = uArg;
000014  f8c02824          STR      r2,[r0,#0x824]
;;;81         buf = (sdh->CTL&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8ul)|(SDH_CTL_COEN_Msk);
000018  f8d02820          LDR      r2,[r0,#0x820]
00001c  f422527c          BIC      r2,r2,#0x3f00
000020  ea422101          ORR      r1,r2,r1,LSL #8
000024  f0410101          ORR      r1,r1,#1
;;;82         sdh->CTL = buf;
000028  9101              STR      r1,[sp,#4]
00002a  f8c01820          STR      r1,[r0,#0x820]
;;;83     
;;;84         while ((sdh->CTL & SDH_CTL_COEN_Msk) == SDH_CTL_COEN_Msk)
;;;85         {
;;;86             if (pSD->IsCardInsert == 0ul)
;;;87             {
;;;88                 val = SDH_NO_SD_CARD;
00002e  4907              LDR      r1,|L12.76|
000030  e002              B        |L12.56|
                  |L12.50|
000032  7a1a              LDRB     r2,[r3,#8]            ;86
000034  b902              CBNZ     r2,|L12.56|
000036  9100              STR      r1,[sp,#0]
                  |L12.56|
000038  f8d02820          LDR      r2,[r0,#0x820]        ;84
00003c  07d2              LSLS     r2,r2,#31             ;84
00003e  d1f8              BNE      |L12.50|
;;;89             }
;;;90         }
;;;91         return val;
000040  9800              LDR      r0,[sp,#0]
;;;92     }
000042  bd0c              POP      {r2,r3,pc}
;;;93     
                          ENDP

                  |L12.68|
                          DCD      0x4000d000
                  |L12.72|
                          DCD      ||.bss||+0x200
                  |L12.76|
                          DCD      0xffff0110

                          AREA ||i.SDH_SelectCardType||, CODE, READONLY, ALIGN=2

                  SDH_SelectCardType PROC
;;;655    
;;;656    uint32_t SDH_SelectCardType(SDH_T *sdh)
000000  b5f8              PUSH     {r3-r7,lr}
;;;657    {
000002  4604              MOV      r4,r0
;;;658        uint32_t volatile status=0ul;
000004  2000              MOVS     r0,#0
;;;659        uint32_t param;
;;;660        SDH_INFO_T *pSD;
;;;661    
;;;662        if (sdh == SDH0)
000006  9000              STR      r0,[sp,#0]
000008  485b              LDR      r0,|L13.376|
00000a  4284              CMP      r4,r0
00000c  d101              BNE      |L13.18|
;;;663        {
;;;664            pSD = &SD0;
00000e  4d5b              LDR      r5,|L13.380|
000010  e001              B        |L13.22|
                  |L13.18|
;;;665        }
;;;666        else
;;;667        {
;;;668            pSD = &SD1;
000012  4d5a              LDR      r5,|L13.380|
000014  3518              ADDS     r5,r5,#0x18
                  |L13.22|
;;;669        }
;;;670    
;;;671        if ((status = SDH_SDCmdAndRsp(sdh, 7ul, pSD->RCA, 0ul)) != Successful)
000016  2300              MOVS     r3,#0
000018  2107              MOVS     r1,#7
00001a  4620              MOV      r0,r4
00001c  686a              LDR      r2,[r5,#4]
00001e  f7fffffe          BL       SDH_SDCmdAndRsp
000022  9000              STR      r0,[sp,#0]
000024  2800              CMP      r0,#0
000026  d17d              BNE      |L13.292|
;;;672        {
;;;673            return status;
;;;674        }
;;;675    
;;;676        SDH_CheckRB(sdh);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SDH_CheckRB
;;;677    
;;;678        /* if SD card set 4bit */
;;;679        if (pSD->CardType == SDH_TYPE_SD_HIGH)
00002e  6828              LDR      r0,[r5,#0]
000030  2107              MOVS     r1,#7                 ;671
;;;680        {
;;;681            sdh->DMASA = (uint32_t)_SDH_ucSDHCBuffer;
000032  4e53              LDR      r6,|L13.384|
000034  2801              CMP      r0,#1                 ;679
000036  d006              BEQ      |L13.70|
;;;682            sdh->BLEN = 0x07ul;  /* 64 bit */
;;;683            sdh->DMACTL |= SDH_DMACTL_DMARST_Msk;
;;;684            while ((sdh->DMACTL & SDH_DMACTL_DMARST_Msk) == 0x2);
;;;685    
;;;686            if ((status = SDH_SDCmdAndRsp(sdh, 55ul, pSD->RCA, 0ul)) != Successful)
;;;687            {
;;;688                return status;
;;;689            }
;;;690            if ((status = SDH_SDCmdAndRspDataIn(sdh, 51ul, 0x00ul)) != Successful)
;;;691            {
;;;692                return status;
;;;693            }
;;;694    
;;;695            if ((_SDH_ucSDHCBuffer[0] & 0xful) == 0x2ul)
;;;696            {
;;;697                status = SDH_SwitchToHighSpeed(sdh, pSD);
;;;698                if (status == Successful)
;;;699                {
;;;700                    /* divider */
;;;701                    SDH_Set_clock(sdh, SDHC_FREQ);
;;;702                }
;;;703            }
;;;704    
;;;705            if ((status = SDH_SDCmdAndRsp(sdh, 55ul, pSD->RCA, 0ul)) != Successful)
;;;706            {
;;;707                return status;
;;;708            }
;;;709            if ((status = SDH_SDCmdAndRsp(sdh, 6ul, 0x02ul, 0ul)) != Successful)   /* set bus width */
;;;710            {
;;;711                return status;
;;;712            }
;;;713    
;;;714            sdh->CTL |= SDH_CTL_DBW_Msk;
;;;715        }
;;;716        else if (pSD->CardType == SDH_TYPE_SD_LOW)
000038  2802              CMP      r0,#2
00003a  d034              BEQ      |L13.166|
;;;717        {
;;;718            sdh->DMASA = (uint32_t) _SDH_ucSDHCBuffer;
;;;719            sdh->BLEN = 0x07ul;
;;;720    
;;;721            if ((status = SDH_SDCmdAndRsp(sdh, 55ul, pSD->RCA, 0ul)) != Successful)
;;;722            {
;;;723                return status;
;;;724            }
;;;725            if ((status = SDH_SDCmdAndRspDataIn(sdh, 51ul, 0x00ul)) != Successful)
;;;726            {
;;;727                return status;
;;;728            }
;;;729    
;;;730            /* set data bus width. ACMD6 for SD card, SDCR_DBW for host. */
;;;731            if ((status = SDH_SDCmdAndRsp(sdh, 55ul, pSD->RCA, 0ul)) != Successful)
;;;732            {
;;;733                return status;
;;;734            }
;;;735    
;;;736            if ((status = SDH_SDCmdAndRsp(sdh, 6ul, 0x02ul, 0ul)) != Successful)
;;;737            {
;;;738                return status;
;;;739            }
;;;740    
;;;741            sdh->CTL |= SDH_CTL_DBW_Msk;
;;;742        }
;;;743        else if ((pSD->CardType == SDH_TYPE_MMC) ||(pSD->CardType == SDH_TYPE_EMMC))
00003c  2803              CMP      r0,#3
00003e  d072              BEQ      |L13.294|
000040  2804              CMP      r0,#4
000042  d071              BEQ      |L13.296|
000044  e05c              B        |L13.256|
                  |L13.70|
000046  f8c46408          STR      r6,[r4,#0x408]        ;681
00004a  f8c41838          STR      r1,[r4,#0x838]        ;682
00004e  f8d40400          LDR      r0,[r4,#0x400]        ;683
000052  f0400002          ORR      r0,r0,#2              ;683
000056  f8c40400          STR      r0,[r4,#0x400]        ;683
                  |L13.90|
00005a  f8d40400          LDR      r0,[r4,#0x400]        ;684
00005e  0780              LSLS     r0,r0,#30             ;684
000060  d4fb              BMI      |L13.90|
000062  2300              MOVS     r3,#0                 ;686
000064  2137              MOVS     r1,#0x37              ;686
000066  4620              MOV      r0,r4                 ;686
000068  686a              LDR      r2,[r5,#4]            ;686
00006a  f7fffffe          BL       SDH_SDCmdAndRsp
00006e  9000              STR      r0,[sp,#0]            ;686
000070  2800              CMP      r0,#0                 ;686
000072  d16d              BNE      |L13.336|
000074  2200              MOVS     r2,#0                 ;690
000076  2133              MOVS     r1,#0x33              ;690
000078  4620              MOV      r0,r4                 ;690
00007a  f7fffffe          BL       SDH_SDCmdAndRspDataIn
00007e  9000              STR      r0,[sp,#0]            ;690
000080  2800              CMP      r0,#0                 ;690
000082  d165              BNE      |L13.336|
000084  7830              LDRB     r0,[r6,#0]            ;695  ; _SDH_ucSDHCBuffer
000086  f000000f          AND      r0,r0,#0xf            ;695
00008a  2802              CMP      r0,#2                 ;695
00008c  d120              BNE      |L13.208|
00008e  4629              MOV      r1,r5                 ;697
000090  4620              MOV      r0,r4                 ;697
000092  f7fffffe          BL       SDH_SwitchToHighSpeed
000096  9000              STR      r0,[sp,#0]            ;698
000098  b9d0              CBNZ     r0,|L13.208|
00009a  f24c3150          MOV      r1,#0xc350            ;701
00009e  4620              MOV      r0,r4                 ;701
0000a0  f7fffffe          BL       SDH_Set_clock
0000a4  e014              B        |L13.208|
                  |L13.166|
0000a6  f8c46408          STR      r6,[r4,#0x408]        ;718
0000aa  f8c41838          STR      r1,[r4,#0x838]        ;719
0000ae  2300              MOVS     r3,#0                 ;721
0000b0  2137              MOVS     r1,#0x37              ;721
0000b2  4620              MOV      r0,r4                 ;721
0000b4  686a              LDR      r2,[r5,#4]            ;721
0000b6  f7fffffe          BL       SDH_SDCmdAndRsp
0000ba  9000              STR      r0,[sp,#0]            ;721
0000bc  2800              CMP      r0,#0                 ;721
0000be  d147              BNE      |L13.336|
0000c0  2200              MOVS     r2,#0                 ;725
0000c2  2133              MOVS     r1,#0x33              ;725
0000c4  4620              MOV      r0,r4                 ;725
0000c6  f7fffffe          BL       SDH_SDCmdAndRspDataIn
0000ca  9000              STR      r0,[sp,#0]            ;725
0000cc  2800              CMP      r0,#0                 ;725
0000ce  d13f              BNE      |L13.336|
                  |L13.208|
0000d0  2300              MOVS     r3,#0                 ;731
0000d2  2137              MOVS     r1,#0x37              ;731
0000d4  4620              MOV      r0,r4                 ;731
0000d6  686a              LDR      r2,[r5,#4]            ;731
0000d8  f7fffffe          BL       SDH_SDCmdAndRsp
0000dc  9000              STR      r0,[sp,#0]            ;731
0000de  2800              CMP      r0,#0                 ;731
0000e0  d136              BNE      |L13.336|
0000e2  2300              MOVS     r3,#0                 ;736
0000e4  2202              MOVS     r2,#2                 ;736
0000e6  2106              MOVS     r1,#6                 ;736
0000e8  4620              MOV      r0,r4                 ;736
0000ea  f7fffffe          BL       SDH_SDCmdAndRsp
0000ee  9000              STR      r0,[sp,#0]            ;736
0000f0  2800              CMP      r0,#0                 ;736
0000f2  d12d              BNE      |L13.336|
                  |L13.244|
0000f4  f8d40820          LDR      r0,[r4,#0x820]        ;741
0000f8  f4404000          ORR      r0,r0,#0x8000         ;741
0000fc  f8c40820          STR      r0,[r4,#0x820]        ;741
                  |L13.256|
;;;744        {
;;;745    
;;;746            if(pSD->CardType == SDH_TYPE_MMC)
;;;747            {
;;;748                sdh->CTL &= ~SDH_CTL_DBW_Msk;
;;;749            }
;;;750    
;;;751            /*--- sent CMD6 to MMC card to set bus width to 4 bits mode */
;;;752            /* set CMD6 argument Access field to 3, Index to 183, Value to 1 (4-bit mode) */
;;;753            param = (3ul << 24) | (183ul << 16) | (1ul << 8);
;;;754            if ((status = SDH_SDCmdAndRsp(sdh, 6ul, param, 0ul)) != Successful)
;;;755            {
;;;756                return status;
;;;757            }
;;;758            SDH_CheckRB(sdh);
;;;759    
;;;760            sdh->CTL |= SDH_CTL_DBW_Msk; /* set bus width to 4-bit mode for SD host controller */
;;;761    
;;;762        }
;;;763    
;;;764        if ((status = SDH_SDCmdAndRsp(sdh, 16ul, SDH_BLOCK_SIZE, 0ul)) != Successful)
000100  2300              MOVS     r3,#0
000102  f44f7200          MOV      r2,#0x200
000106  2110              MOVS     r1,#0x10
000108  4620              MOV      r0,r4
00010a  f7fffffe          BL       SDH_SDCmdAndRsp
00010e  9000              STR      r0,[sp,#0]
000110  2800              CMP      r0,#0
000112  d11d              BNE      |L13.336|
;;;765        {
;;;766            return status;
;;;767        }
;;;768        sdh->BLEN = SDH_BLOCK_SIZE - 1ul;
000114  f24010ff          MOV      r0,#0x1ff
000118  f8c40838          STR      r0,[r4,#0x838]
;;;769    
;;;770        SDH_SDCommand(sdh, 7ul, 0ul);
00011c  2200              MOVS     r2,#0
00011e  2107              MOVS     r1,#7
000120  4620              MOV      r0,r4
000122  e002              B        |L13.298|
                  |L13.292|
000124  e014              B        |L13.336|
                  |L13.294|
000126  e014              B        |L13.338|
                  |L13.296|
000128  e019              B        |L13.350|
                  |L13.298|
00012a  f7fffffe          BL       SDH_SDCommand
;;;771        sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
00012e  f8d40820          LDR      r0,[r4,#0x820]
000132  f0400040          ORR      r0,r0,#0x40
000136  f8c40820          STR      r0,[r4,#0x820]
                  |L13.314|
;;;772        while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
00013a  f8d40820          LDR      r0,[r4,#0x820]
00013e  0640              LSLS     r0,r0,#25
000140  d4fb              BMI      |L13.314|
;;;773        {
;;;774        }
;;;775    
;;;776        sdh->INTEN |= SDH_INTEN_BLKDIEN_Msk;
000142  f8d40828          LDR      r0,[r4,#0x828]
000146  f0400001          ORR      r0,r0,#1
00014a  f8c40828          STR      r0,[r4,#0x828]
;;;777    
;;;778        return Successful;
00014e  2000              MOVS     r0,#0
                  |L13.336|
;;;779    }
000150  bdf8              POP      {r3-r7,pc}
                  |L13.338|
000152  f8d40820          LDR      r0,[r4,#0x820]        ;748
000156  f4204000          BIC      r0,r0,#0x8000         ;748
00015a  f8c40820          STR      r0,[r4,#0x820]        ;748
                  |L13.350|
00015e  4a09              LDR      r2,|L13.388|
000160  2300              MOVS     r3,#0                 ;754
000162  2106              MOVS     r1,#6                 ;754
000164  4620              MOV      r0,r4                 ;754
000166  f7fffffe          BL       SDH_SDCmdAndRsp
00016a  9000              STR      r0,[sp,#0]            ;754
00016c  2800              CMP      r0,#0                 ;754
00016e  d1ef              BNE      |L13.336|
000170  4620              MOV      r0,r4                 ;758
000172  f7fffffe          BL       SDH_CheckRB
000176  e7bd              B        |L13.244|
;;;780    
                          ENDP

                  |L13.376|
                          DCD      0x4000d000
                  |L13.380|
                          DCD      ||.bss||+0x200
                  |L13.384|
                          DCD      ||.bss||
                  |L13.388|
                          DCD      0x03b70100

                          AREA ||i.SDH_Set_clock||, CODE, READONLY, ALIGN=2

                  SDH_Set_clock PROC
;;;283    
;;;284    void SDH_Set_clock(SDH_T *sdh, uint32_t sd_clock_khz)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;285    {
000004  460c              MOV      r4,r1
000006  4607              MOV      r7,r0
000008  2259              MOVS     r2,#0x59
00000a  2116              MOVS     r1,#0x16
00000c  2088              MOVS     r0,#0x88
00000e  06c5              LSLS     r5,r0,#27
                  |L14.16|
000010  f8c52100          STR      r2,[r5,#0x100]
000014  f8c51100          STR      r1,[r5,#0x100]
000018  f8c50100          STR      r0,[r5,#0x100]
00001c  f8d53100          LDR      r3,[r5,#0x100]
000020  2b00              CMP      r3,#0
000022  d0f5              BEQ      |L14.16|
;;;286        uint32_t rate, div1;
;;;287        static uint32_t u32SD_ClkSrc = 0ul, u32SD_PwrCtl = 0ul;
;;;288    
;;;289        SYS_UnlockReg();
;;;290    
;;;291        /* initial state, clock source use HIRC */
;;;292        if (sd_clock_khz <= 400ul)
;;;293        {
;;;294            u32SD_PwrCtl = CLK->PWRCTL;
;;;295            if ((u32SD_PwrCtl & CLK_PWRCTL_HIRCEN_Msk) != 0x4ul)
;;;296            {
;;;297                CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
;;;298            }
;;;299    
;;;300            if (sdh == SDH0)
000024  f8df9134          LDR      r9,|L14.348|
000028  f8df8134          LDR      r8,|L14.352|
;;;301            {
;;;302                u32SD_ClkSrc = (CLK->CLKSEL0 & CLK_CLKSEL0_SDH0SEL_Msk);
;;;303                CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_SDH0SEL_Msk) | CLK_CLKSEL0_SDH0SEL_HIRC;
;;;304            }
;;;305            else
;;;306            {
;;;307                u32SD_ClkSrc = (CLK->CLKSEL0 & CLK_CLKSEL0_SDH1SEL_Msk);
;;;308                CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_SDH1SEL_Msk) | CLK_CLKSEL0_SDH1SEL_HIRC;
;;;309            }
;;;310            _SDH_ReferenceClock = (__HIRC / 1000ul);
00002c  f64262e0          MOV      r2,#0x2ee0
000030  f5b47fc8          CMP      r4,#0x190             ;292
000034  d824              BHI      |L14.128|
000036  f8d50200          LDR      r0,[r5,#0x200]        ;294
00003a  f8c80010          STR      r0,[r8,#0x10]         ;295  ; u32SD_PwrCtl
00003e  4641              MOV      r1,r8                 ;294
000040  0740              LSLS     r0,r0,#29             ;295
000042  d405              BMI      |L14.80|
000044  f8d50200          LDR      r0,[r5,#0x200]        ;297
000048  f0400004          ORR      r0,r0,#4              ;297
00004c  f8c50200          STR      r0,[r5,#0x200]        ;297
                  |L14.80|
000050  f8d50210          LDR      r0,[r5,#0x210]        ;307
000054  454f              CMP      r7,r9                 ;300
000056  d107              BNE      |L14.104|
000058  f4001040          AND      r0,r0,#0x300000       ;302
00005c  60c8              STR      r0,[r1,#0xc]          ;303  ; u32SD_ClkSrc
00005e  f8d50210          LDR      r0,[r5,#0x210]        ;303
000062  f4401040          ORR      r0,r0,#0x300000       ;303
000066  e006              B        |L14.118|
                  |L14.104|
000068  f4000040          AND      r0,r0,#0xc00000       ;307
00006c  60c8              STR      r0,[r1,#0xc]          ;308  ; u32SD_ClkSrc
00006e  f8d50210          LDR      r0,[r5,#0x210]        ;308
000072  f4400040          ORR      r0,r0,#0xc00000       ;308
                  |L14.118|
000076  f8c50210          STR      r0,[r5,#0x210]        ;308
00007a  f8c82014          STR      r2,[r8,#0x14]  ; _SDH_ReferenceClock
00007e  e02c              B        |L14.218|
                  |L14.128|
;;;311        }
;;;312        /* transfer state, clock source use sys_init() */
;;;313        else
;;;314        {
;;;315            CLK->PWRCTL = u32SD_PwrCtl;
000080  f8d80010          LDR      r0,[r8,#0x10]  ; u32SD_PwrCtl
000084  f8c50200          STR      r0,[r5,#0x200]
000088  4835              LDR      r0,|L14.352|
;;;316            if (sdh == SDH0)
;;;317            {
;;;318                CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_SDH0SEL_Msk) | u32SD_ClkSrc;
;;;319                if(u32SD_ClkSrc == CLK_CLKSEL0_SDH0SEL_HXT)
;;;320                {
;;;321                    _SDH_ReferenceClock = (CLK_GetHXTFreq() / 1000ul);
;;;322                }
;;;323                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH0SEL_HIRC)
;;;324                {
;;;325                    _SDH_ReferenceClock = (__HIRC / 1000ul);
;;;326                }
;;;327                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH0SEL_PLL)
;;;328                {
;;;329                    _SDH_ReferenceClock = (CLK_GetPLLClockFreq() / 1000ul);
;;;330                }
;;;331                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH0SEL_HCLK)
;;;332                {
;;;333                    _SDH_ReferenceClock = (CLK_GetHCLKFreq() / 1000ul);
;;;334                }
;;;335            }
;;;336            else
;;;337            {
;;;338                CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_SDH1SEL_Msk) | u32SD_ClkSrc;
00008a  f8d53210          LDR      r3,[r5,#0x210]
00008e  f44f767a          MOV      r6,#0x3e8             ;321
000092  68c0              LDR      r0,[r0,#0xc]          ;294
000094  454f              CMP      r7,r9                 ;316
000096  d140              BNE      |L14.282|
000098  f4231340          BIC      r3,r3,#0x300000       ;318
00009c  4303              ORRS     r3,r3,r0              ;318
00009e  f8c53210          STR      r3,[r5,#0x210]        ;318
0000a2  b148              CBZ      r0,|L14.184|
0000a4  f5b01f40          CMP      r0,#0x300000          ;323
0000a8  d048              BEQ      |L14.316|
0000aa  f5b01f80          CMP      r0,#0x100000          ;327
0000ae  d006              BEQ      |L14.190|
0000b0  f5b01f00          CMP      r0,#0x200000          ;331
0000b4  d006              BEQ      |L14.196|
0000b6  e00b              B        |L14.208|
                  |L14.184|
0000b8  f7fffffe          BL       CLK_GetHXTFreq
0000bc  e004              B        |L14.200|
                  |L14.190|
0000be  f7fffffe          BL       CLK_GetPLLClockFreq
0000c2  e001              B        |L14.200|
                  |L14.196|
0000c4  f7fffffe          BL       CLK_GetHCLKFreq
                  |L14.200|
;;;339                if(u32SD_ClkSrc == CLK_CLKSEL0_SDH1SEL_HXT)
;;;340                {
;;;341                    _SDH_ReferenceClock = (CLK_GetHXTFreq() / 1000ul);
;;;342                }
;;;343                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH1SEL_HIRC)
;;;344                {
;;;345                    _SDH_ReferenceClock = (__HIRC / 1000ul);
;;;346                }
;;;347                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH1SEL_PLL)
;;;348                {
;;;349                    _SDH_ReferenceClock = (CLK_GetPLLClockFreq() / 1000ul);
;;;350                }
;;;351                else if(u32SD_ClkSrc == CLK_CLKSEL0_SDH1SEL_HCLK)
;;;352                {
;;;353                    _SDH_ReferenceClock = (CLK_GetHCLKFreq() / 1000ul);
0000c8  fbb0f1f6          UDIV     r1,r0,r6
0000cc  f8c81014          STR      r1,[r8,#0x14]  ; _SDH_ReferenceClock
                  |L14.208|
;;;354                }
;;;355            }
;;;356    
;;;357            if(sd_clock_khz >= 50000ul)
0000d0  f24c3050          MOV      r0,#0xc350
0000d4  4284              CMP      r4,r0
0000d6  d300              BCC      |L14.218|
;;;358            {
;;;359                sd_clock_khz = 50000ul;
0000d8  4604              MOV      r4,r0
                  |L14.218|
;;;360            }
;;;361        }
;;;362        rate = _SDH_ReferenceClock / sd_clock_khz;
0000da  f8d81014          LDR      r1,[r8,#0x14]  ; _SDH_ReferenceClock
0000de  fbb1f0f4          UDIV     r0,r1,r4
;;;363    
;;;364        /* choose slower clock if system clock cannot divisible by wanted clock */
;;;365        if ((_SDH_ReferenceClock % sd_clock_khz) != 0ul)
0000e2  fbb1f2f4          UDIV     r2,r1,r4
0000e6  fb041112          MLS      r1,r4,r2,r1
0000ea  b101              CBZ      r1,|L14.238|
0000ec  1c40              ADDS     r0,r0,#1
                  |L14.238|
;;;366        {
;;;367            rate++;
;;;368        }
;;;369    
;;;370        if(rate >= SDH_CLK_DIV0_MAX)
0000ee  28ff              CMP      r0,#0xff
0000f0  d901              BLS      |L14.246|
;;;371        {
;;;372            rate = SDH_CLK_DIV0_MAX;
0000f2  f44f7080          MOV      r0,#0x100
                  |L14.246|
0000f6  1e40              SUBS     r0,r0,#1
;;;373        }
;;;374    
;;;375        /*--- calculate the second divider CLKDIV0[SDHOST_N]*/
;;;376        div1 = (rate - 1ul) & 0xFFul;
0000f8  b2c0              UXTB     r0,r0
;;;377    
;;;378        /*--- setup register */
;;;379        if (sdh == SDH0)
0000fa  454f              CMP      r7,r9
0000fc  d121              BNE      |L14.322|
;;;380        {
;;;381            CLK->CLKDIV0 &= ~CLK_CLKDIV0_SDH0DIV_Msk;
0000fe  f8d51220          LDR      r1,[r5,#0x220]
000102  f021417f          BIC      r1,r1,#0xff000000
000106  f8c51220          STR      r1,[r5,#0x220]
;;;382            CLK->CLKDIV0 |= (div1 << CLK_CLKDIV0_SDH0DIV_Pos);
00010a  f8d51220          LDR      r1,[r5,#0x220]
00010e  ea416000          ORR      r0,r1,r0,LSL #24
000112  f8c50220          STR      r0,[r5,#0x220]
                  |L14.278|
;;;383        }
;;;384        else
;;;385        {
;;;386            CLK->CLKDIV3 &= ~CLK_CLKDIV3_SDH1DIV_Msk;
;;;387            CLK->CLKDIV3 |= (div1 << CLK_CLKDIV3_SDH1DIV_Pos);
;;;388        }
;;;389        return;
;;;390    }
000116  e8bd87f0          POP      {r4-r10,pc}
                  |L14.282|
00011a  f4230340          BIC      r3,r3,#0xc00000       ;338
00011e  4303              ORRS     r3,r3,r0              ;338
000120  f8c53210          STR      r3,[r5,#0x210]        ;338
000124  2800              CMP      r0,#0                 ;339
000126  d0c7              BEQ      |L14.184|
000128  f5b00f40          CMP      r0,#0xc00000          ;343
00012c  d006              BEQ      |L14.316|
00012e  f5b00f80          CMP      r0,#0x400000          ;347
000132  d0c4              BEQ      |L14.190|
000134  f5b00f00          CMP      r0,#0x800000          ;351
000138  d0c4              BEQ      |L14.196|
00013a  e7c9              B        |L14.208|
                  |L14.316|
00013c  f8c82014          STR      r2,[r8,#0x14]         ;345  ; _SDH_ReferenceClock
000140  e7c6              B        |L14.208|
                  |L14.322|
000142  f8d5122c          LDR      r1,[r5,#0x22c]        ;386
000146  f021417f          BIC      r1,r1,#0xff000000     ;386
00014a  f8c5122c          STR      r1,[r5,#0x22c]        ;386
00014e  f8d5122c          LDR      r1,[r5,#0x22c]        ;387
000152  ea416000          ORR      r0,r1,r0,LSL #24      ;387
000156  f8c5022c          STR      r0,[r5,#0x22c]        ;387
00015a  e7dc              B        |L14.278|
;;;391    
                          ENDP

                  |L14.348|
                          DCD      0x4000d000
                  |L14.352|
                          DCD      ||.data||

                          AREA ||i.SDH_Swap32||, CODE, READONLY, ALIGN=1

                  SDH_Swap32 PROC
;;;171    
;;;172    uint32_t SDH_Swap32(uint32_t val)
000000  f44f017f          MOV      r1,#0xff0000
;;;173    {
;;;174        uint32_t buf;
;;;175    
;;;176        buf = val;
;;;177        val <<= 24;
;;;178        val |= (buf<<8) & 0xff0000ul;
000004  ea012100          AND      r1,r1,r0,LSL #8
;;;179        val |= (buf>>8) & 0xff00ul;
000008  f44f427f          MOV      r2,#0xff00
00000c  ea416100          ORR      r1,r1,r0,LSL #24      ;178
000010  ea022210          AND      r2,r2,r0,LSR #8
000014  430a              ORRS     r2,r2,r1
;;;180        val |= (buf>>24)& 0xfful;
000016  ea426010          ORR      r0,r2,r0,LSR #24
;;;181        return val;
;;;182    }
00001a  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.SDH_SwitchToHighSpeed||, CODE, READONLY, ALIGN=2

                  SDH_SwitchToHighSpeed PROC
;;;600    
;;;601    uint32_t SDH_SwitchToHighSpeed(SDH_T *sdh, SDH_INFO_T *pSD)
000000  b578              PUSH     {r3-r6,lr}
;;;602    {
000002  4604              MOV      r4,r0
;;;603        uint32_t volatile status=0ul;
000004  2000              MOVS     r0,#0
;;;604        uint16_t current_comsumption, busy_status0;
;;;605    
;;;606        sdh->DMASA = (uint32_t)_SDH_ucSDHCBuffer;
000006  4d1b              LDR      r5,|L16.116|
000008  9000              STR      r0,[sp,#0]
00000a  f8c45408          STR      r5,[r4,#0x408]
;;;607        sdh->BLEN = 63ul;
00000e  263f              MOVS     r6,#0x3f
000010  f8c46838          STR      r6,[r4,#0x838]
;;;608    
;;;609        if ((status = SDH_SDCmdAndRspDataIn(sdh, 6ul, 0x00ffff01ul)) != Successful)
000014  4a18              LDR      r2,|L16.120|
000016  2106              MOVS     r1,#6
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SDH_SDCmdAndRspDataIn
00001e  9000              STR      r0,[sp,#0]
000020  bb28              CBNZ     r0,|L16.110|
;;;610        {
;;;611            return Fail;
;;;612        }
;;;613    
;;;614        current_comsumption = (uint16_t)_SDH_ucSDHCBuffer[0] << 8;
000022  7828              LDRB     r0,[r5,#0]  ; _SDH_ucSDHCBuffer
000024  0201              LSLS     r1,r0,#8
;;;615        current_comsumption |= (uint16_t)_SDH_ucSDHCBuffer[1];
000026  7868              LDRB     r0,[r5,#1]  ; _SDH_ucSDHCBuffer
000028  4308              ORRS     r0,r0,r1
;;;616        if (!current_comsumption)
00002a  d020              BEQ      |L16.110|
;;;617        {
;;;618            return Fail;
;;;619        }
;;;620    
;;;621        busy_status0 = (uint16_t)_SDH_ucSDHCBuffer[28] << 8;
00002c  7f28              LDRB     r0,[r5,#0x1c]  ; _SDH_ucSDHCBuffer
00002e  0201              LSLS     r1,r0,#8
;;;622        busy_status0 |= (uint16_t)_SDH_ucSDHCBuffer[29];
000030  7f68              LDRB     r0,[r5,#0x1d]  ; _SDH_ucSDHCBuffer
000032  4308              ORRS     r0,r0,r1
;;;623    
;;;624        if (!busy_status0)   /* function ready */
000034  d11b              BNE      |L16.110|
;;;625        {
;;;626            sdh->DMASA = (uint32_t)_SDH_ucSDHCBuffer;
000036  f8c45408          STR      r5,[r4,#0x408]
;;;627            sdh->BLEN = 63ul;    /* 512 bit */
00003a  f8c46838          STR      r6,[r4,#0x838]
;;;628    
;;;629            if ((status = SDH_SDCmdAndRspDataIn(sdh, 6ul, 0x80ffff01ul)) != Successful)
00003e  4a0f              LDR      r2,|L16.124|
000040  2106              MOVS     r1,#6
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SDH_SDCmdAndRspDataIn
000048  9000              STR      r0,[sp,#0]
00004a  b980              CBNZ     r0,|L16.110|
;;;630            {
;;;631                return Fail;
;;;632            }
;;;633    
;;;634            /* function change timing: 8 clocks */
;;;635            sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
00004c  f8d40820          LDR      r0,[r4,#0x820]
000050  f0400040          ORR      r0,r0,#0x40
000054  f8c40820          STR      r0,[r4,#0x820]
                  |L16.88|
;;;636            while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
000058  f8d40820          LDR      r0,[r4,#0x820]
00005c  0640              LSLS     r0,r0,#25
00005e  d4fb              BMI      |L16.88|
;;;637            {
;;;638            }
;;;639    
;;;640            current_comsumption = (uint16_t)_SDH_ucSDHCBuffer[0] << 8;
000060  7828              LDRB     r0,[r5,#0]  ; _SDH_ucSDHCBuffer
000062  0201              LSLS     r1,r0,#8
;;;641            current_comsumption |= (uint16_t)_SDH_ucSDHCBuffer[1];
000064  7868              LDRB     r0,[r5,#1]  ; _SDH_ucSDHCBuffer
000066  4308              ORRS     r0,r0,r1
;;;642            if (!current_comsumption)
000068  d001              BEQ      |L16.110|
;;;643            {
;;;644                return Fail;
;;;645            }
;;;646    
;;;647            return Successful;
00006a  2000              MOVS     r0,#0
;;;648        }
;;;649        else
;;;650        {
;;;651            return Fail;
;;;652        }
;;;653    }
00006c  bd78              POP      {r3-r6,pc}
                  |L16.110|
00006e  2001              MOVS     r0,#1                 ;651
000070  bd78              POP      {r3-r6,pc}
;;;654    
                          ENDP

000072  0000              DCW      0x0000
                  |L16.116|
                          DCD      ||.bss||
                  |L16.120|
                          DCD      0x00ffff01
                  |L16.124|
                          DCD      0x80ffff01

                          AREA ||i.SDH_Write||, CODE, READONLY, ALIGN=2

                  SDH_Write PROC
;;;1128    */
;;;1129   uint32_t SDH_Write(SDH_T *sdh, uint8_t *pu8BufAddr, uint32_t u32StartSec, uint32_t u32SecCount)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1130   {
000004  4604              MOV      r4,r0
;;;1131       uint32_t volatile bIsSendCmd = FALSE;
;;;1132       uint32_t volatile reg;
;;;1133       uint32_t volatile i, loop, status;
;;;1134   
;;;1135       SDH_INFO_T *pSD;
;;;1136   
;;;1137       if (sdh == SDH0)
000006  485d              LDR      r0,|L17.380|
000008  f04f0800          MOV      r8,#0                 ;1131
00000c  461e              MOV      r6,r3                 ;1130
00000e  4617              MOV      r7,r2                 ;1130
000010  4689              MOV      r9,r1                 ;1130
000012  f8cd8004          STR      r8,[sp,#4]
000016  4284              CMP      r4,r0
000018  d101              BNE      |L17.30|
;;;1138       {
;;;1139           pSD = &SD0;
00001a  4d59              LDR      r5,|L17.384|
00001c  e001              B        |L17.34|
                  |L17.30|
;;;1140       }
;;;1141       else
;;;1142       {
;;;1143           pSD = &SD1;
00001e  4d58              LDR      r5,|L17.384|
000020  3518              ADDS     r5,r5,#0x18
                  |L17.34|
;;;1144       }
;;;1145   
;;;1146       if (u32SecCount == 0ul)
000022  b37e              CBZ      r6,|L17.132|
;;;1147       {
;;;1148           return SDH_SELECT_ERROR;
;;;1149       }
;;;1150   
;;;1151       if ((status = SDH_SDCmdAndRsp(sdh, 7ul, pSD->RCA, 0ul)) != Successful)
000024  2300              MOVS     r3,#0
000026  2107              MOVS     r1,#7
000028  4620              MOV      r0,r4
00002a  686a              LDR      r2,[r5,#4]
00002c  f7fffffe          BL       SDH_SDCmdAndRsp
000030  9000              STR      r0,[sp,#0]
000032  2800              CMP      r0,#0
000034  d129              BNE      |L17.138|
;;;1152       {
;;;1153           return status;
;;;1154       }
;;;1155   
;;;1156       SDH_CheckRB(sdh);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       SDH_CheckRB
;;;1157   
;;;1158       /* According to SD Spec v2.0, the write CMD block size MUST be 512, and the start address MUST be 512*n. */
;;;1159       sdh->BLEN = SDH_BLOCK_SIZE - 1ul;
00003c  f24010ff          MOV      r0,#0x1ff
000040  f8c40838          STR      r0,[r4,#0x838]
;;;1160   
;;;1161       if ((pSD->CardType == SDH_TYPE_SD_HIGH) || (pSD->CardType == SDH_TYPE_EMMC))
000044  6828              LDR      r0,[r5,#0]
000046  2801              CMP      r0,#1
000048  d022              BEQ      |L17.144|
00004a  2804              CMP      r0,#4
00004c  d020              BEQ      |L17.144|
;;;1162       {
;;;1163           sdh->CMDARG = u32StartSec;
;;;1164       }
;;;1165       else
;;;1166       {
;;;1167           sdh->CMDARG = u32StartSec * SDH_BLOCK_SIZE;  /* set start address for SD CMD */
00004e  0278              LSLS     r0,r7,#9
000050  f8c40824          STR      r0,[r4,#0x824]
                  |L17.84|
;;;1168       }
;;;1169   
;;;1170       sdh->DMASA = (uint32_t)pu8BufAddr;
000054  f8c49408          STR      r9,[r4,#0x408]
;;;1171       loop = u32SecCount / 255ul;   /* the maximum block count is 0xFF=255 for register SDCR[BLK_CNT] */
000058  f04f0aff          MOV      r10,#0xff
00005c  fbb6f0fa          UDIV     r0,r6,r10
;;;1172       for (i=0ul; i<loop; i++)
;;;1173       {
;;;1174           g_u8SDDataReadyFlag = (uint8_t)FALSE;
;;;1175           reg = sdh->CTL & 0xff00c080;
;;;1176           reg = reg | 0xff0000ul;   /* set BLK_CNT to 0xFF=255 */
;;;1177           if (!bIsSendCmd)
;;;1178           {
;;;1179               sdh->CTL = reg|(25ul << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DOEN_Msk);
000060  e9cd0802          STRD     r0,r8,[sp,#8]
;;;1180               bIsSendCmd = TRUE;
;;;1181           }
;;;1182           else
;;;1183           {
;;;1184               sdh->CTL = reg | SDH_CTL_DOEN_Msk;
;;;1185           }
;;;1186   
;;;1187           while(!g_u8SDDataReadyFlag)
;;;1188           {
;;;1189               if (pSD->IsCardInsert == FALSE)
;;;1190               {
;;;1191                   return SDH_NO_SD_CARD;
;;;1192               }
;;;1193           }
;;;1194   
;;;1195           if ((sdh->INTSTS & SDH_INTSTS_CRCIF_Msk) != 0ul)
;;;1196           {
;;;1197               sdh->INTSTS = SDH_INTSTS_CRCIF_Msk;
;;;1198               return SDH_CRC_ERROR;
000064  f8dfe11c          LDR      lr,|L17.388|
000068  4642              MOV      r2,r8                 ;1172
00006a  f8dfb118          LDR      r11,|L17.388|
00006e  f04f0902          MOV      r9,#2                 ;1197
000072  f10e0e08          ADD      lr,lr,#8
000076  4b44              LDR      r3,|L17.392|
000078  2701              MOVS     r7,#1                 ;1161
00007a  f6411c0b          MOV      r12,#0x190b           ;1179
00007e  4843              LDR      r0,|L17.396|
000080  4611              MOV      r1,r2                 ;1172
000082  e02a              B        |L17.218|
                  |L17.132|
000084  e7ff              B        |L17.134|
                  |L17.134|
000086  483f              LDR      r0,|L17.388|
000088  1cc0              ADDS     r0,r0,#3              ;1148
                  |L17.138|
;;;1199           }
;;;1200       }
;;;1201   
;;;1202       loop = u32SecCount % 255ul;
;;;1203       if (loop != 0ul)
;;;1204       {
;;;1205           g_u8SDDataReadyFlag = (uint8_t)FALSE;
;;;1206           reg = (sdh->CTL & 0xff00c080) | (loop << 16);
;;;1207           if (!bIsSendCmd)
;;;1208           {
;;;1209               sdh->CTL = reg|(25ul << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DOEN_Msk);
;;;1210               bIsSendCmd = TRUE;
;;;1211           }
;;;1212           else
;;;1213           {
;;;1214               sdh->CTL = reg | SDH_CTL_DOEN_Msk;
;;;1215           }
;;;1216   
;;;1217           while(!g_u8SDDataReadyFlag)
;;;1218           {
;;;1219               if (pSD->IsCardInsert == FALSE)
;;;1220               {
;;;1221                   return SDH_NO_SD_CARD;
;;;1222               }
;;;1223           }
;;;1224   
;;;1225           if ((sdh->INTSTS & SDH_INTSTS_CRCIF_Msk) != 0ul)
;;;1226           {
;;;1227               sdh->INTSTS = SDH_INTSTS_CRCIF_Msk;
;;;1228               return SDH_CRC_ERROR;
;;;1229           }
;;;1230       }
;;;1231       sdh->INTSTS = SDH_INTSTS_CRCIF_Msk;
;;;1232   
;;;1233       if (SDH_SDCmdAndRsp(sdh, 12ul, 0ul, 0ul))      /* stop command */
;;;1234       {
;;;1235           return SDH_CRC7_ERROR;
;;;1236       }
;;;1237       SDH_CheckRB(sdh);
;;;1238   
;;;1239       SDH_SDCommand(sdh, 7ul, 0ul);
;;;1240       sdh->CTL |= SDH_CTL_CLK8OEN_Msk;
;;;1241       while ((sdh->CTL & SDH_CTL_CLK8OEN_Msk) == SDH_CTL_CLK8OEN_Msk)
;;;1242       {
;;;1243       }
;;;1244   
;;;1245       return Successful;
;;;1246   }
00008a  b004              ADD      sp,sp,#0x10
00008c  e8bd8ff0          POP      {r4-r11,pc}
                  |L17.144|
000090  f8c47824          STR      r7,[r4,#0x824]        ;1163
000094  e7de              B        |L17.84|
                  |L17.150|
000096  7042              STRB     r2,[r0,#1]            ;1174
000098  f8d41820          LDR      r1,[r4,#0x820]        ;1175
00009c  4019              ANDS     r1,r1,r3              ;1175
00009e  f441017f          ORR      r1,r1,#0xff0000       ;1176
0000a2  9100              STR      r1,[sp,#0]            ;1177
0000a4  9901              LDR      r1,[sp,#4]            ;1177
0000a6  2900              CMP      r1,#0                 ;1177
0000a8  9900              LDR      r1,[sp,#0]            ;1177
0000aa  d004              BEQ      |L17.182|
0000ac  f0410108          ORR      r1,r1,#8              ;1184
0000b0  f8c41820          STR      r1,[r4,#0x820]        ;1184
0000b4  e007              B        |L17.198|
                  |L17.182|
0000b6  ea41010c          ORR      r1,r1,r12             ;1179
0000ba  f8c41820          STR      r1,[r4,#0x820]        ;1179
0000be  9701              STR      r7,[sp,#4]            ;1180
0000c0  e001              B        |L17.198|
                  |L17.194|
0000c2  7a29              LDRB     r1,[r5,#8]            ;1189
0000c4  b3b9              CBZ      r1,|L17.310|
                  |L17.198|
0000c6  7841              LDRB     r1,[r0,#1]            ;1187  ; g_u8SDDataReadyFlag
0000c8  2900              CMP      r1,#0                 ;1187
0000ca  d0fa              BEQ      |L17.194|
0000cc  f8d4182c          LDR      r1,[r4,#0x82c]        ;1195
0000d0  0789              LSLS     r1,r1,#30             ;1195
0000d2  d42c              BMI      |L17.302|
0000d4  9903              LDR      r1,[sp,#0xc]          ;1172
0000d6  1c49              ADDS     r1,r1,#1              ;1172
0000d8  9103              STR      r1,[sp,#0xc]          ;1172
                  |L17.218|
0000da  f8dd8008          LDR      r8,[sp,#8]            ;1172
0000de  4541              CMP      r1,r8                 ;1172
0000e0  d3d9              BCC      |L17.150|
0000e2  fbb6f8fa          UDIV     r8,r6,r10             ;1202
0000e6  fb0a6118          MLS      r1,r10,r8,r6          ;1202
0000ea  9102              STR      r1,[sp,#8]            ;1203
0000ec  b331              CBZ      r1,|L17.316|
0000ee  7042              STRB     r2,[r0,#1]            ;1205
0000f0  f8d41820          LDR      r1,[r4,#0x820]        ;1206
0000f4  9a02              LDR      r2,[sp,#8]            ;1206
0000f6  4019              ANDS     r1,r1,r3              ;1206
0000f8  ea414102          ORR      r1,r1,r2,LSL #16      ;1206
0000fc  9100              STR      r1,[sp,#0]            ;1207
0000fe  9901              LDR      r1,[sp,#4]            ;1207
000100  2900              CMP      r1,#0                 ;1207
000102  9900              LDR      r1,[sp,#0]            ;1207
000104  d004              BEQ      |L17.272|
000106  f0410108          ORR      r1,r1,#8              ;1214
00010a  f8c41820          STR      r1,[r4,#0x820]        ;1214
00010e  e007              B        |L17.288|
                  |L17.272|
000110  ea41010c          ORR      r1,r1,r12             ;1209
000114  f8c41820          STR      r1,[r4,#0x820]        ;1209
000118  9701              STR      r7,[sp,#4]            ;1210
00011a  e001              B        |L17.288|
                  |L17.284|
00011c  7a29              LDRB     r1,[r5,#8]            ;1219
00011e  b151              CBZ      r1,|L17.310|
                  |L17.288|
000120  7841              LDRB     r1,[r0,#1]            ;1217  ; g_u8SDDataReadyFlag
000122  2900              CMP      r1,#0                 ;1217
000124  d0fa              BEQ      |L17.284|
000126  f8d4082c          LDR      r0,[r4,#0x82c]        ;1225
00012a  0780              LSLS     r0,r0,#30             ;1225
00012c  d506              BPL      |L17.316|
                  |L17.302|
00012e  f8c4982c          STR      r9,[r4,#0x82c]        ;1227
000132  4670              MOV      r0,lr                 ;1228
000134  e7a9              B        |L17.138|
                  |L17.310|
000136  e7ff              B        |L17.312|
                  |L17.312|
000138  4658              MOV      r0,r11                ;1221
00013a  e7a6              B        |L17.138|
                  |L17.316|
00013c  f8c4982c          STR      r9,[r4,#0x82c]        ;1231
000140  2300              MOVS     r3,#0                 ;1233
000142  461a              MOV      r2,r3                 ;1233
000144  210c              MOVS     r1,#0xc               ;1233
000146  4620              MOV      r0,r4                 ;1233
000148  f7fffffe          BL       SDH_SDCmdAndRsp
00014c  b110              CBZ      r0,|L17.340|
00014e  480d              LDR      r0,|L17.388|
000150  1d80              ADDS     r0,r0,#6              ;1235
000152  e79a              B        |L17.138|
                  |L17.340|
000154  4620              MOV      r0,r4                 ;1237
000156  f7fffffe          BL       SDH_CheckRB
00015a  2200              MOVS     r2,#0                 ;1239
00015c  2107              MOVS     r1,#7                 ;1239
00015e  4620              MOV      r0,r4                 ;1239
000160  f7fffffe          BL       SDH_SDCommand
000164  f8d40820          LDR      r0,[r4,#0x820]        ;1240
000168  f0400040          ORR      r0,r0,#0x40           ;1240
00016c  f8c40820          STR      r0,[r4,#0x820]        ;1240
                  |L17.368|
000170  f8d40820          LDR      r0,[r4,#0x820]        ;1241
000174  0640              LSLS     r0,r0,#25             ;1241
000176  d4fb              BMI      |L17.368|
000178  2000              MOVS     r0,#0                 ;1245
00017a  e786              B        |L17.138|
;;;1247   
                          ENDP

                  |L17.380|
                          DCD      0x4000d000
                  |L17.384|
                          DCD      ||.bss||+0x200
                  |L17.388|
                          DCD      0xffff0110
                  |L17.392|
                          DCD      0xff00c080
                  |L17.396|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _SDH_ucSDHCBuffer
                          %        512
                  ||SD0||
                          %        24
                  ||SD1||
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  g_u8R3Flag
000000  00                DCB      0x00
                  g_u8SDDataReadyFlag
000001  000000            DCB      0x00,0x00,0x00
                  _SDH_uR7_CMD
                          DCD      0x00000000
                  SDH_ok
                          DCD      0x00000000
                  u32SD_ClkSrc
                          DCD      0x00000000
                  u32SD_PwrCtl
                          DCD      0x00000000
                  _SDH_ReferenceClock
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\sdh.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sdh_c_f5237d0b____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_sdh_c_f5237d0b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sdh_c_f5237d0b____REVSH|
#line 402
|__asm___5_sdh_c_f5237d0b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_sdh_c_f5237d0b____RRX|
#line 587
|__asm___5_sdh_c_f5237d0b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
