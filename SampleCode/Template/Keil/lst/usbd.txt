; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\usbd.crf ..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;551      */
;;;552    void USBD_CtrlIn(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;553    {
;;;554        uint32_t addr;
;;;555    
;;;556        if(g_usbd_CtrlInSize)
000004  4c1d              LDR      r4,|L1.124|
000006  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlInSize
;;;557        {
;;;558            /* Process remained data */
;;;559            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
;;;560            {
;;;561                /* Data size > MXPLD */
;;;562                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;563                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
;;;564                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000008  4d1d              LDR      r5,|L1.128|
00000a  2600              MOVS     r6,#0                 ;556
00000c  b300              CBZ      r0,|L1.80|
00000e  68e3              LDR      r3,[r4,#0xc]          ;559  ; g_usbd_CtrlInSize
000010  6a27              LDR      r7,[r4,#0x20]         ;559  ; g_usbd_CtrlMaxPktSize
000012  1f2a              SUBS     r2,r5,#4              ;562
000014  4621              MOV      r1,r4                 ;556
000016  481b              LDR      r0,|L1.132|
000018  6849              LDR      r1,[r1,#4]            ;563
;;;565                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;566                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;567            }
;;;568            else
;;;569            {
;;;570                /* Data size <= MXPLD */
;;;571                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00001a  6812              LDR      r2,[r2,#0]
00001c  42bb              CMP      r3,r7                 ;559
00001e  4410              ADD      r0,r0,r2
000020  d90e              BLS      |L1.64|
000022  6a22              LDR      r2,[r4,#0x20]         ;563  ; g_usbd_CtrlMaxPktSize
000024  f7fffffe          BL       USBD_MemCopy
000028  6a20              LDR      r0,[r4,#0x20]         ;564  ; g_usbd_CtrlMaxPktSize
00002a  6028              STR      r0,[r5,#0]            ;564
00002c  6a21              LDR      r1,[r4,#0x20]         ;565  ; g_usbd_CtrlMaxPktSize
00002e  6860              LDR      r0,[r4,#4]            ;565  ; g_usbd_CtrlInPointer
000030  4408              ADD      r0,r0,r1              ;565
000032  6060              STR      r0,[r4,#4]            ;566  ; g_usbd_CtrlInPointer
000034  68e0              LDR      r0,[r4,#0xc]          ;566  ; g_usbd_CtrlInSize
000036  6a21              LDR      r1,[r4,#0x20]         ;566  ; g_usbd_CtrlMaxPktSize
000038  1a40              SUBS     r0,r0,r1              ;566
00003a  60e0              STR      r0,[r4,#0xc]          ;566  ; g_usbd_CtrlInSize
                  |L1.60|
;;;572                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
;;;573                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
;;;574                g_usbd_CtrlInPointer = 0;
;;;575                g_usbd_CtrlInSize = 0ul;
;;;576            }
;;;577        }
;;;578        else
;;;579        {
;;;580            /* In ACK for Set address */
;;;581            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;582            {
;;;583                addr = USBD_GET_ADDR();
;;;584                if((addr != g_usbd_UsbAddr) && (addr == 0ul))
;;;585                {
;;;586                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;587                }
;;;588            }
;;;589    
;;;590            /* For the case of data size is integral times maximum packet size */
;;;591            if(g_usbd_CtrlInZeroFlag)
;;;592            {
;;;593                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;594                g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
;;;595            }
;;;596        }
;;;597    }
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.64|
000040  68e2              LDR      r2,[r4,#0xc]          ;572  ; g_usbd_CtrlInSize
000042  f7fffffe          BL       USBD_MemCopy
000046  68e0              LDR      r0,[r4,#0xc]          ;573  ; g_usbd_CtrlInSize
000048  6028              STR      r0,[r5,#0]            ;573
00004a  6066              STR      r6,[r4,#4]            ;575  ; g_usbd_CtrlInPointer
00004c  60e6              STR      r6,[r4,#0xc]          ;575  ; g_usbd_CtrlInSize
00004e  e7f5              B        |L1.60|
                  |L1.80|
000050  480a              LDR      r0,|L1.124|
000052  3044              ADDS     r0,r0,#0x44           ;581
000054  7801              LDRB     r1,[r0,#0]            ;581  ; g_usbd_SetupPacket
000056  b951              CBNZ     r1,|L1.110|
000058  7840              LDRB     r0,[r0,#1]            ;581  ; g_usbd_SetupPacket
00005a  2805              CMP      r0,#5                 ;581
00005c  d107              BNE      |L1.110|
00005e  490a              LDR      r1,|L1.136|
000060  6888              LDR      r0,[r1,#8]            ;583
000062  69a2              LDR      r2,[r4,#0x18]         ;584  ; g_usbd_UsbAddr
000064  4290              CMP      r0,r2                 ;584
000066  d002              BEQ      |L1.110|
000068  b908              CBNZ     r0,|L1.110|
00006a  69a0              LDR      r0,[r4,#0x18]         ;586  ; g_usbd_UsbAddr
00006c  6088              STR      r0,[r1,#8]            ;586
                  |L1.110|
00006e  7860              LDRB     r0,[r4,#1]            ;591  ; g_usbd_CtrlInZeroFlag
000070  2800              CMP      r0,#0                 ;591
000072  d0e3              BEQ      |L1.60|
000074  602e              STR      r6,[r5,#0]            ;593
000076  7066              STRB     r6,[r4,#1]            ;594
000078  e7e0              B        |L1.60|
;;;598    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      0x400c0504
                  |L1.132|
                          DCD      0x400c0100
                  |L1.136|
                          DCD      0x400c0000

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;627      */
;;;628    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;629    {
;;;630        uint32_t u32Size;
;;;631        uint32_t addr;
;;;632    
;;;633        if (g_usbd_CtrlOutToggle != (USBD->EPSTS0 & USBD_EPSTS0_EPSTS1_Msk))
000002  4813              LDR      r0,|L2.80|
000004  6a01              LDR      r1,[r0,#0x20]
000006  4c13              LDR      r4,|L2.84|
000008  f00101f0          AND      r1,r1,#0xf0
00000c  6aa2              LDR      r2,[r4,#0x28]  ; g_usbd_CtrlOutToggle
;;;634        {
;;;635            g_usbd_CtrlOutToggle = USBD->EPSTS0 & USBD_EPSTS0_EPSTS1_Msk;
;;;636            if (g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
;;;637            {
;;;638                u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00000e  4e12              LDR      r6,|L2.88|
000010  4291              CMP      r1,r2                 ;633
000012  d01a              BEQ      |L2.74|
000014  6a00              LDR      r0,[r0,#0x20]         ;635
000016  f00000f0          AND      r0,r0,#0xf0           ;635
00001a  62a0              STR      r0,[r4,#0x28]         ;635  ; g_usbd_CtrlOutToggle
00001c  6920              LDR      r0,[r4,#0x10]         ;636  ; g_usbd_CtrlOutSize
00001e  6961              LDR      r1,[r4,#0x14]         ;636  ; g_usbd_CtrlOutSizeLimit
000020  4288              CMP      r0,r1                 ;636
000022  d214              BCS      |L2.78|
000024  6835              LDR      r5,[r6,#0]
;;;639                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1);
000026  1f30              SUBS     r0,r6,#4
000028  6800              LDR      r0,[r0,#0]
00002a  490c              LDR      r1,|L2.92|
;;;640                USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)addr, u32Size);
00002c  462a              MOV      r2,r5
00002e  4401              ADD      r1,r1,r0              ;639
000030  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000032  f7fffffe          BL       USBD_MemCopy
;;;641                g_usbd_CtrlOutPointer += u32Size;
000036  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000038  4428              ADD      r0,r0,r5
;;;642                g_usbd_CtrlOutSize += u32Size;
00003a  60a0              STR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
00003c  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
00003e  4428              ADD      r0,r0,r5
000040  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
;;;643    
;;;644                if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
000042  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000044  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
000046  4288              CMP      r0,r1
000048  d201              BCS      |L2.78|
                  |L2.74|
;;;645                {
;;;646                    USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
;;;647                }
;;;648            }
;;;649        }
;;;650        else
;;;651        {
;;;652            USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00004a  6a20              LDR      r0,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
00004c  6030              STR      r0,[r6,#0]
                  |L2.78|
;;;653        }
;;;654    }
00004e  bd70              POP      {r4-r6,pc}
;;;655    
                          ENDP

                  |L2.80|
                          DCD      0x400c0000
                  |L2.84|
                          DCD      ||.data||
                  |L2.88|
                          DCD      0x400c0514
                  |L2.92|
                          DCD      0x400c0100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;182      */
;;;183    void USBD_GetDescriptor(void)
000000  b4f0              PUSH     {r4-r7}
;;;184    {
;;;185        uint32_t u32Len;
;;;186    
;;;187        g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
000002  4c36              LDR      r4,|L3.220|
000004  2000              MOVS     r0,#0
000006  7060              STRB     r0,[r4,#1]
;;;188        u32Len = 0ul;
;;;189        u32Len = g_usbd_SetupPacket[7];
000008  f1040344          ADD      r3,r4,#0x44
;;;190        u32Len <<= 8ul;
;;;191        u32Len += g_usbd_SetupPacket[6];
;;;192    
;;;193        switch(g_usbd_SetupPacket[3])
;;;194        {
;;;195        /* Get Device Descriptor */
;;;196        case DESC_DEVICE:
;;;197        {
;;;198            u32Len = USBD_Minimum(u32Len, (uint32_t)LEN_DEVICE);
;;;199            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
;;;200    
;;;201            break;
;;;202        }
;;;203        /* Get Configuration Descriptor */
;;;204        case DESC_CONFIG:
;;;205        {
;;;206            uint32_t u32TotalLen;
;;;207    
;;;208            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
;;;209            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;210    
;;;211            if (u32Len > u32TotalLen)
;;;212            {
;;;213                u32Len = u32TotalLen;
;;;214                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;215                {
;;;216                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;217                }
;;;218            }
;;;219            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;220    
;;;221            break;
;;;222        }
;;;223    
;;;224        /* Get BOS Descriptor */
;;;225        case DESC_BOS:
;;;226        {
;;;227            if (g_usbd_sInfo->gu8BosDesc == 0)
;;;228            {
;;;229                USBD_SET_EP_STALL(EP0);
;;;230                USBD_SET_EP_STALL(EP1);
00000c  4f34              LDR      r7,|L3.224|
00000e  79d8              LDRB     r0,[r3,#7]            ;189  ; g_usbd_SetupPacket
000010  7999              LDRB     r1,[r3,#6]            ;191  ; g_usbd_SetupPacket
000012  78da              LDRB     r2,[r3,#3]            ;193  ; g_usbd_SetupPacket
000014  eb012100          ADD      r1,r1,r0,LSL #8       ;191
000018  4620              MOV      r0,r4                 ;187
00001a  2501              MOVS     r5,#1                 ;216
00001c  4e30              LDR      r6,|L3.224|
00001e  3710              ADDS     r7,r7,#0x10
000020  6c00              LDR      r0,[r0,#0x40]         ;199
000022  2a0f              CMP      r2,#0xf               ;193
000024  d024              BEQ      |L3.112|
000026  dc06              BGT      |L3.54|
000028  2a01              CMP      r2,#1                 ;193
00002a  d00c              BEQ      |L3.70|
00002c  2a02              CMP      r2,#2                 ;193
00002e  d00f              BEQ      |L3.80|
000030  2a03              CMP      r2,#3                 ;193
000032  d149              BNE      |L3.200|
000034  e03c              B        |L3.176|
                  |L3.54|
000036  4b29              LDR      r3,|L3.220|
000038  3344              ADDS     r3,r3,#0x44           ;189
00003a  2a21              CMP      r2,#0x21              ;193
;;;231            }
;;;232            else
;;;233            {
;;;234                u32Len = USBD_Minimum(u32Len, LEN_BOS+LEN_BOSCAP);
;;;235                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8BosDesc, u32Len);
;;;236            }
;;;237            break;
;;;238        }
;;;239        /* Get HID Descriptor */
;;;240        case DESC_HID:
;;;241        {
;;;242            /* CV3.0 HID Class Descriptor Test,
;;;243               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;244            uint32_t u32ConfigDescOffset;   /* u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index) */
;;;245            u32Len = USBD_Minimum(u32Len, LEN_HID);
;;;246            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
00003c  791b              LDRB     r3,[r3,#4]
00003e  d01d              BEQ      |L3.124|
000040  2a22              CMP      r2,#0x22              ;193
000042  d141              BNE      |L3.200|
000044  e023              B        |L3.142|
                  |L3.70|
000046  2912              CMP      r1,#0x12              ;198
000048  d300              BCC      |L3.76|
00004a  2112              MOVS     r1,#0x12              ;198
                  |L3.76|
00004c  6800              LDR      r0,[r0,#0]            ;199
00004e  e038              B        |L3.194|
                  |L3.80|
000050  6840              LDR      r0,[r0,#4]            ;208
000052  78c2              LDRB     r2,[r0,#3]            ;208
000054  7883              LDRB     r3,[r0,#2]            ;209
000056  eb032202          ADD      r2,r3,r2,LSL #8       ;209
00005a  4291              CMP      r1,r2                 ;211
00005c  d931              BLS      |L3.194|
                  |L3.94|
00005e  4611              MOV      r1,r2                 ;213
000060  6a22              LDR      r2,[r4,#0x20]         ;214  ; g_usbd_CtrlMaxPktSize
000062  fbb1f3f2          UDIV     r3,r1,r2              ;214
000066  fb021213          MLS      r2,r2,r3,r1           ;214
00006a  bb02              CBNZ     r2,|L3.174|
00006c  7065              STRB     r5,[r4,#1]            ;216
00006e  e028              B        |L3.194|
                  |L3.112|
000070  6900              LDR      r0,[r0,#0x10]         ;227
000072  b348              CBZ      r0,|L3.200|
000074  290c              CMP      r1,#0xc               ;234
000076  d324              BCC      |L3.194|
000078  210c              MOVS     r1,#0xc               ;234
00007a  e022              B        |L3.194|
                  |L3.124|
00007c  2909              CMP      r1,#9                 ;245
00007e  d300              BCC      |L3.130|
000080  2109              MOVS     r1,#9                 ;245
                  |L3.130|
000082  6982              LDR      r2,[r0,#0x18]
;;;247            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
000084  6840              LDR      r0,[r0,#4]
000086  f8522023          LDR      r2,[r2,r3,LSL #2]     ;246
00008a  4410              ADD      r0,r0,r2
;;;248    
;;;249            break;
00008c  e019              B        |L3.194|
                  |L3.142|
;;;250        }
;;;251        /* Get Report Descriptor */
;;;252        case DESC_HID_RPT:
;;;253        {
;;;254            if (u32Len > g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]])
00008e  6942              LDR      r2,[r0,#0x14]
000090  f8522023          LDR      r2,[r2,r3,LSL #2]
000094  428a              CMP      r2,r1
000096  d207              BCS      |L3.168|
000098  4611              MOV      r1,r2
;;;255            {
;;;256                u32Len = g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]];
;;;257                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
00009a  6a22              LDR      r2,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
00009c  fbb1f6f2          UDIV     r6,r1,r2
0000a0  fb021216          MLS      r2,r2,r6,r1
0000a4  b902              CBNZ     r2,|L3.168|
;;;258                {
;;;259                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
0000a6  7065              STRB     r5,[r4,#1]
                  |L3.168|
;;;260                }
;;;261            }
;;;262            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
0000a8  68c0              LDR      r0,[r0,#0xc]
0000aa  f8500023          LDR      r0,[r0,r3,LSL #2]
                  |L3.174|
;;;263            break;
0000ae  e008              B        |L3.194|
                  |L3.176|
;;;264        }
;;;265        /* Get String Descriptor */
;;;266        case DESC_STRING:
;;;267        {
;;;268            /* Get String Descriptor */
;;;269            if(g_usbd_SetupPacket[2] < 4ul)
0000b0  789a              LDRB     r2,[r3,#2]  ; g_usbd_SetupPacket
0000b2  2a04              CMP      r2,#4
0000b4  d208              BCS      |L3.200|
;;;270            {
;;;271                if (u32Len > g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0])
0000b6  6880              LDR      r0,[r0,#8]
0000b8  f8500022          LDR      r0,[r0,r2,LSL #2]
0000bc  7802              LDRB     r2,[r0,#0]
0000be  428a              CMP      r2,r1
0000c0  d3cd              BCC      |L3.94|
                  |L3.194|
;;;272                {
;;;273                    u32Len = g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0];
;;;274                    if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;275                    {
;;;276                        g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;277                    }
;;;278                }
;;;279                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
0000c2  bcf0              POP      {r4-r7}
0000c4  f7ffbffe          B.W      USBD_PrepareCtrlIn
                  |L3.200|
;;;280                break;
;;;281            }
;;;282            else
;;;283            {
;;;284                /* Not support. Reply STALL. */
;;;285                USBD_SET_EP_STALL(EP0);
;;;286                USBD_SET_EP_STALL(EP1);
;;;287                break;
;;;288            }
;;;289        }
;;;290        default:
;;;291            /* Not support. Reply STALL.*/
;;;292            USBD_SET_EP_STALL(EP0);
0000c8  6830              LDR      r0,[r6,#0]
0000ca  f0400002          ORR      r0,r0,#2
0000ce  6030              STR      r0,[r6,#0]
;;;293            USBD_SET_EP_STALL(EP1);
0000d0  6838              LDR      r0,[r7,#0]
0000d2  f0400002          ORR      r0,r0,#2
0000d6  6038              STR      r0,[r7,#0]
;;;294            break;
;;;295        }
;;;296    }
0000d8  bcf0              POP      {r4-r7}
0000da  4770              BX       lr
;;;297    
                          ENDP

                  |L3.220|
                          DCD      ||.data||
                  |L3.224|
                          DCD      0x400c050c

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;117      */
;;;118    void USBD_GetSetupPacket(uint8_t *buf)
000000  2208              MOVS     r2,#8
;;;119    {
;;;120        USBD_MemCopy(buf, g_usbd_SetupPacket, 8ul);
000002  4901              LDR      r1,|L4.8|
000004  f7ffbffe          B.W      USBD_MemCopy
;;;121    }
;;;122    
                          ENDP

                  |L4.8|
                          DCD      ||.data||+0x44

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;727     */
;;;728    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;729    {
;;;730        g_u32EpStallLock = u32EpBitmap;
000002  63c8              STR      r0,[r1,#0x3c]  ; g_u32EpStallLock
;;;731    }
000004  4770              BX       lr
;;;732    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;548      */
;;;549    __STATIC_INLINE void USBD_MemCopy(uint8_t dest[], uint8_t src[], uint32_t size)
000000  b518              PUSH     {r3,r4,lr}
;;;550    {
;;;551        uint32_t volatile i=0ul;
000002  2300              MOVS     r3,#0
                  |L6.4|
000004  9300              STR      r3,[sp,#0]
000006  1e52              SUBS     r2,r2,#1
000008  d306              BCC      |L6.24|
;;;552    
;;;553        while(size--)
;;;554        {
;;;555            dest[i] = src[i];
00000a  9b00              LDR      r3,[sp,#0]
00000c  9c00              LDR      r4,[sp,#0]
00000e  5ccb              LDRB     r3,[r1,r3]
000010  5503              STRB     r3,[r0,r4]
;;;556            i++;
000012  9b00              LDR      r3,[sp,#0]
000014  1c5b              ADDS     r3,r3,#1
000016  e7f5              B        |L6.4|
                  |L6.24|
;;;557        }
;;;558    }
000018  bd18              POP      {r3,r4,pc}
;;;559    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;70       */
;;;71     void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b08              LDR      r3,|L7.36|
;;;72     {
;;;73         g_usbd_sInfo = param;
000002  6418              STR      r0,[r3,#0x40]  ; g_usbd_sInfo
000004  e9c3120c          STRD     r1,r2,[r3,#0x30]
;;;74         g_usbd_pfnClassRequest = pfnClassReq;
;;;75         g_usbd_pfnSetInterface = pfnSetInterface;
;;;76     
;;;77         /* get EP0 maximum packet size */
;;;78         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  6218              STR      r0,[r3,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;79     
;;;80         /* Initial USB engine */
;;;81         USBD->ATTR = 0x6D0ul;
00000e  4806              LDR      r0,|L7.40|
000010  f44f61da          MOV      r1,#0x6d0
000014  6101              STR      r1,[r0,#0x10]
;;;82         /* Force SE0 */
;;;83         USBD_SET_SE0();
000016  f8d01090          LDR      r1,[r0,#0x90]
00001a  f0410101          ORR      r1,r1,#1
00001e  f8c01090          STR      r1,[r0,#0x90]
;;;84     }
000022  4770              BX       lr
;;;85     
                          ENDP

                  |L7.36|
                          DCD      ||.data||
                  |L7.40|
                          DCD      0x400c0000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;516      */
;;;517    void USBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;518    {
;;;519        uint32_t addr;
;;;520        if(u32Size > g_usbd_CtrlMaxPktSize)
000004  4c17              LDR      r4,|L8.100|
000006  460d              MOV      r5,r1                 ;518
000008  6a27              LDR      r7,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;521        {
;;;522            /* Data size > MXPLD */
;;;523            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
;;;524            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
;;;525            USBD_SET_DATA1(EP0);
00000a  4917              LDR      r1,|L8.104|
;;;526            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00000c  4a16              LDR      r2,|L8.104|
00000e  4b17              LDR      r3,|L8.108|
000010  3a08              SUBS     r2,r2,#8
;;;527            USBD_MemCopy((uint8_t *)addr, pu8Buf, g_usbd_CtrlMaxPktSize);
;;;528            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000012  1f0e              SUBS     r6,r1,#4
000014  42bd              CMP      r5,r7                 ;520
000016  d914              BLS      |L8.66|
000018  6a27              LDR      r7,[r4,#0x20]         ;523  ; g_usbd_CtrlMaxPktSize
00001a  4407              ADD      r7,r7,r0              ;523
00001c  6067              STR      r7,[r4,#4]            ;524  ; g_usbd_CtrlInPointer
00001e  6a27              LDR      r7,[r4,#0x20]         ;524  ; g_usbd_CtrlMaxPktSize
000020  1bed              SUBS     r5,r5,r7              ;524
000022  60e5              STR      r5,[r4,#0xc]          ;524  ; g_usbd_CtrlInSize
000024  680d              LDR      r5,[r1,#0]            ;525
000026  f0450580          ORR      r5,r5,#0x80           ;525
00002a  600d              STR      r5,[r1,#0]            ;525
00002c  6811              LDR      r1,[r2,#0]            ;526
00002e  6a22              LDR      r2,[r4,#0x20]         ;527  ; g_usbd_CtrlMaxPktSize
000030  440b              ADD      r3,r3,r1              ;526
000032  4601              MOV      r1,r0                 ;527
000034  4618              MOV      r0,r3                 ;527
000036  f7fffffe          BL       USBD_MemCopy
00003a  6a20              LDR      r0,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
00003c  6030              STR      r0,[r6,#0]
                  |L8.62|
;;;529        }
;;;530        else
;;;531        {
;;;532            /* Data size <= MXPLD */
;;;533            g_usbd_CtrlInPointer = 0;
;;;534            g_usbd_CtrlInSize = 0ul;
;;;535            USBD_SET_DATA1(EP0);
;;;536            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;537            USBD_MemCopy((uint8_t *)addr, pu8Buf, u32Size);
;;;538            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;539        }
;;;540    }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.66|
000042  2700              MOVS     r7,#0                 ;533
000044  6067              STR      r7,[r4,#4]            ;534  ; g_usbd_CtrlInPointer
000046  60e7              STR      r7,[r4,#0xc]          ;534  ; g_usbd_CtrlInSize
000048  680c              LDR      r4,[r1,#0]            ;535
00004a  f0440480          ORR      r4,r4,#0x80           ;535
00004e  600c              STR      r4,[r1,#0]            ;535
000050  6811              LDR      r1,[r2,#0]            ;536
000052  462a              MOV      r2,r5                 ;537
000054  440b              ADD      r3,r3,r1              ;536
000056  4601              MOV      r1,r0                 ;537
000058  4618              MOV      r0,r3                 ;537
00005a  f7fffffe          BL       USBD_MemCopy
00005e  6035              STR      r5,[r6,#0]            ;538
000060  e7ed              B        |L8.62|
;;;541    
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
                          DCD      ||.data||
                  |L8.104|
                          DCD      0x400c0508
                  |L8.108|
                          DCD      0x400c0100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;609      */
;;;610    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;611    {
;;;612        g_usbd_CtrlOutPointer = pu8Buf;
;;;613        g_usbd_CtrlOutSize = 0ul;
000002  6090              STR      r0,[r2,#8]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;614        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;615        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  6a10              LDR      r0,[r2,#0x20]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6008              STR      r0,[r1,#0]
;;;616    }
000010  4770              BX       lr
;;;617    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x400c0514

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;132      */
;;;133    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135        g_usbd_CtrlOutToggle = 0;
000002  4c15              LDR      r4,|L10.88|
000004  2000              MOVS     r0,#0
000006  62a0              STR      r0,[r4,#0x28]  ; g_usbd_CtrlOutToggle
;;;136        /* Get SETUP packet from USB buffer */
;;;137        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8ul);
000008  2208              MOVS     r2,#8
00000a  4914              LDR      r1,|L10.92|
00000c  f1040044          ADD      r0,r4,#0x44
000010  f7fffffe          BL       USBD_MemCopy
;;;138    
;;;139        /* Check the request type */
;;;140        switch(g_usbd_SetupPacket[0] & 0x60ul)
000014  f1040044          ADD      r0,r4,#0x44
000018  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
00001a  f0100060          ANDS     r0,r0,#0x60
00001e  d00f              BEQ      |L10.64|
000020  2820              CMP      r0,#0x20
000022  d011              BEQ      |L10.72|
000024  2840              CMP      r0,#0x40
000026  d011              BEQ      |L10.76|
;;;141        {
;;;142        case REQ_STANDARD:
;;;143        {
;;;144            USBD_StandardRequest();
;;;145            break;
;;;146        }
;;;147        case REQ_CLASS:
;;;148        {
;;;149            if(g_usbd_pfnClassRequest != NULL)
;;;150            {
;;;151                g_usbd_pfnClassRequest();
;;;152            }
;;;153            break;
;;;154        }
;;;155        case REQ_VENDOR:
;;;156        {
;;;157            if(g_usbd_pfnVendorRequest != NULL)
;;;158            {
;;;159                g_usbd_pfnVendorRequest();
;;;160            }
;;;161            break;
;;;162        }
;;;163        default:
;;;164        {
;;;165            /* Setup error, stall the device */
;;;166            USBD_SET_EP_STALL(EP0);
000028  480d              LDR      r0,|L10.96|
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410102          ORR      r1,r1,#2
000030  6001              STR      r1,[r0,#0]
;;;167            USBD_SET_EP_STALL(EP1);
000032  480b              LDR      r0,|L10.96|
000034  3010              ADDS     r0,r0,#0x10
000036  6801              LDR      r1,[r0,#0]
000038  f0410102          ORR      r1,r1,#2
00003c  6001              STR      r1,[r0,#0]
                  |L10.62|
;;;168            break;
;;;169        }
;;;170        }
;;;171    }
00003e  bd10              POP      {r4,pc}
                  |L10.64|
000040  e8bd4010          POP      {r4,lr}               ;144
000044  f7ffbffe          B.W      USBD_StandardRequest
                  |L10.72|
000048  6b20              LDR      r0,[r4,#0x30]         ;149  ; g_usbd_pfnClassRequest
00004a  e000              B        |L10.78|
                  |L10.76|
00004c  6ae0              LDR      r0,[r4,#0x2c]         ;157  ; g_usbd_pfnVendorRequest
                  |L10.78|
00004e  2800              CMP      r0,#0                 ;157
000050  d0f5              BEQ      |L10.62|
000052  e8bd4010          POP      {r4,lr}               ;159
000056  4700              BX       r0                    ;159
;;;172    
                          ENDP

                  |L10.88|
                          DCD      ||.data||
                  |L10.92|
                          DCD      0x400c0100
                  |L10.96|
                          DCD      0x400c050c

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;711     */
;;;712    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;713    {
;;;714        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6388              STR      r0,[r1,#0x38]  ; g_usbd_pfnSetConfigCallback
;;;715    }
000004  4770              BX       lr
;;;716    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;697     */
;;;698    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;699    {
;;;700        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  62c8              STR      r0,[r1,#0x2c]  ; g_usbd_pfnVendorRequest
;;;701    }
000004  4770              BX       lr
;;;702    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;307      */
;;;308    void USBD_StandardRequest(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;309    {
;;;310        uint32_t addr;
;;;311        /* clear global variables for new request */
;;;312        g_usbd_CtrlInPointer = 0;
000004  497f              LDR      r1,|L13.516|
000006  2500              MOVS     r5,#0
;;;313        g_usbd_CtrlInSize = 0ul;
000008  604d              STR      r5,[r1,#4]  ; g_usbd_CtrlInPointer
00000a  60cd              STR      r5,[r1,#0xc]  ; g_usbd_CtrlInSize
;;;314    
;;;315        if((g_usbd_SetupPacket[0] & 0x80ul) == 0x80ul)    /* request data transfer direction */
00000c  f1010344          ADD      r3,r1,#0x44
000010  4698              MOV      r8,r3
000012  7818              LDRB     r0,[r3,#0]  ; g_usbd_SetupPacket
;;;316        {
;;;317            /* Device to host */
;;;318            switch(g_usbd_SetupPacket[1])
;;;319            {
;;;320            case GET_CONFIGURATION:
;;;321            {
;;;322                /* Return current configuration setting */
;;;323                /* Data stage */
;;;324                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;325                M8(addr) = (uint8_t)g_usbd_UsbConfig;
;;;326                USBD_SET_DATA1(EP0);
;;;327                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;328                /* Status stage */
;;;329                USBD_PrepareCtrlOut(0, 0ul);
;;;330                break;
;;;331            }
;;;332            case GET_DESCRIPTOR:
;;;333            {
;;;334                USBD_GetDescriptor();
;;;335                USBD_PrepareCtrlOut(0, 0ul); /* For status stage */
;;;336                break;
;;;337            }
;;;338            case GET_INTERFACE:
;;;339            {
;;;340                /* Return current interface setting */
;;;341                /* Data stage */
;;;342                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;343                M8(addr) = (uint8_t)g_usbd_UsbAltInterface;
;;;344                USBD_SET_DATA1(EP0);
;;;345                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;346                /* Status stage */
;;;347                USBD_PrepareCtrlOut(0, 0ul);
;;;348                break;
;;;349            }
;;;350            case GET_STATUS:
;;;351            {
;;;352                /* Device */
;;;353                if(g_usbd_SetupPacket[0] == 0x80ul)
;;;354                {
;;;355                    uint8_t u8Tmp;
;;;356    
;;;357                    u8Tmp = (uint8_t)0ul;
;;;358                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x40ul) == 0x40ul)
;;;359                    {
;;;360                        u8Tmp |= (uint8_t)1ul; /* Self-Powered/Bus-Powered.*/
;;;361                    }
;;;362                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x20ul) == 0x20ul)
;;;363                    {
;;;364                        u8Tmp |= (uint8_t)(g_usbd_RemoteWakeupEn << 1ul); /* Remote wake up */
;;;365                    }
;;;366    
;;;367                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;368                    M8(addr) = u8Tmp;
;;;369    
;;;370                }
;;;371                /* Interface */
;;;372                else if(g_usbd_SetupPacket[0] == 0x81ul)
;;;373                {
;;;374                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;375                    M8(addr) = (uint8_t)0ul;
;;;376                }
;;;377                /* Endpoint */
;;;378                else if(g_usbd_SetupPacket[0] == 0x82ul)
;;;379                {
;;;380                    uint8_t ep = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
000014  f8984004          LDRB     r4,[r8,#4]
000018  4e7b              LDR      r6,|L13.520|
00001a  f8dfc1f0          LDR      r12,|L13.524|
;;;381                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;382                    M8(addr) = (uint8_t)(USBD_GetStall(ep) ? 1ul : 0ul);
;;;383                }
;;;384    
;;;385                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1ul;
;;;386                M8(addr) = (uint8_t)0ul;
;;;387                /* Data stage */
;;;388                USBD_SET_DATA1(EP0);
;;;389                USBD_SET_PAYLOAD_LEN(EP0, 2ul);
;;;390                /* Status stage */
;;;391                USBD_PrepareCtrlOut(0, 0ul);
;;;392                break;
;;;393            }
;;;394            default:
;;;395            {
;;;396                /* Setup error, stall the device */
;;;397                USBD_SET_EP_STALL(EP0);
;;;398                USBD_SET_EP_STALL(EP1);
00001e  f8dfa1f0          LDR      r10,|L13.528|
000022  f004070f          AND      r7,r4,#0xf            ;380
000026  f8988001          LDRB     r8,[r8,#1]            ;318
00002a  0602              LSLS     r2,r0,#24             ;315
00002c  f04f0901          MOV      r9,#1                 ;327
000030  f1060404          ADD      r4,r6,#4              ;326
000034  d571              BPL      |L13.282|
000036  4a77              LDR      r2,|L13.532|
000038  1f33              SUBS     r3,r6,#4              ;324
00003a  f1b80f00          CMP      r8,#0                 ;318
00003e  d01a              BEQ      |L13.118|
000040  f1b80f06          CMP      r8,#6                 ;318
000044  d00a              BEQ      |L13.92|
000046  f1b80f08          CMP      r8,#8                 ;318
00004a  d003              BEQ      |L13.84|
00004c  f1b80f0a          CMP      r8,#0xa               ;318
000050  d154              BNE      |L13.252|
000052  e006              B        |L13.98|
                  |L13.84|
000054  6818              LDR      r0,[r3,#0]            ;324
000056  69c9              LDR      r1,[r1,#0x1c]         ;325  ; g_usbd_UsbConfig
000058  4410              ADD      r0,r0,r2              ;324
00005a  e005              B        |L13.104|
                  |L13.92|
00005c  f7fffffe          BL       USBD_GetDescriptor
000060  e046              B        |L13.240|
                  |L13.98|
000062  6818              LDR      r0,[r3,#0]            ;342
000064  6a49              LDR      r1,[r1,#0x24]         ;343  ; g_usbd_UsbAltInterface
000066  4410              ADD      r0,r0,r2              ;342
                  |L13.104|
000068  7001              STRB     r1,[r0,#0]            ;325
00006a  6820              LDR      r0,[r4,#0]            ;326
00006c  f0400080          ORR      r0,r0,#0x80           ;326
000070  6020              STR      r0,[r4,#0]            ;326
000072  4648              MOV      r0,r9                 ;327
000074  e03b              B        |L13.238|
                  |L13.118|
000076  2880              CMP      r0,#0x80              ;353
000078  d004              BEQ      |L13.132|
00007a  2881              CMP      r0,#0x81              ;372
00007c  d013              BEQ      |L13.166|
00007e  2882              CMP      r0,#0x82              ;378
000080  d014              BEQ      |L13.172|
000082  e02b              B        |L13.220|
                  |L13.132|
000084  6c0f              LDR      r7,[r1,#0x40]         ;358  ; g_usbd_sInfo
000086  2000              MOVS     r0,#0                 ;357
000088  687f              LDR      r7,[r7,#4]            ;358
00008a  79ff              LDRB     r7,[r7,#7]            ;358
00008c  ea5f6c47          LSLS     r12,r7,#25            ;358
000090  d500              BPL      |L13.148|
000092  2001              MOVS     r0,#1                 ;360
                  |L13.148|
000094  06bf              LSLS     r7,r7,#26             ;362
000096  d503              BPL      |L13.160|
000098  7809              LDRB     r1,[r1,#0]            ;364  ; g_usbd_RemoteWakeupEn
00009a  0649              LSLS     r1,r1,#25             ;364
00009c  ea406011          ORR      r0,r0,r1,LSR #24      ;364
                  |L13.160|
0000a0  6819              LDR      r1,[r3,#0]            ;367
0000a2  5488              STRB     r0,[r1,r2]            ;368
0000a4  e01a              B        |L13.220|
                  |L13.166|
0000a6  6818              LDR      r0,[r3,#0]            ;374
0000a8  5485              STRB     r5,[r0,r2]            ;375
0000aa  e017              B        |L13.220|
                  |L13.172|
0000ac  6818              LDR      r0,[r3,#0]            ;381
0000ae  eb000802          ADD      r8,r0,r2              ;381
0000b2  2000              MOVS     r0,#0                 ;381
                  |L13.180|
0000b4  eb041100          ADD      r1,r4,r0,LSL #4       ;381
0000b8  680a              LDR      r2,[r1,#0]            ;381
0000ba  f002020f          AND      r2,r2,#0xf            ;381
0000be  42ba              CMP      r2,r7                 ;381
0000c0  d102              BNE      |L13.200|
0000c2  eb0c1100          ADD      r1,r12,r0,LSL #4      ;381
0000c6  e002              B        |L13.206|
                  |L13.200|
0000c8  1c40              ADDS     r0,r0,#1              ;381
0000ca  280c              CMP      r0,#0xc               ;381
0000cc  d3f2              BCC      |L13.180|
                  |L13.206|
0000ce  6808              LDR      r0,[r1,#0]            ;381
0000d0  f0100002          ANDS     r0,r0,#2              ;381
0000d4  d000              BEQ      |L13.216|
0000d6  2001              MOVS     r0,#1                 ;382
                  |L13.216|
0000d8  f8880000          STRB     r0,[r8,#0]            ;382
                  |L13.220|
0000dc  6818              LDR      r0,[r3,#0]            ;385
0000de  494d              LDR      r1,|L13.532|
0000e0  1c49              ADDS     r1,r1,#1              ;385
0000e2  5445              STRB     r5,[r0,r1]            ;386
0000e4  6820              LDR      r0,[r4,#0]            ;388
0000e6  f0400080          ORR      r0,r0,#0x80           ;388
0000ea  6020              STR      r0,[r4,#0]            ;388
0000ec  2002              MOVS     r0,#2                 ;389
                  |L13.238|
0000ee  6030              STR      r0,[r6,#0]            ;389
                  |L13.240|
0000f0  e8bd47f0          POP      {r4-r10,lr}           ;391
0000f4  2100              MOVS     r1,#0                 ;391
0000f6  4608              MOV      r0,r1                 ;391
0000f8  f7ffbffe          B.W      USBD_PrepareCtrlOut
                  |L13.252|
0000fc  f8dc0000          LDR      r0,[r12,#0]           ;397
000100  f0400002          ORR      r0,r0,#2              ;397
000104  f8cc0000          STR      r0,[r12,#0]           ;397
000108  f8da1000          LDR      r1,[r10,#0]
00010c  f0410102          ORR      r1,r1,#2
000110  f8ca1000          STR      r1,[r10,#0]
                  |L13.276|
;;;399                break;
;;;400            }
;;;401            }
;;;402        }
;;;403        else
;;;404        {
;;;405            /* Host to device */
;;;406            switch(g_usbd_SetupPacket[1])
;;;407            {
;;;408            case CLEAR_FEATURE:
;;;409            {
;;;410                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;411                {
;;;412                    uint32_t epNum, i;
;;;413    
;;;414                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;415                       a flag: g_u32EpStallLock is added to support it */
;;;416                    epNum = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
;;;417                    for(i = 0ul; i < USBD_MAX_EP; i++)
;;;418                    {
;;;419                        if(((USBD->EP[i].CFG & 0xFul) == epNum) && ((g_u32EpStallLock & (1ul << i)) == 0ul))
;;;420                        {
;;;421                            USBD->EP[i].CFGP &= ~USBD_CFGP_SSTALL_Msk;
;;;422                            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
;;;423                        }
;;;424                    }
;;;425                }
;;;426                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;427                {
;;;428                    g_usbd_RemoteWakeupEn = (uint8_t)0;
;;;429                }
;;;430    
;;;431                /* Status stage */
;;;432                USBD_SET_DATA1(EP0);
;;;433                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;434                break;
;;;435            }
;;;436            case SET_ADDRESS:
;;;437            {
;;;438                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;439                /* Status Stage */
;;;440                USBD_SET_DATA1(EP0);
;;;441                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;442    
;;;443                break;
;;;444            }
;;;445            case SET_CONFIGURATION:
;;;446            {
;;;447                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;448    
;;;449                if(g_usbd_pfnSetConfigCallback)
;;;450                {
;;;451                    g_usbd_pfnSetConfigCallback();
;;;452                }
;;;453    
;;;454                /* Status stage */
;;;455                USBD_SET_DATA1(EP0);
;;;456                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;457                break;
;;;458            }
;;;459            case SET_FEATURE:
;;;460            {
;;;461                if( (g_usbd_SetupPacket[0] & 0xFul) == 0ul )   /* 0: device */
;;;462                {
;;;463                    if((g_usbd_SetupPacket[2] == 3ul) && (g_usbd_SetupPacket[3] == 0ul))   /* 3: HNP enable */
;;;464                    {
;;;465                        OTG->CTL |= (OTG_CTL_HNPREQEN_Msk | OTG_CTL_BUSREQ_Msk);
;;;466                    }
;;;467                }
;;;468                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;469                {
;;;470                    USBD_SetStall((uint8_t)(g_usbd_SetupPacket[4] & 0xFul));
;;;471                }
;;;472                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;473                {
;;;474                    g_usbd_RemoteWakeupEn = (uint8_t)1ul;
;;;475                }
;;;476    
;;;477                /* Status stage */
;;;478                USBD_SET_DATA1(EP0);
;;;479                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;480    
;;;481                break;
;;;482            }
;;;483            case SET_INTERFACE:
;;;484            {
;;;485                g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;486                if(g_usbd_pfnSetInterface != NULL)
;;;487                {
;;;488                    g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;489                }
;;;490                /* Status stage */
;;;491                USBD_SET_DATA1(EP0);
;;;492                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;493                break;
;;;494            }
;;;495            default:
;;;496            {
;;;497                /* Setup error, stall the device */
;;;498                USBD_SET_EP_STALL(EP0);
;;;499                USBD_SET_EP_STALL(EP1);
;;;500                break;
;;;501            }
;;;502            }
;;;503        }
;;;504    }
000114  e8bd87f0          POP      {r4-r10,pc}
000118  e7ff              B        |L13.282|
                  |L13.282|
00011a  4a3a              LDR      r2,|L13.516|
00011c  3244              ADDS     r2,r2,#0x44           ;315
00011e  f1b80f05          CMP      r8,#5                 ;406
000122  7892              LDRB     r2,[r2,#2]            ;410
000124  d042              BEQ      |L13.428|
000126  dc08              BGT      |L13.314|
000128  f1b80f01          CMP      r8,#1                 ;406
00012c  d011              BEQ      |L13.338|
00012e  f1b80f03          CMP      r8,#3                 ;406
000132  d1e3              BNE      |L13.252|
000134  0700              LSLS     r0,r0,#28             ;461
000136  d041              BEQ      |L13.444|
000138  e042              B        |L13.448|
                  |L13.314|
00013a  f1b80f09          CMP      r8,#9                 ;406
00013e  d037              BEQ      |L13.432|
000140  f1b80f0b          CMP      r8,#0xb               ;406
000144  d1da              BNE      |L13.252|
000146  624a              STR      r2,[r1,#0x24]         ;485  ; g_usbd_UsbAltInterface
000148  6b4a              LDR      r2,[r1,#0x34]         ;486  ; g_usbd_pfnSetInterface
00014a  b33a              CBZ      r2,|L13.412|
00014c  6a48              LDR      r0,[r1,#0x24]         ;488  ; g_usbd_UsbAltInterface
00014e  4790              BLX      r2                    ;488
000150  e026              B        |L13.416|
                  |L13.338|
000152  b112              CBZ      r2,|L13.346|
000154  2a01              CMP      r2,#1                 ;426
000156  d022              BEQ      |L13.414|
000158  e022              B        |L13.416|
                  |L13.346|
00015a  f8dfc0bc          LDR      r12,|L13.536|
00015e  6bca              LDR      r2,[r1,#0x3c]         ;419
000160  2000              MOVS     r0,#0                 ;417
000162  464b              MOV      r3,r9                 ;327
                  |L13.356|
000164  eb0c1100          ADD      r1,r12,r0,LSL #4      ;419
000168  f8d18508          LDR      r8,[r1,#0x508]        ;419
00016c  f008080f          AND      r8,r8,#0xf            ;419
000170  45b8              CMP      r8,r7                 ;419
000172  d110              BNE      |L13.406|
000174  fa03f800          LSL      r8,r3,r0              ;419
000178  ea180f02          TST      r8,r2                 ;419
00017c  d10b              BNE      |L13.406|
00017e  f8d1850c          LDR      r8,[r1,#0x50c]        ;421
000182  f0280802          BIC      r8,r8,#2              ;421
000186  f8c1850c          STR      r8,[r1,#0x50c]        ;421
00018a  f8d18508          LDR      r8,[r1,#0x508]        ;422
00018e  f0280880          BIC      r8,r8,#0x80           ;422
000192  f8c18508          STR      r8,[r1,#0x508]        ;422
                  |L13.406|
000196  1c40              ADDS     r0,r0,#1              ;422
000198  280c              CMP      r0,#0xc               ;417
00019a  d3e3              BCC      |L13.356|
                  |L13.412|
00019c  e000              B        |L13.416|
                  |L13.414|
00019e  700d              STRB     r5,[r1,#0]            ;428
                  |L13.416|
0001a0  6820              LDR      r0,[r4,#0]            ;432
0001a2  f0400080          ORR      r0,r0,#0x80           ;432
0001a6  6020              STR      r0,[r4,#0]            ;432
0001a8  6035              STR      r5,[r6,#0]            ;433
0001aa  e7b3              B        |L13.276|
                  |L13.428|
0001ac  618a              STR      r2,[r1,#0x18]         ;438  ; g_usbd_UsbAddr
0001ae  e7f7              B        |L13.416|
                  |L13.432|
0001b0  61ca              STR      r2,[r1,#0x1c]         ;447  ; g_usbd_UsbConfig
0001b2  6b88              LDR      r0,[r1,#0x38]         ;449  ; g_usbd_pfnSetConfigCallback
0001b4  2800              CMP      r0,#0                 ;449
0001b6  d0f3              BEQ      |L13.416|
0001b8  4780              BLX      r0                    ;451
0001ba  e7f1              B        |L13.416|
                  |L13.444|
0001bc  2a03              CMP      r2,#3                 ;463
0001be  d005              BEQ      |L13.460|
                  |L13.448|
0001c0  b162              CBZ      r2,|L13.476|
0001c2  2a01              CMP      r2,#1                 ;472
0001c4  d1ec              BNE      |L13.416|
0001c6  f8819000          STRB     r9,[r1,#0]            ;474
0001ca  e7e9              B        |L13.416|
                  |L13.460|
0001cc  78d8              LDRB     r0,[r3,#3]            ;463  ; g_usbd_SetupPacket
0001ce  2800              CMP      r0,#0                 ;463
0001d0  d1e6              BNE      |L13.416|
0001d2  4812              LDR      r0,|L13.540|
0001d4  6801              LDR      r1,[r0,#0]            ;465
0001d6  f0410106          ORR      r1,r1,#6              ;465
0001da  e00c              B        |L13.502|
                  |L13.476|
0001dc  2000              MOVS     r0,#0                 ;465
                  |L13.478|
0001de  eb041100          ADD      r1,r4,r0,LSL #4       ;465
0001e2  6809              LDR      r1,[r1,#0]            ;465
0001e4  f001010f          AND      r1,r1,#0xf            ;465
0001e8  42b9              CMP      r1,r7                 ;465
0001ea  d106              BNE      |L13.506|
0001ec  eb0c1000          ADD      r0,r12,r0,LSL #4      ;465
0001f0  6801              LDR      r1,[r0,#0]            ;465
0001f2  f0410102          ORR      r1,r1,#2              ;465
                  |L13.502|
0001f6  6001              STR      r1,[r0,#0]            ;465
0001f8  e7d2              B        |L13.416|
                  |L13.506|
0001fa  1c40              ADDS     r0,r0,#1              ;465
0001fc  280c              CMP      r0,#0xc               ;465
0001fe  d3ee              BCC      |L13.478|
000200  e7ce              B        |L13.416|
;;;505    
                          ENDP

000202  0000              DCW      0x0000
                  |L13.516|
                          DCD      ||.data||
                  |L13.520|
                          DCD      0x400c0504
                  |L13.524|
                          DCD      0x400c050c
                  |L13.528|
                          DCD      0x400c051c
                  |L13.532|
                          DCD      0x400c0100
                  |L13.536|
                          DCD      0x400c0000
                  |L13.540|
                          DCD      0x4004d000

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;94       */
;;;95     void USBD_Start(void)
000000  4808              LDR      r0,|L14.36|
;;;96     {
;;;97         /* Disable software-disconnect function */
;;;98         USBD_CLR_SE0();
000002  f8d01090          LDR      r1,[r0,#0x90]
000006  f0210101          BIC      r1,r1,#1
00000a  f8c01090          STR      r1,[r0,#0x90]
;;;99         USBD->ATTR = 0x7D0ul;
00000e  f44f61fa          MOV      r1,#0x7d0
000012  6101              STR      r1,[r0,#0x10]
;;;100    
;;;101        /* Clear USB-related interrupts before enable interrupt */
;;;102        USBD_CLR_INT_FLAG(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000014  f240110f          MOV      r1,#0x10f
000018  6041              STR      r1,[r0,#4]
;;;103    
;;;104        /* Enable USB-related interrupts. */
;;;105        USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
00001a  6802              LDR      r2,[r0,#0]
00001c  430a              ORRS     r2,r2,r1
00001e  6002              STR      r2,[r0,#0]
;;;106    }
000020  4770              BX       lr
;;;107    
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      0x400c0000

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;665      */
;;;666    void USBD_SwReset(void)
000000  480c              LDR      r0,|L15.52|
;;;667    {
000002  b510              PUSH     {r4,lr}
;;;668        uint32_t i;
;;;669    
;;;670        /* Reset all variables for protocol */
;;;671        g_usbd_CtrlInPointer = 0;
000004  2200              MOVS     r2,#0
;;;672        g_usbd_CtrlInSize = 0ul;
000006  6042              STR      r2,[r0,#4]  ; g_usbd_CtrlInPointer
000008  60c2              STR      r2,[r0,#0xc]  ; g_usbd_CtrlInSize
;;;673        g_usbd_CtrlOutPointer = 0;
;;;674        g_usbd_CtrlOutSize = 0ul;
00000a  6082              STR      r2,[r0,#8]  ; g_usbd_CtrlOutPointer
00000c  6102              STR      r2,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;675        g_usbd_CtrlOutSizeLimit = 0ul;
00000e  6142              STR      r2,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;676        g_u32EpStallLock = 0ul;
;;;677        memset(g_usbd_SetupPacket, 0, 8ul);
000010  63c2              STR      r2,[r0,#0x3c]  ; g_u32EpStallLock
000012  6442              STR      r2,[r0,#0x44]  ; g_usbd_SetupPacket
;;;678    
;;;679        /* Reset PID DATA0 */
;;;680        for(i=0ul; i<USBD_MAX_EP; i++)
000014  6482              STR      r2,[r0,#0x48]  ; g_usbd_SetupPacket
;;;681        {
;;;682            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
000016  4b08              LDR      r3,|L15.56|
000018  4610              MOV      r0,r2                 ;680
                  |L15.26|
00001a  eb031100          ADD      r1,r3,r0,LSL #4
00001e  f8d14508          LDR      r4,[r1,#0x508]
000022  f0240480          BIC      r4,r4,#0x80
000026  f8c14508          STR      r4,[r1,#0x508]
00002a  1c40              ADDS     r0,r0,#1
00002c  280c              CMP      r0,#0xc               ;680
00002e  d3f4              BCC      |L15.26|
;;;683        }
;;;684    
;;;685        /* Reset USB device address */
;;;686        USBD_SET_ADDR(0ul);
000030  609a              STR      r2,[r3,#8]
;;;687    }
000032  bd10              POP      {r4,pc}
;;;688    
                          ENDP

                  |L15.52|
                          DCD      ||.data||
                  |L15.56|
                          DCD      0x400c0000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00                DCB      0x00
                  g_usbd_CtrlInZeroFlag
000001  000000            DCB      0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_CtrlOutToggle
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____RRX|
#line 587
|__asm___6_usbd_c_4b498b38____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
