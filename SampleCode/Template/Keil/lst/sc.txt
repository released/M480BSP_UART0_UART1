; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\sc.crf ..\..\..\Library\StdDriver\src\sc.c]
                          THUMB

                          AREA ||i.SC_ClearFIFO||, CODE, READONLY, ALIGN=1

                  SC_ClearFIFO PROC
                  |L1.0|
;;;69       */
;;;70     void SC_ClearFIFO(SC_T *sc)
000000  6881              LDR      r1,[r0,#8]
;;;71     {
;;;72         while(sc->ALTCTL & SC_ALTCTL_SYNC_Msk)
000002  2900              CMP      r1,#0
000004  dbfc              BLT      |L1.0|
;;;73         {
;;;74             ;
;;;75         }
;;;76         sc->ALTCTL |= (SC_ALTCTL_TXRST_Msk | SC_ALTCTL_RXRST_Msk);
000006  6881              LDR      r1,[r0,#8]
000008  f0410103          ORR      r1,r1,#3
00000c  6081              STR      r1,[r0,#8]
;;;77     }
00000e  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.SC_Close||, CODE, READONLY, ALIGN=1

                  SC_Close PROC
;;;83       */
;;;84     void SC_Close(SC_T *sc)
000000  2200              MOVS     r2,#0
;;;85     {
;;;86         sc->INTEN = 0UL;
000002  6182              STR      r2,[r0,#0x18]
                  |L2.4|
;;;87         while(sc->PINCTL & SC_PINCTL_SYNC_Msk)
000004  6a41              LDR      r1,[r0,#0x24]
000006  0049              LSLS     r1,r1,#1
000008  d4fc              BMI      |L2.4|
;;;88         {
;;;89             ;
;;;90         }
;;;91         sc->PINCTL = 0UL;
00000a  6242              STR      r2,[r0,#0x24]
;;;92         sc->ALTCTL = 0UL;
00000c  6082              STR      r2,[r0,#8]
                  |L2.14|
;;;93         while(sc->CTL & SC_CTL_SYNC_Msk)
00000e  6841              LDR      r1,[r0,#4]
000010  0049              LSLS     r1,r1,#1
000012  d4fc              BMI      |L2.14|
;;;94         {
;;;95             ;
;;;96         }
;;;97         sc->CTL = 0UL;
000014  6042              STR      r2,[r0,#4]
;;;98     }
000016  4770              BX       lr
;;;99     
                          ENDP


                          AREA ||i.SC_GetInterfaceClock||, CODE, READONLY, ALIGN=2

                  SC_GetInterfaceClock PROC
;;;344      */
;;;345    uint32_t SC_GetInterfaceClock(SC_T *sc)
000000  b570              PUSH     {r4-r6,lr}
;;;346    {
;;;347        uint32_t u32ClkSrc, u32Num, u32Clk;
;;;348    
;;;349        if(sc == SC0)
000002  4918              LDR      r1,|L3.100|
000004  4288              CMP      r0,r1
000006  d101              BNE      |L3.12|
;;;350        {
;;;351            u32Num = 0UL;
000008  2400              MOVS     r4,#0
00000a  e005              B        |L3.24|
                  |L3.12|
;;;352        }
;;;353        else if(sc == SC1)
00000c  4916              LDR      r1,|L3.104|
00000e  4288              CMP      r0,r1
000010  d101              BNE      |L3.22|
;;;354        {
;;;355            u32Num = 1UL;
000012  2401              MOVS     r4,#1
000014  e000              B        |L3.24|
                  |L3.22|
;;;356        }
;;;357        else
;;;358        {
;;;359            u32Num = 2UL;
000016  2402              MOVS     r4,#2
                  |L3.24|
;;;360        }
;;;361    
;;;362        u32ClkSrc = (CLK->CLKSEL3 >> (2UL * u32Num)) & CLK_CLKSEL3_SC0SEL_Msk;
000018  f04f4580          MOV      r5,#0x40000000
00001c  f8d5021c          LDR      r0,[r5,#0x21c]
000020  0061              LSLS     r1,r4,#1
000022  40c8              LSRS     r0,r0,r1
000024  f0100103          ANDS     r1,r0,#3
;;;363    
;;;364        /* Get smartcard module clock */
;;;365        if(u32ClkSrc == 0UL)
;;;366        {
;;;367            u32Clk = __HXT;
000028  4810              LDR      r0,|L3.108|
00002a  d00b              BEQ      |L3.68|
;;;368        }
;;;369        else if(u32ClkSrc == 1UL)
00002c  2901              CMP      r1,#1
00002e  d002              BEQ      |L3.54|
;;;370        {
;;;371            u32Clk = CLK_GetPLLClockFreq();
;;;372        }
;;;373        else if(u32ClkSrc == 2UL)
000030  2902              CMP      r1,#2
000032  d003              BEQ      |L3.60|
000034  e006              B        |L3.68|
                  |L3.54|
000036  f7fffffe          BL       CLK_GetPLLClockFreq
00003a  e003              B        |L3.68|
                  |L3.60|
;;;374        {
;;;375            if(u32Num == 1UL)
00003c  2c01              CMP      r4,#1
00003e  d00e              BEQ      |L3.94|
;;;376            {
;;;377                u32Clk = CLK_GetPCLK1Freq();
;;;378            }
;;;379            else
;;;380            {
;;;381                u32Clk = CLK_GetPCLK0Freq();
000040  f7fffffe          BL       CLK_GetPCLK0Freq
                  |L3.68|
;;;382            }
;;;383        }
;;;384        else
;;;385        {
;;;386            u32Clk = __HIRC;
;;;387        }
;;;388    
;;;389        u32Clk /= (((CLK->CLKDIV1 >> (8UL * u32Num)) & CLK_CLKDIV1_SC0DIV_Msk) + 1UL) * 1000UL;
000044  f8d51224          LDR      r1,[r5,#0x224]
000048  00e2              LSLS     r2,r4,#3
00004a  40d1              LSRS     r1,r1,r2
00004c  b2c9              UXTB     r1,r1
00004e  f44f727a          MOV      r2,#0x3e8
000052  1c49              ADDS     r1,r1,#1
000054  fb11f102          SMULBB   r1,r1,r2
000058  fbb0f0f1          UDIV     r0,r0,r1
;;;390        return u32Clk;
;;;391    }
00005c  bd70              POP      {r4-r6,pc}
                  |L3.94|
00005e  f7fffffe          BL       CLK_GetPCLK1Freq
000062  e7ef              B        |L3.68|
;;;392    
                          ENDP

                  |L3.100|
                          DCD      0x40090000
                  |L3.104|
                          DCD      0x40091000
                  |L3.108|
                          DCD      0x00b71b00

                          AREA ||i.SC_IsCardInserted||, CODE, READONLY, ALIGN=2

                  SC_IsCardInserted PROC
;;;34       */
;;;35     uint32_t SC_IsCardInserted(SC_T *sc)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37         uint32_t ret;
;;;38         /* put conditions into two variable to remove IAR compilation warning */
;;;39         uint32_t cond1 = ((sc->STATUS & SC_STATUS_CDPINSTS_Msk) >> SC_STATUS_CDPINSTS_Pos);
000002  6a01              LDR      r1,[r0,#0x20]
000004  f3c13340          UBFX     r3,r1,#13,#1
;;;40         uint32_t cond2 = ((sc->CTL & SC_CTL_CDLV_Msk) >> SC_CTL_CDLV_Pos);
000008  6841              LDR      r1,[r0,#4]
;;;41     
;;;42         if((sc == SC0) && (u32CardStateIgnore[0] == 1UL))
00000a  4c0d              LDR      r4,|L4.64|
00000c  f3c16280          UBFX     r2,r1,#26,#1          ;40
000010  490c              LDR      r1,|L4.68|
000012  42a0              CMP      r0,r4
000014  d102              BNE      |L4.28|
000016  680c              LDR      r4,[r1,#0]  ; u32CardStateIgnore
000018  2c01              CMP      r4,#1
00001a  d00d              BEQ      |L4.56|
                  |L4.28|
;;;43         {
;;;44             ret = (uint32_t)TRUE;
;;;45         }
;;;46         else if((sc == SC1) && (u32CardStateIgnore[1] == 1UL))
00001c  4c0a              LDR      r4,|L4.72|
00001e  42a0              CMP      r0,r4
000020  d102              BNE      |L4.40|
000022  684c              LDR      r4,[r1,#4]  ; u32CardStateIgnore
000024  2c01              CMP      r4,#1
000026  d007              BEQ      |L4.56|
                  |L4.40|
;;;47         {
;;;48             ret = (uint32_t)TRUE;
;;;49         }
;;;50         else if((sc == SC2) && (u32CardStateIgnore[2] == 1UL))
000028  4c08              LDR      r4,|L4.76|
00002a  42a0              CMP      r0,r4
00002c  d102              BNE      |L4.52|
00002e  6888              LDR      r0,[r1,#8]  ; u32CardStateIgnore
000030  2801              CMP      r0,#1
000032  d002              BEQ      |L4.58|
                  |L4.52|
;;;51         {
;;;52             ret = (uint32_t)TRUE;
;;;53         }
;;;54         else if(cond1 != cond2)
000034  4293              CMP      r3,r2
000036  d101              BNE      |L4.60|
                  |L4.56|
000038  2001              MOVS     r0,#1                 ;44
                  |L4.58|
;;;55         {
;;;56             ret = (uint32_t)FALSE;
;;;57         }
;;;58         else
;;;59         {
;;;60             ret = (uint32_t)TRUE;
;;;61         }
;;;62         return ret;
;;;63     }
00003a  bd10              POP      {r4,pc}
                  |L4.60|
00003c  2000              MOVS     r0,#0                 ;56
00003e  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  |L4.64|
                          DCD      0x40090000
                  |L4.68|
                          DCD      ||.bss||
                  |L4.72|
                          DCD      0x40091000
                  |L4.76|
                          DCD      0x40092000

                          AREA ||i.SC_Open||, CODE, READONLY, ALIGN=2

                  SC_Open PROC
;;;111      */
;;;112    void SC_Open(SC_T *sc, uint32_t u32CardDet, uint32_t u32PWR)
000000  b570              PUSH     {r4-r6,lr}
;;;113    {
;;;114        uint32_t u32Reg = 0UL, u32Intf;
;;;115    
;;;116        if(sc == SC0)
000002  4b13              LDR      r3,|L5.80|
000004  2400              MOVS     r4,#0                 ;114
000006  4298              CMP      r0,r3
000008  d101              BNE      |L5.14|
;;;117        {
;;;118            u32Intf = 0UL;
00000a  2300              MOVS     r3,#0
00000c  e005              B        |L5.26|
                  |L5.14|
;;;119        }
;;;120        else if(sc == SC1)
00000e  4b11              LDR      r3,|L5.84|
000010  4298              CMP      r0,r3
000012  d101              BNE      |L5.24|
;;;121        {
;;;122            u32Intf = 1UL;
000014  2301              MOVS     r3,#1
000016  e000              B        |L5.26|
                  |L5.24|
;;;123        }
;;;124        else
;;;125        {
;;;126            u32Intf = 2UL;
000018  2302              MOVS     r3,#2
                  |L5.26|
;;;127        }
;;;128    
;;;129        if(u32CardDet != SC_PIN_STATE_IGNORE)
;;;130        {
;;;131            u32Reg = u32CardDet ? 0UL: SC_CTL_CDLV_Msk;
;;;132            u32CardStateIgnore[u32Intf] = 0UL;
00001a  4d0f              LDR      r5,|L5.88|
00001c  1c4e              ADDS     r6,r1,#1              ;129
00001e  d00a              BEQ      |L5.54|
000020  b109              CBZ      r1,|L5.38|
000022  2400              MOVS     r4,#0                 ;131
000024  e001              B        |L5.42|
                  |L5.38|
000026  f04f6480          MOV      r4,#0x4000000         ;131
                  |L5.42|
00002a  2100              MOVS     r1,#0
                  |L5.44|
;;;133        }
;;;134        else
;;;135        {
;;;136            u32CardStateIgnore[u32Intf] = 1UL;
00002c  f8451023          STR      r1,[r5,r3,LSL #2]
000030  b11a              CBZ      r2,|L5.58|
;;;137        }
;;;138        sc->PINCTL = u32PWR ? 0UL : SC_PINCTL_PWRINV_Msk;
000032  2100              MOVS     r1,#0
000034  e003              B        |L5.62|
                  |L5.54|
000036  2101              MOVS     r1,#1                 ;136
000038  e7f8              B        |L5.44|
                  |L5.58|
00003a  f44f6100          MOV      r1,#0x800
                  |L5.62|
00003e  6241              STR      r1,[r0,#0x24]
                  |L5.64|
;;;139        while(sc->CTL & SC_CTL_SYNC_Msk)
000040  6841              LDR      r1,[r0,#4]
000042  0049              LSLS     r1,r1,#1
000044  d4fc              BMI      |L5.64|
;;;140        {
;;;141            ;
;;;142        }
;;;143        sc->CTL = SC_CTL_SCEN_Msk | SC_CTL_TMRSEL_Msk | u32Reg;
000046  f2460101          MOV      r1,#0x6001
00004a  430c              ORRS     r4,r4,r1
00004c  6044              STR      r4,[r0,#4]
;;;144    }
00004e  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

                  |L5.80|
                          DCD      0x40090000
                  |L5.84|
                          DCD      0x40091000
                  |L5.88|
                          DCD      ||.bss||

                          AREA ||i.SC_ResetReader||, CODE, READONLY, ALIGN=2

                  SC_ResetReader PROC
;;;150      */
;;;151    void SC_ResetReader(SC_T *sc)
000000  4917              LDR      r1,|L6.96|
;;;152    {
;;;153        uint32_t u32Intf;
;;;154    
;;;155        if(sc == SC0)
000002  4288              CMP      r0,r1
000004  d101              BNE      |L6.10|
;;;156        {
;;;157            u32Intf = 0UL;
000006  2100              MOVS     r1,#0
000008  e005              B        |L6.22|
                  |L6.10|
;;;158        }
;;;159        else if(sc == SC1)
00000a  4916              LDR      r1,|L6.100|
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L6.20|
;;;160        {
;;;161            u32Intf = 1UL;
000010  2101              MOVS     r1,#1
000012  e000              B        |L6.22|
                  |L6.20|
;;;162        }
;;;163        else
;;;164        {
;;;165            u32Intf = 2UL;
000014  2102              MOVS     r1,#2
                  |L6.22|
;;;166        }
;;;167    
;;;168        /* Reset FIFO, enable auto de-activation while card removal */
;;;169        sc->ALTCTL |= (SC_ALTCTL_TXRST_Msk | SC_ALTCTL_RXRST_Msk | SC_ALTCTL_ADACEN_Msk);
000016  6882              LDR      r2,[r0,#8]
000018  f6400303          MOV      r3,#0x803
00001c  431a              ORRS     r2,r2,r3
00001e  6082              STR      r2,[r0,#8]
                  |L6.32|
;;;170        /* Set Rx trigger level to 1 character, longest card detect debounce period, disable error retry (EMV ATR does not use error retry) */
;;;171        while(sc->CTL & SC_CTL_SYNC_Msk)
000020  6842              LDR      r2,[r0,#4]
000022  0052              LSLS     r2,r2,#1
000024  d4fc              BMI      |L6.32|
;;;172        {
;;;173            ;
;;;174        }
;;;175        sc->CTL &= ~(SC_CTL_RXTRGLV_Msk |
000026  6842              LDR      r2,[r0,#4]
000028  4b0f              LDR      r3,|L6.104|
00002a  401a              ANDS     r2,r2,r3
00002c  6042              STR      r2,[r0,#4]
                  |L6.46|
;;;176                     SC_CTL_CDDBSEL_Msk |
;;;177                     SC_CTL_TXRTY_Msk |
;;;178                     SC_CTL_TXRTYEN_Msk |
;;;179                     SC_CTL_RXRTY_Msk |
;;;180                     SC_CTL_RXRTYEN_Msk);
;;;181        while(sc->CTL & SC_CTL_SYNC_Msk)
00002e  6842              LDR      r2,[r0,#4]
000030  0052              LSLS     r2,r2,#1
000032  d4fc              BMI      |L6.46|
;;;182        {
;;;183            ;
;;;184        }
;;;185        /* Enable auto convention, and all three smartcard internal timers */
;;;186        sc->CTL |= SC_CTL_AUTOCEN_Msk | SC_CTL_TMRSEL_Msk;
000034  6842              LDR      r2,[r0,#4]
000036  f2460308          MOV      r3,#0x6008
00003a  431a              ORRS     r2,r2,r3
00003c  6042              STR      r2,[r0,#4]
;;;187        /* Disable Rx timeout */
;;;188        sc->RXTOUT = 0UL;
00003e  2200              MOVS     r2,#0
000040  6102              STR      r2,[r0,#0x10]
;;;189        /* 372 clocks per ETU by default */
;;;190        sc->ETUCTL= 371UL;
000042  f2401273          MOV      r2,#0x173
000046  6142              STR      r2,[r0,#0x14]
;;;191    
;;;192    
;;;193        /* Enable necessary interrupt for smartcard operation */
;;;194        if(u32CardStateIgnore[u32Intf])  /* Do not enable card detect interrupt if card present state ignore */
000048  4a08              LDR      r2,|L6.108|
00004a  f8521021          LDR      r1,[r2,r1,LSL #2]
00004e  b111              CBZ      r1,|L6.86|
;;;195        {
;;;196            sc->INTEN = (SC_INTEN_RDAIEN_Msk |
000050  f240417d          MOV      r1,#0x47d
000054  e001              B        |L6.90|
                  |L6.86|
;;;197                         SC_INTEN_TERRIEN_Msk |
;;;198                         SC_INTEN_TMR0IEN_Msk |
;;;199                         SC_INTEN_TMR1IEN_Msk |
;;;200                         SC_INTEN_TMR2IEN_Msk |
;;;201                         SC_INTEN_BGTIEN_Msk |
;;;202                         SC_INTEN_ACERRIEN_Msk);
;;;203        }
;;;204        else
;;;205        {
;;;206            sc->INTEN = (SC_INTEN_RDAIEN_Msk |
000056  f24041fd          MOV      r1,#0x4fd
                  |L6.90|
00005a  6181              STR      r1,[r0,#0x18]         ;196
;;;207                         SC_INTEN_TERRIEN_Msk |
;;;208                         SC_INTEN_TMR0IEN_Msk |
;;;209                         SC_INTEN_TMR1IEN_Msk |
;;;210                         SC_INTEN_TMR2IEN_Msk |
;;;211                         SC_INTEN_BGTIEN_Msk |
;;;212                         SC_INTEN_CDIEN_Msk |
;;;213                         SC_INTEN_ACERRIEN_Msk);
;;;214        }
;;;215        return;
;;;216    }
00005c  4770              BX       lr
;;;217    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      0x40090000
                  |L6.100|
                          DCD      0x40091000
                  |L6.104|
                          DCD      0xfc00ff3f
                  |L6.108|
                          DCD      ||.bss||

                          AREA ||i.SC_SetBlockGuardTime||, CODE, READONLY, ALIGN=1

                  SC_SetBlockGuardTime PROC
;;;223      */
;;;224    void SC_SetBlockGuardTime(SC_T *sc, uint32_t u32BGT)
000000  6842              LDR      r2,[r0,#4]
;;;225    {
;;;226        sc->CTL = (sc->CTL & ~SC_CTL_BGT_Msk) | ((u32BGT - 1UL) << SC_CTL_BGT_Pos);
000002  f06f03ff          MVN      r3,#0xff
000006  f42252f8          BIC      r2,r2,#0x1f00
00000a  eb032101          ADD      r1,r3,r1,LSL #8
00000e  430a              ORRS     r2,r2,r1
000010  6042              STR      r2,[r0,#4]
;;;227    }
000012  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.SC_SetCharGuardTime||, CODE, READONLY, ALIGN=1

                  SC_SetCharGuardTime PROC
;;;234      */
;;;235    void SC_SetCharGuardTime(SC_T *sc, uint32_t u32CGT)
000000  6842              LDR      r2,[r0,#4]
;;;236    {
;;;237        u32CGT -= sc->CTL & SC_CTL_NSB_Msk ? 11UL: 12UL;
000002  0412              LSLS     r2,r2,#16
000004  d501              BPL      |L8.10|
000006  220b              MOVS     r2,#0xb
000008  e000              B        |L8.12|
                  |L8.10|
00000a  220c              MOVS     r2,#0xc
                  |L8.12|
00000c  1a89              SUBS     r1,r1,r2
;;;238        sc->EGT = u32CGT;
00000e  60c1              STR      r1,[r0,#0xc]
;;;239    }
000010  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||i.SC_StartTimer||, CODE, READONLY, ALIGN=1

                  SC_StartTimer PROC
;;;276      */
;;;277    void SC_StartTimer(SC_T *sc, uint32_t u32TimerNum, uint32_t u32Mode, uint32_t u32ETUCount)
000000  1e5b              SUBS     r3,r3,#1
;;;278    {
;;;279        uint32_t reg = u32Mode | (SC_TMRCTL0_CNT_Msk & (u32ETUCount - 1UL));
000002  f023437f          BIC      r3,r3,#0xff000000
000006  4313              ORRS     r3,r3,r2
                  |L9.8|
;;;280        while(sc->ALTCTL & SC_ALTCTL_SYNC_Msk)
000008  6882              LDR      r2,[r0,#8]
00000a  2a00              CMP      r2,#0
00000c  dbfc              BLT      |L9.8|
;;;281        {
;;;282            ;
;;;283        }
;;;284        if(u32TimerNum == 0UL)
00000e  b151              CBZ      r1,|L9.38|
;;;285        {
;;;286            while(sc->TMRCTL0 & SC_TMRCTL0_SYNC_Msk)
;;;287            {
;;;288                ;
;;;289            }
;;;290            sc->TMRCTL0 = reg;
;;;291            sc->ALTCTL |= SC_ALTCTL_CNTEN0_Msk;
;;;292        }
;;;293        else if(u32TimerNum == 1UL)
000010  2901              CMP      r1,#1
000012  d010              BEQ      |L9.54|
                  |L9.20|
;;;294        {
;;;295            while(sc->TMRCTL1 & SC_TMRCTL1_SYNC_Msk)
;;;296            {
;;;297                ;
;;;298            }
;;;299            sc->TMRCTL1 = reg;
;;;300            sc->ALTCTL |= SC_ALTCTL_CNTEN1_Msk;
;;;301        }
;;;302        else       /* timer 2 */
;;;303        {
;;;304            while(sc->TMRCTL2 & SC_TMRCTL2_SYNC_Msk)
000014  6b01              LDR      r1,[r0,#0x30]
000016  2900              CMP      r1,#0
000018  dbfc              BLT      |L9.20|
;;;305            {
;;;306                ;
;;;307            }
;;;308            sc->TMRCTL2 = reg;
00001a  6303              STR      r3,[r0,#0x30]
;;;309            sc->ALTCTL |= SC_ALTCTL_CNTEN2_Msk;
00001c  6881              LDR      r1,[r0,#8]
00001e  f0410180          ORR      r1,r1,#0x80
                  |L9.34|
000022  6081              STR      r1,[r0,#8]            ;291
;;;310        }
;;;311    }
000024  4770              BX       lr
                  |L9.38|
000026  6a81              LDR      r1,[r0,#0x28]         ;286
000028  2900              CMP      r1,#0                 ;286
00002a  dbfc              BLT      |L9.38|
00002c  6283              STR      r3,[r0,#0x28]         ;290
00002e  6881              LDR      r1,[r0,#8]            ;291
000030  f0410120          ORR      r1,r1,#0x20           ;291
000034  e7f5              B        |L9.34|
                  |L9.54|
000036  6ac1              LDR      r1,[r0,#0x2c]         ;295
000038  2900              CMP      r1,#0                 ;295
00003a  dbfc              BLT      |L9.54|
00003c  62c3              STR      r3,[r0,#0x2c]         ;299
00003e  6881              LDR      r1,[r0,#8]            ;300
000040  f0410140          ORR      r1,r1,#0x40           ;300
000044  e7ed              B        |L9.34|
;;;312    
                          ENDP


                          AREA ||i.SC_StopAllTimer||, CODE, READONLY, ALIGN=1

                  SC_StopAllTimer PROC
                  |L10.0|
;;;246      */
;;;247    void SC_StopAllTimer(SC_T *sc)
000000  6881              LDR      r1,[r0,#8]
;;;248    {
;;;249        while(sc->ALTCTL & SC_ALTCTL_SYNC_Msk)
000002  2900              CMP      r1,#0
000004  dbfc              BLT      |L10.0|
;;;250        {
;;;251            ;
;;;252        }
;;;253        sc->ALTCTL &= ~(SC_ALTCTL_CNTEN0_Msk | SC_ALTCTL_CNTEN1_Msk | SC_ALTCTL_CNTEN2_Msk);
000006  6881              LDR      r1,[r0,#8]
000008  f02101e0          BIC      r1,r1,#0xe0
00000c  6081              STR      r1,[r0,#8]
;;;254    }
00000e  4770              BX       lr
;;;255    
                          ENDP


                          AREA ||i.SC_StopTimer||, CODE, READONLY, ALIGN=1

                  SC_StopTimer PROC
                  |L11.0|
;;;319      */
;;;320    void SC_StopTimer(SC_T *sc, uint32_t u32TimerNum)
000000  6882              LDR      r2,[r0,#8]
;;;321    {
;;;322        while(sc->ALTCTL & SC_ALTCTL_SYNC_Msk)
000002  2a00              CMP      r2,#0
000004  dbfc              BLT      |L11.0|
;;;323        {
;;;324            ;
;;;325        }
;;;326        if(u32TimerNum == 0UL)
000006  b131              CBZ      r1,|L11.22|
;;;327        {
;;;328            sc->ALTCTL &= ~SC_ALTCTL_CNTEN0_Msk;
;;;329        }
;;;330        else if(u32TimerNum == 1UL)
000008  2901              CMP      r1,#1
;;;331        {
;;;332            sc->ALTCTL &= ~SC_ALTCTL_CNTEN1_Msk;
;;;333        }
;;;334        else        /* timer 2 */
;;;335        {
;;;336            sc->ALTCTL &= ~SC_ALTCTL_CNTEN2_Msk;
00000a  6881              LDR      r1,[r0,#8]
00000c  d007              BEQ      |L11.30|
00000e  f0210180          BIC      r1,r1,#0x80
                  |L11.18|
000012  6081              STR      r1,[r0,#8]            ;328
;;;337        }
;;;338    }
000014  4770              BX       lr
                  |L11.22|
000016  6881              LDR      r1,[r0,#8]            ;328
000018  f0210120          BIC      r1,r1,#0x20           ;328
00001c  e7f9              B        |L11.18|
                  |L11.30|
00001e  f0210140          BIC      r1,r1,#0x40           ;332
000022  e7f6              B        |L11.18|
;;;339    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  u32CardStateIgnore
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\sc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___4_sc_c_3124790d____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___4_sc_c_3124790d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___4_sc_c_3124790d____REVSH|
#line 402
|__asm___4_sc_c_3124790d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___4_sc_c_3124790d____RRX|
#line 587
|__asm___4_sc_c_3124790d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
