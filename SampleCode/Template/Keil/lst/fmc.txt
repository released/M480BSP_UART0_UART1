; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_CheckAllOne||, CODE, READONLY, ALIGN=2

                  FMC_CheckAllOne PROC
;;;850      */
;;;851    uint32_t  FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count)
000000  b530              PUSH     {r4,r5,lr}
;;;852    {
;;;853        uint32_t  ret = READ_ALLONE_CMD_FAIL;
;;;854    
;;;855        FMC->ISPSTS = 0x80UL;   /* clear check all one bit */
000002  4a12              LDR      r2,|L1.76|
000004  4604              MOV      r4,r0                 ;852
000006  2380              MOVS     r3,#0x80
000008  f04f30ff          MOV      r0,#0xffffffff        ;853
00000c  6413              STR      r3,[r2,#0x40]
;;;856    
;;;857        FMC->ISPCMD   = FMC_ISPCMD_RUN_ALL1;
00000e  2328              MOVS     r3,#0x28
000010  60d3              STR      r3,[r2,#0xc]
;;;858        FMC->ISPADDR  = u32addr;
000012  6054              STR      r4,[r2,#4]
;;;859        FMC->ISPDAT   = u32count;
000014  6091              STR      r1,[r2,#8]
;;;860        FMC->ISPTRG   = FMC_ISPTRG_ISPGO_Msk;
000016  2501              MOVS     r5,#1
000018  6115              STR      r5,[r2,#0x10]
                  |L1.26|
;;;861    
;;;862        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c11              LDR      r1,[r2,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L1.26|
;;;863    
;;;864        do
;;;865        {
;;;866            FMC->ISPCMD = FMC_ISPCMD_READ_ALL1;
000020  2308              MOVS     r3,#8
                  |L1.34|
000022  60d3              STR      r3,[r2,#0xc]
;;;867            FMC->ISPADDR    = u32addr;
000024  6054              STR      r4,[r2,#4]
;;;868            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000026  6115              STR      r5,[r2,#0x10]
                  |L1.40|
;;;869            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000028  6c11              LDR      r1,[r2,#0x40]
00002a  07c9              LSLS     r1,r1,#31
00002c  d1fc              BNE      |L1.40|
;;;870        }
;;;871        while (FMC->ISPDAT == 0UL);
00002e  6891              LDR      r1,[r2,#8]
000030  2900              CMP      r1,#0
000032  d0f6              BEQ      |L1.34|
;;;872    
;;;873        if (FMC->ISPDAT == READ_ALLONE_YES)
000034  6893              LDR      r3,[r2,#8]
000036  4906              LDR      r1,|L1.80|
000038  428b              CMP      r3,r1
00003a  d100              BNE      |L1.62|
;;;874        {
;;;875            ret = FMC->ISPDAT;
00003c  6890              LDR      r0,[r2,#8]
                  |L1.62|
;;;876        }
;;;877    
;;;878        if (FMC->ISPDAT == READ_ALLONE_NOT)
00003e  6891              LDR      r1,[r2,#8]
000040  4b04              LDR      r3,|L1.84|
000042  4299              CMP      r1,r3
000044  d100              BNE      |L1.72|
;;;879        {
;;;880            ret = FMC->ISPDAT;
000046  6890              LDR      r0,[r2,#8]
                  |L1.72|
;;;881        }
;;;882    
;;;883        return ret;
;;;884    }
000048  bd30              POP      {r4,r5,pc}
;;;885    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x4000c000
                  |L1.80|
                          DCD      0xa11fffff
                  |L1.84|
                          DCD      0xa1100000

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;31       */
;;;32     void FMC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;33     {
;;;34         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210101          BIC      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L2.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_CompareSPKey||, CODE, READONLY, ALIGN=2

                  FMC_CompareSPKey PROC
;;;988      */
;;;989    int32_t  FMC_CompareSPKey(uint32_t key[3])
000000  4911              LDR      r1,|L3.72|
;;;990    {
000002  4602              MOV      r2,r0
;;;991        uint32_t  u32KeySts;
;;;992        int32_t   ret = 0;
000004  2000              MOVS     r0,#0
;;;993    
;;;994        if (FMC->KPKEYSTS & FMC_KPKEYSTS_FORBID_Msk)
000006  6e0b              LDR      r3,[r1,#0x60]
000008  071b              LSLS     r3,r3,#28
00000a  d500              BPL      |L3.14|
;;;995        {
;;;996            /* FMC_CompareSPKey - FORBID!  */
;;;997            ret = -1;
00000c  1e40              SUBS     r0,r0,#1
                  |L3.14|
;;;998        }
;;;999    
;;;1000       if (!(FMC->KPKEYSTS & FMC_KPKEYSTS_KEYLOCK_Msk))
00000e  6e0b              LDR      r3,[r1,#0x60]
000010  079b              LSLS     r3,r3,#30
000012  d402              BMI      |L3.26|
;;;1001       {
;;;1002           /* FMC_CompareSPKey - key is not locked!  */
;;;1003           ret = -3;
000014  f06f0002          MVN      r0,#2
                  |L3.24|
;;;1004       }
;;;1005   
;;;1006       if (ret == 0)
;;;1007       {
;;;1008           FMC->KPKEY0 = key[0];
;;;1009           FMC->KPKEY1 = key[1];
;;;1010           FMC->KPKEY2 = key[2];
;;;1011           FMC->KPKEYTRG = FMC_KPKEYTRG_KPKEYGO_Msk | FMC_KPKEYTRG_TCEN_Msk;
;;;1012   
;;;1013           while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
;;;1014   
;;;1015           u32KeySts = FMC->KPKEYSTS;
;;;1016   
;;;1017           if (!(u32KeySts & FMC_KPKEYSTS_KEYMATCH_Msk))
;;;1018           {
;;;1019               /* Key mismatched! */
;;;1020               ret = -2;
;;;1021           }
;;;1022           else if (u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk)
;;;1023           {
;;;1024               /* Key matched, but still be locked! */
;;;1025               ret = -2;
;;;1026           }
;;;1027       }
;;;1028       return ret;
;;;1029   }
000018  4770              BX       lr
                  |L3.26|
00001a  2800              CMP      r0,#0                 ;1006
00001c  d1fc              BNE      |L3.24|
00001e  6813              LDR      r3,[r2,#0]            ;1008
000020  650b              STR      r3,[r1,#0x50]         ;1008
000022  6853              LDR      r3,[r2,#4]            ;1009
000024  654b              STR      r3,[r1,#0x54]         ;1009
000026  6892              LDR      r2,[r2,#8]            ;1010
000028  658a              STR      r2,[r1,#0x58]         ;1010
00002a  2203              MOVS     r2,#3                 ;1011
00002c  65ca              STR      r2,[r1,#0x5c]         ;1011
                  |L3.46|
00002e  6e0a              LDR      r2,[r1,#0x60]         ;1013
000030  07d2              LSLS     r2,r2,#31             ;1013
000032  d1fc              BNE      |L3.46|
000034  6e09              LDR      r1,[r1,#0x60]         ;1015
000036  f06f0301          MVN      r3,#1                 ;1020
00003a  074a              LSLS     r2,r1,#29             ;1017
00003c  d501              BPL      |L3.66|
00003e  0789              LSLS     r1,r1,#30             ;1022
000040  d5ea              BPL      |L3.24|
                  |L3.66|
000042  4618              MOV      r0,r3                 ;1020
000044  4770              BX       lr
;;;1030   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x4000c000

                          AREA ||i.FMC_ConfigXOM||, CODE, READONLY, ALIGN=2

                  FMC_ConfigXOM PROC
;;;49       */
;;;50     int32_t FMC_ConfigXOM(uint32_t u32XomNum, uint32_t u32XomBase, uint8_t u8XomPage)
000000  b5f0              PUSH     {r4-r7,lr}
;;;51     {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  4603              MOV      r3,r0
;;;52         int32_t  ret = 0;
;;;53     
;;;54         if(u32XomNum >= 4UL)
000008  2804              CMP      r0,#4
00000a  d302              BCC      |L4.18|
;;;55         {
;;;56             ret = -2;
00000c  f06f0001          MVN      r0,#1
                  |L4.16|
;;;57         }
;;;58     
;;;59         if(ret == 0)
;;;60         {
;;;61             ret = FMC_GetXOMState(u32XomNum);
;;;62         }
;;;63     
;;;64         if(ret == 0)
;;;65         {
;;;66             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;67             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u);
;;;68             FMC->ISPDAT = u32XomBase;
;;;69             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;70             while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;71     
;;;72             if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;73             {
;;;74                 FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;75                 ret = -1;
;;;76             }
;;;77         }
;;;78     
;;;79         if(ret == 0)
;;;80         {
;;;81             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;82             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x04u);
;;;83             FMC->ISPDAT = u8XomPage;
;;;84             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;85             while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;86     
;;;87             if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;88             {
;;;89                 FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;90                 ret = -1;
;;;91             }
;;;92         }
;;;93     
;;;94         if(ret == 0)
;;;95         {
;;;96             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;97             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x08u);
;;;98             FMC->ISPDAT = 0u;
;;;99             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;100            while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;101    
;;;102            if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;103            {
;;;104                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;105                ret = -1;
;;;106            }
;;;107        }
;;;108    
;;;109        return ret;
;;;110    }
000010  bdf0              POP      {r4-r7,pc}
                  |L4.18|
000012  f7fffffe          BL       FMC_GetXOMState
000016  2800              CMP      r0,#0                 ;61
000018  d1fa              BNE      |L4.16|
00001a  4c1c              LDR      r4,|L4.140|
00001c  2721              MOVS     r7,#0x21              ;66
00001e  60e7              STR      r7,[r4,#0xc]          ;66
000020  f44f1100          MOV      r1,#0x200000          ;67
000024  eb011103          ADD      r1,r1,r3,LSL #4       ;67
000028  6061              STR      r1,[r4,#4]            ;67
00002a  60a6              STR      r6,[r4,#8]            ;68
00002c  2601              MOVS     r6,#1                 ;69
00002e  6126              STR      r6,[r4,#0x10]         ;69
                  |L4.48|
000030  6921              LDR      r1,[r4,#0x10]         ;70
000032  07c9              LSLS     r1,r1,#31             ;70
000034  d1fc              BNE      |L4.48|
000036  6c21              LDR      r1,[r4,#0x40]         ;72
000038  f04f32ff          MOV      r2,#0xffffffff        ;75
00003c  0649              LSLS     r1,r1,#25             ;72
00003e  d41f              BMI      |L4.128|
000040  2800              CMP      r0,#0                 ;79
000042  d1e5              BNE      |L4.16|
000044  60e7              STR      r7,[r4,#0xc]          ;81
000046  4912              LDR      r1,|L4.144|
000048  eb011103          ADD      r1,r1,r3,LSL #4       ;82
00004c  6061              STR      r1,[r4,#4]            ;82
00004e  60a5              STR      r5,[r4,#8]            ;83
000050  6126              STR      r6,[r4,#0x10]         ;84
                  |L4.82|
000052  6921              LDR      r1,[r4,#0x10]         ;85
000054  07c9              LSLS     r1,r1,#31             ;85
000056  d1fc              BNE      |L4.82|
000058  6c21              LDR      r1,[r4,#0x40]         ;87
00005a  0649              LSLS     r1,r1,#25             ;87
00005c  d410              BMI      |L4.128|
00005e  2800              CMP      r0,#0                 ;94
000060  d1d6              BNE      |L4.16|
000062  60e7              STR      r7,[r4,#0xc]          ;96
000064  490a              LDR      r1,|L4.144|
000066  1d09              ADDS     r1,r1,#4              ;97
000068  eb011103          ADD      r1,r1,r3,LSL #4       ;97
00006c  6061              STR      r1,[r4,#4]            ;97
00006e  2100              MOVS     r1,#0                 ;98
000070  60a1              STR      r1,[r4,#8]            ;98
000072  6126              STR      r6,[r4,#0x10]         ;99
                  |L4.116|
000074  6921              LDR      r1,[r4,#0x10]         ;100
000076  07c9              LSLS     r1,r1,#31             ;100
000078  d1fc              BNE      |L4.116|
00007a  6c21              LDR      r1,[r4,#0x40]         ;102
00007c  0649              LSLS     r1,r1,#25             ;102
00007e  d5c7              BPL      |L4.16|
                  |L4.128|
000080  6c20              LDR      r0,[r4,#0x40]         ;104
000082  f0400040          ORR      r0,r0,#0x40           ;104
000086  6420              STR      r0,[r4,#0x40]         ;104
000088  4610              MOV      r0,r2                 ;105
00008a  bdf0              POP      {r4-r7,pc}
;;;111    
                          ENDP

                  |L4.140|
                          DCD      0x4000c000
                  |L4.144|
                          DCD      0x00200004

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;119      */
;;;120    int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4603              MOV      r3,r0
;;;121    {
000002  b500              PUSH     {lr}
;;;122        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;123    
;;;124        if (u32PageAddr == FMC_SPROM_BASE)
000006  f5b31f00          CMP      r3,#0x200000
00000a  d103              BNE      |L5.20|
;;;125        {
;;;126            ret = FMC_Erase_SPROM();
00000c  f7fffffe          BL       FMC_Erase_SPROM
000010  2800              CMP      r0,#0
000012  d111              BNE      |L5.56|
                  |L5.20|
;;;127        }
;;;128    
;;;129        if (ret == 0)
;;;130        {
;;;131            FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000014  4909              LDR      r1,|L5.60|
000016  2222              MOVS     r2,#0x22
000018  60ca              STR      r2,[r1,#0xc]
;;;132            FMC->ISPADDR = u32PageAddr;
00001a  604b              STR      r3,[r1,#4]
;;;133            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001c  2201              MOVS     r2,#1
00001e  610a              STR      r2,[r1,#0x10]
                  |L5.32|
;;;134    
;;;135            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000020  690a              LDR      r2,[r1,#0x10]
000022  07d2              LSLS     r2,r2,#31
000024  d1fc              BNE      |L5.32|
;;;136    
;;;137            if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000026  680a              LDR      r2,[r1,#0]
000028  0652              LSLS     r2,r2,#25
00002a  d505              BPL      |L5.56|
;;;138            {
;;;139                FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00002c  6808              LDR      r0,[r1,#0]
00002e  f0400040          ORR      r0,r0,#0x40
000032  6008              STR      r0,[r1,#0]
;;;140                ret = -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L5.56|
;;;141            }
;;;142        }
;;;143        return ret;
;;;144    }
000038  bd00              POP      {pc}
;;;145    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_EraseXOM||, CODE, READONLY, ALIGN=2

                  FMC_EraseXOM PROC
;;;234      */
;;;235    int32_t FMC_EraseXOM(uint32_t u32XomNum)
000000  b530              PUSH     {r4,r5,lr}
;;;236    {
;;;237        uint32_t u32Addr;
;;;238        int32_t i32Active, err = 0;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;236
;;;239    
;;;240        if(u32XomNum >= 4UL)
000006  2804              CMP      r0,#4
000008  d301              BCC      |L6.14|
;;;241        {
;;;242            err = -2;
00000a  1ead              SUBS     r5,r5,#2
00000c  e025              B        |L6.90|
                  |L6.14|
;;;243        }
;;;244    
;;;245        if(err == 0)
;;;246        {
;;;247            i32Active = FMC_GetXOMState(u32XomNum);
00000e  f7fffffe          BL       FMC_GetXOMState
;;;248    
;;;249            if(i32Active)
;;;250            {
;;;251                switch(u32XomNum)
;;;252                {
;;;253                case 0u:
;;;254                    u32Addr = (FMC->XOMR0STS & 0xFFFFFF00u) >> 8u;
;;;255                    break;
;;;256                case 1u:
;;;257                    u32Addr = (FMC->XOMR1STS & 0xFFFFFF00u) >> 8u;
;;;258                    break;
;;;259                case 2u:
;;;260                    u32Addr = (FMC->XOMR2STS & 0xFFFFFF00u) >> 8u;
;;;261                    break;
;;;262                case 3u:
;;;263                    u32Addr = (FMC->XOMR3STS & 0xFFFFFF00u) >> 8u;
;;;264                    break;
;;;265                default:
;;;266                    break;
;;;267                }
;;;268                FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
;;;269                FMC->ISPADDR = u32Addr;
;;;270                FMC->ISPDAT = 0x55aa03u;
;;;271                FMC->ISPTRG = 0x1u;
;;;272    #if ISBEN
;;;273                __ISB();
;;;274    #endif
;;;275                while(FMC->ISPTRG) {}
;;;276    
;;;277                /* Check ISPFF flag to know whether erase OK or fail. */
;;;278                if(FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;279                {
;;;280                    FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;281                    err = -1;
000012  f04f32ff          MOV      r2,#0xffffffff
000016  b1f8              CBZ      r0,|L6.88|
000018  4814              LDR      r0,|L6.108|
00001a  b134              CBZ      r4,|L6.42|
00001c  2c01              CMP      r4,#1                 ;251
00001e  d007              BEQ      |L6.48|
000020  2c02              CMP      r4,#2                 ;251
000022  d01c              BEQ      |L6.94|
000024  2c03              CMP      r4,#3                 ;251
000026  d106              BNE      |L6.54|
000028  e01c              B        |L6.100|
                  |L6.42|
00002a  f8d010d0          LDR      r1,[r0,#0xd0]         ;254
00002e  e001              B        |L6.52|
                  |L6.48|
000030  f8d010d4          LDR      r1,[r0,#0xd4]         ;257
                  |L6.52|
000034  0a0b              LSRS     r3,r1,#8              ;254
                  |L6.54|
000036  2122              MOVS     r1,#0x22              ;268
000038  60c1              STR      r1,[r0,#0xc]          ;268
00003a  6043              STR      r3,[r0,#4]            ;269
00003c  490c              LDR      r1,|L6.112|
00003e  6081              STR      r1,[r0,#8]            ;270
000040  2101              MOVS     r1,#1                 ;271
000042  6101              STR      r1,[r0,#0x10]         ;271
                  |L6.68|
000044  6901              LDR      r1,[r0,#0x10]         ;275
000046  2900              CMP      r1,#0                 ;275
000048  d1fc              BNE      |L6.68|
00004a  6801              LDR      r1,[r0,#0]            ;278
00004c  0649              LSLS     r1,r1,#25             ;278
00004e  d504              BPL      |L6.90|
000050  6801              LDR      r1,[r0,#0]            ;280
000052  f0410140          ORR      r1,r1,#0x40           ;280
000056  6001              STR      r1,[r0,#0]            ;280
                  |L6.88|
;;;282                }
;;;283            }
;;;284            else
;;;285            {
;;;286                err = -1;
000058  4615              MOV      r5,r2
                  |L6.90|
;;;287            }
;;;288        }
;;;289        return err;
00005a  4628              MOV      r0,r5
;;;290    }
00005c  bd30              POP      {r4,r5,pc}
                  |L6.94|
00005e  f8d010d8          LDR      r1,[r0,#0xd8]         ;260
000062  e7e7              B        |L6.52|
                  |L6.100|
000064  f8d010dc          LDR      r1,[r0,#0xdc]         ;263
000068  e7e4              B        |L6.52|
;;;291    
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      0x4000c000
                  |L6.112|
                          DCD      0x0055aa03

                          AREA ||i.FMC_Erase_Bank||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Bank PROC
;;;204      */
;;;205    int32_t FMC_Erase_Bank(uint32_t u32BankAddr)
000000  4602              MOV      r2,r0
;;;206    {
;;;207        int32_t  ret = 0;
;;;208    
;;;209        FMC->ISPCMD = FMC_ISPCMD_BANK_ERASE;
000002  490a              LDR      r1,|L7.44|
000004  2000              MOVS     r0,#0                 ;207
000006  2323              MOVS     r3,#0x23
000008  60cb              STR      r3,[r1,#0xc]
;;;210        FMC->ISPADDR = u32BankAddr;
00000a  604a              STR      r2,[r1,#4]
;;;211        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L7.16|
;;;212    
;;;213        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L7.16|
;;;214    
;;;215        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L7.40|
;;;216        {
;;;217            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;218            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L7.40|
;;;219        }
;;;220        return ret;
;;;221    }
000028  4770              BX       lr
;;;222    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_Block||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Block PROC
;;;179      */
;;;180    int32_t FMC_Erase_Block(uint32_t u32BlockAddr)
000000  4602              MOV      r2,r0
;;;181    {
;;;182        int32_t  ret = 0;
;;;183    
;;;184        FMC->ISPCMD = FMC_ISPCMD_BLOCK_ERASE;
000002  490a              LDR      r1,|L8.44|
000004  2000              MOVS     r0,#0                 ;182
000006  2325              MOVS     r3,#0x25
000008  60cb              STR      r3,[r1,#0xc]
;;;185        FMC->ISPADDR = u32BlockAddr;
00000a  604a              STR      r2,[r1,#4]
;;;186        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L8.16|
;;;187    
;;;188        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L8.16|
;;;189    
;;;190        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L8.40|
;;;191        {
;;;192            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;193            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L8.40|
;;;194        }
;;;195        return ret;
;;;196    }
000028  4770              BX       lr
;;;197    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;152      */
;;;153    int32_t FMC_Erase_SPROM(void)
000000  490b              LDR      r1,|L9.48|
;;;154    {
;;;155        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;156    
;;;157        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000004  2222              MOVS     r2,#0x22
000006  60ca              STR      r2,[r1,#0xc]
;;;158        FMC->ISPADDR = FMC_SPROM_BASE;
000008  f44f1200          MOV      r2,#0x200000
00000c  604a              STR      r2,[r1,#4]
;;;159        FMC->ISPDAT = 0x0055AA03UL;
00000e  4a09              LDR      r2,|L9.52|
000010  608a              STR      r2,[r1,#8]
;;;160        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L9.22|
;;;161    
;;;162        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L9.22|
;;;163    
;;;164        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L9.46|
;;;165        {
;;;166            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  f0400040          ORR      r0,r0,#0x40
000028  6008              STR      r0,[r1,#0]
;;;167            ret = -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L9.46|
;;;168        }
;;;169        return ret;
;;;170    }
00002e  4770              BX       lr
;;;171    
                          ENDP

                  |L9.48|
                          DCD      0x4000c000
                  |L9.52|
                          DCD      0x0055aa03

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;327      */
;;;328    int32_t FMC_GetBootSource (void)
000000  4806              LDR      r0,|L10.28|
;;;329    {
;;;330        if (FMC->ISPCTL & FMC_ISPCTL_BL_Msk)
000002  6801              LDR      r1,[r0,#0]
000004  03c9              LSLS     r1,r1,#15
000006  d501              BPL      |L10.12|
;;;331        {
;;;332            return 2;
000008  2002              MOVS     r0,#2
;;;333        }
;;;334        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
;;;335        {
;;;336            return 1;
;;;337        }
;;;338        return 0;
;;;339    }
00000a  4770              BX       lr
                  |L10.12|
00000c  6800              LDR      r0,[r0,#0]            ;334
00000e  0780              LSLS     r0,r0,#30             ;334
000010  d501              BPL      |L10.22|
000012  2001              MOVS     r0,#1                 ;336
000014  4770              BX       lr
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;338
000018  4770              BX       lr
;;;340    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;812      */
;;;813    uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  ea400201          ORR      r2,r0,r1
;;;814    {
;;;815        uint32_t   ret;
;;;816    
;;;817        if ((u32addr % 512UL) || (u32count % 512UL))
000004  05d2              LSLS     r2,r2,#23
000006  d002              BEQ      |L11.14|
;;;818        {
;;;819            ret = 0xFFFFFFFF;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;820        }
;;;821        else
;;;822        {
;;;823            FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;824            FMC->ISPADDR = u32addr;
;;;825            FMC->ISPDAT  = u32count;
;;;826            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;827    
;;;828            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;829    
;;;830            FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;831            FMC->ISPADDR    = u32addr;
;;;832            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;833    
;;;834            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;835    
;;;836            ret = FMC->ISPDAT;
;;;837        }
;;;838    
;;;839        return ret;
;;;840    }
00000c  4770              BX       lr
                  |L11.14|
00000e  4a09              LDR      r2,|L11.52|
000010  232d              MOVS     r3,#0x2d              ;823
000012  60d3              STR      r3,[r2,#0xc]          ;823
000014  6050              STR      r0,[r2,#4]            ;824
000016  6091              STR      r1,[r2,#8]            ;825
000018  2301              MOVS     r3,#1                 ;826
00001a  6113              STR      r3,[r2,#0x10]         ;826
                  |L11.28|
00001c  6c11              LDR      r1,[r2,#0x40]         ;828
00001e  07c9              LSLS     r1,r1,#31             ;828
000020  d1fc              BNE      |L11.28|
000022  210d              MOVS     r1,#0xd               ;830
000024  60d1              STR      r1,[r2,#0xc]          ;830
000026  6050              STR      r0,[r2,#4]            ;831
000028  6113              STR      r3,[r2,#0x10]         ;832
                  |L11.42|
00002a  6c10              LDR      r0,[r2,#0x40]         ;834
00002c  07c0              LSLS     r0,r0,#31             ;834
00002e  d1fc              BNE      |L11.42|
000030  6890              LDR      r0,[r2,#8]            ;836
000032  4770              BX       lr
;;;841    
                          ENDP

                  |L11.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetXOMState||, CODE, READONLY, ALIGN=2

                  FMC_GetXOMState PROC
;;;302      */
;;;303    int32_t FMC_GetXOMState(uint32_t u32XomNum)
000000  4601              MOV      r1,r0
;;;304    {
;;;305        uint32_t u32act;
;;;306        int32_t  ret = 0;
;;;307    
;;;308        if(u32XomNum >= 4UL)
000002  2804              CMP      r0,#4
000004  d302              BCC      |L12.12|
;;;309        {
;;;310            ret = -2;
000006  f06f0001          MVN      r0,#1
;;;311        }
;;;312    
;;;313        if(ret >= 0)
;;;314        {
;;;315            u32act = (((FMC->XOMSTS) & 0xful) & (1ul << u32XomNum)) >> u32XomNum;
;;;316            ret = (int32_t)u32act;
;;;317        }
;;;318        return ret;
;;;319    }
00000a  4770              BX       lr
                  |L12.12|
00000c  4804              LDR      r0,|L12.32|
00000e  f8d000e0          LDR      r0,[r0,#0xe0]         ;315
000012  2201              MOVS     r2,#1                 ;315
000014  408a              LSLS     r2,r2,r1              ;315
000016  f002020f          AND      r2,r2,#0xf            ;315
00001a  4010              ANDS     r0,r0,r2              ;315
00001c  40c8              LSRS     r0,r0,r1              ;315
00001e  4770              BX       lr
;;;320    
                          ENDP

                  |L12.32|
                          DCD      0x4000c000

                          AREA ||i.FMC_Is_OTP_Locked||, CODE, READONLY, ALIGN=2

                  FMC_Is_OTP_Locked PROC
;;;705      */
;;;706    int32_t FMC_Is_OTP_Locked(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;707    {
;;;708        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;709    
;;;710        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L13.12|
;;;711        {
;;;712            ret = -2;
000008  1e80              SUBS     r0,r0,#2
;;;713        }
;;;714    
;;;715        if (ret == 0)
;;;716        {
;;;717            FMC->ISPCMD = FMC_ISPCMD_READ;
;;;718            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;719            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;720    
;;;721            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;722    
;;;723            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;724            {
;;;725                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;726                ret = -1;
;;;727            }
;;;728            else
;;;729            {
;;;730                if (FMC->ISPDAT != 0xFFFFFFFFUL)
;;;731                {
;;;732                    ret = 1;   /* Lock work was progrmmed. OTP was locked. */
;;;733                }
;;;734            }
;;;735        }
;;;736        return ret;
;;;737    }
00000a  4770              BX       lr
                  |L13.12|
00000c  490d              LDR      r1,|L13.68|
00000e  2300              MOVS     r3,#0                 ;717
000010  60cb              STR      r3,[r1,#0xc]          ;717
000012  4b0d              LDR      r3,|L13.72|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;718
000018  604a              STR      r2,[r1,#4]            ;718
00001a  2201              MOVS     r2,#1                 ;719
00001c  610a              STR      r2,[r1,#0x10]         ;719
                  |L13.30|
00001e  690a              LDR      r2,[r1,#0x10]         ;721
000020  07d2              LSLS     r2,r2,#31             ;721
000022  d1fc              BNE      |L13.30|
000024  6c0a              LDR      r2,[r1,#0x40]         ;723
000026  0652              LSLS     r2,r2,#25             ;723
000028  d506              BPL      |L13.56|
00002a  6c08              LDR      r0,[r1,#0x40]         ;725
00002c  f0400040          ORR      r0,r0,#0x40           ;725
000030  6408              STR      r0,[r1,#0x40]         ;725
000032  f04f30ff          MOV      r0,#0xffffffff        ;726
                  |L13.54|
000036  4770              BX       lr
                  |L13.56|
000038  6889              LDR      r1,[r1,#8]            ;730
00003a  1c49              ADDS     r1,r1,#1              ;730
00003c  d0fb              BEQ      |L13.54|
00003e  2001              MOVS     r0,#1                 ;732
000040  4770              BX       lr
;;;738    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x4000c000
                  |L13.72|
                          DCD      0x00310800

                          AREA ||i.FMC_Lock_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Lock_OTP PROC
;;;670      */
;;;671    int32_t FMC_Lock_OTP(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;672    {
;;;673        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;674    
;;;675        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L14.12|
;;;676        {
;;;677            ret = -2;
000008  1e80              SUBS     r0,r0,#2
                  |L14.10|
;;;678        }
;;;679    
;;;680        if (ret == 0)
;;;681        {
;;;682            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;683            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;684            FMC->ISPDAT = 0UL;
;;;685            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;686    
;;;687            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;688    
;;;689            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;690            {
;;;691                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;692                ret = -1;
;;;693            }
;;;694        }
;;;695        return ret;
;;;696    }
00000a  4770              BX       lr
                  |L14.12|
00000c  490b              LDR      r1,|L14.60|
00000e  2321              MOVS     r3,#0x21              ;682
000010  60cb              STR      r3,[r1,#0xc]          ;682
000012  4b0b              LDR      r3,|L14.64|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;683
000018  604a              STR      r2,[r1,#4]            ;683
00001a  2200              MOVS     r2,#0                 ;684
00001c  608a              STR      r2,[r1,#8]            ;684
00001e  2201              MOVS     r2,#1                 ;685
000020  610a              STR      r2,[r1,#0x10]         ;685
                  |L14.34|
000022  690a              LDR      r2,[r1,#0x10]         ;687
000024  07d2              LSLS     r2,r2,#31             ;687
000026  d1fc              BNE      |L14.34|
000028  6c0a              LDR      r2,[r1,#0x40]         ;689
00002a  0652              LSLS     r2,r2,#25             ;689
00002c  d5ed              BPL      |L14.10|
00002e  6c08              LDR      r0,[r1,#0x40]         ;691
000030  f0400040          ORR      r0,r0,#0x40           ;691
000034  6408              STR      r0,[r1,#0x40]         ;691
000036  f04f30ff          MOV      r0,#0xffffffff        ;692
00003a  4770              BX       lr
;;;697    
                          ENDP

                  |L14.60|
                          DCD      0x4000c000
                  |L14.64|
                          DCD      0x00310800

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;345      */
;;;346    void FMC_Open(void)
000000  4802              LDR      r0,|L15.12|
;;;347    {
;;;348        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;349    }
00000a  4770              BX       lr
;;;350    
                          ENDP

                  |L15.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;357      */
;;;358    uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L16.24|
;;;359    {
;;;360        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;361        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;362        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
                  |L16.12|
;;;363        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000c  6908              LDR      r0,[r1,#0x10]
00000e  07c0              LSLS     r0,r0,#31
000010  d1fc              BNE      |L16.12|
;;;364    
;;;365        return FMC->ISPDAT;
000012  6888              LDR      r0,[r1,#8]
;;;366    }
000014  4770              BX       lr
;;;367    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;747      */
;;;748    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;749    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;750        int32_t   ret = 0;
000006  2300              MOVS     r3,#0
;;;751    
;;;752        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000008  f44f1040          MOV      r0,#0x300000
00000c  f7fffffe          BL       FMC_Read
;;;753    
;;;754        if (u32Count < 2UL)
000010  6020              STR      r0,[r4,#0]
000012  2d02              CMP      r5,#2
000014  d202              BCS      |L17.28|
;;;755        {
;;;756            ret = -1;
000016  f04f33ff          MOV      r3,#0xffffffff
00001a  e003              B        |L17.36|
                  |L17.28|
;;;757        }
;;;758        else
;;;759        {
;;;760            u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
00001c  4802              LDR      r0,|L17.40|
00001e  f7fffffe          BL       FMC_Read
000022  6060              STR      r0,[r4,#4]
                  |L17.36|
;;;761        }
;;;762        return ret;
000024  4618              MOV      r0,r3
;;;763    }
000026  bd30              POP      {r4,r5,pc}
;;;764    
                          ENDP

                  |L17.40|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;406      */
;;;407    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L18.8|
;;;408    {
;;;409        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;410    }
000004  4770              BX       lr
;;;411    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_64||, CODE, READONLY, ALIGN=2

                  FMC_Read_64 PROC
;;;377      */
;;;378    int32_t FMC_Read_64(uint32_t u32addr, uint32_t * u32data0, uint32_t * u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;379    {
000002  4604              MOV      r4,r0
;;;380        int32_t  ret = 0;
;;;381    
;;;382        FMC->ISPCMD = FMC_ISPCMD_READ_64;
000004  4b0d              LDR      r3,|L19.60|
000006  2000              MOVS     r0,#0                 ;380
000008  2540              MOVS     r5,#0x40
00000a  60dd              STR      r5,[r3,#0xc]
;;;383        FMC->ISPADDR    = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;384        FMC->ISPDAT = 0x0UL;
00000e  6098              STR      r0,[r3,#8]
;;;385        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000010  2401              MOVS     r4,#1
000012  611c              STR      r4,[r3,#0x10]
                  |L19.20|
;;;386    
;;;387        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000014  6c1c              LDR      r4,[r3,#0x40]
000016  07e4              LSLS     r4,r4,#31
000018  d1fc              BNE      |L19.20|
;;;388    
;;;389        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
00001a  6c1c              LDR      r4,[r3,#0x40]
00001c  0664              LSLS     r4,r4,#25
00001e  d506              BPL      |L19.46|
;;;390        {
;;;391            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000020  6c18              LDR      r0,[r3,#0x40]
000022  f0400040          ORR      r0,r0,#0x40
000026  6418              STR      r0,[r3,#0x40]
;;;392            ret = -1;
000028  f04f30ff          MOV      r0,#0xffffffff
;;;393        }
;;;394        else
;;;395        {
;;;396            *u32data0 = FMC->MPDAT0;
;;;397            *u32data1 = FMC->MPDAT1;
;;;398        }
;;;399        return ret;
;;;400    }
00002c  bd30              POP      {r4,r5,pc}
                  |L19.46|
00002e  f8534f80          LDR      r4,[r3,#0x80]!        ;396
000032  600c              STR      r4,[r1,#0]            ;397
000034  6859              LDR      r1,[r3,#4]            ;397
000036  6011              STR      r1,[r2,#0]            ;397
000038  bd30              POP      {r4,r5,pc}
;;;401    
                          ENDP

00003a  0000              DCW      0x0000
                  |L19.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Read_OTP PROC
;;;631      */
;;;632    int32_t FMC_Read_OTP(uint32_t otp_num, uint32_t *low_word, uint32_t *high_word)
000000  b530              PUSH     {r4,r5,lr}
;;;633    {
000002  4604              MOV      r4,r0
;;;634        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;635    
;;;636        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L20.14|
;;;637        {
;;;638            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
;;;639        }
;;;640    
;;;641        if (ret == 0)
;;;642        {
;;;643            FMC->ISPCMD = FMC_ISPCMD_READ_64;
;;;644            FMC->ISPADDR    = FMC_OTP_BASE + otp_num * 8UL ;
;;;645            FMC->ISPDAT = 0x0UL;
;;;646            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;647    
;;;648            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;649    
;;;650            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;651            {
;;;652                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;653                ret = -1;
;;;654            }
;;;655            else
;;;656            {
;;;657                *low_word = FMC->MPDAT0;
;;;658                *high_word = FMC->MPDAT1;
;;;659            }
;;;660        }
;;;661        return ret;
;;;662    }
00000c  bd30              POP      {r4,r5,pc}
                  |L20.14|
00000e  4b0f              LDR      r3,|L20.76|
000010  2540              MOVS     r5,#0x40              ;643
000012  60dd              STR      r5,[r3,#0xc]          ;643
000014  f44f1544          MOV      r5,#0x310000          ;644
000018  eb0504c4          ADD      r4,r5,r4,LSL #3       ;644
00001c  605c              STR      r4,[r3,#4]            ;644
00001e  2400              MOVS     r4,#0                 ;645
000020  609c              STR      r4,[r3,#8]            ;645
000022  2401              MOVS     r4,#1                 ;646
000024  611c              STR      r4,[r3,#0x10]         ;646
                  |L20.38|
000026  6c1c              LDR      r4,[r3,#0x40]         ;648
000028  07e4              LSLS     r4,r4,#31             ;648
00002a  d1fc              BNE      |L20.38|
00002c  6c1c              LDR      r4,[r3,#0x40]         ;650
00002e  0664              LSLS     r4,r4,#25             ;650
000030  d506              BPL      |L20.64|
000032  6c18              LDR      r0,[r3,#0x40]         ;652
000034  f0400040          ORR      r0,r0,#0x40           ;652
000038  6418              STR      r0,[r3,#0x40]         ;652
00003a  f04f30ff          MOV      r0,#0xffffffff        ;653
00003e  bd30              POP      {r4,r5,pc}
                  |L20.64|
000040  f8534f80          LDR      r4,[r3,#0x80]!        ;657
000044  600c              STR      r4,[r1,#0]            ;658
000046  6859              LDR      r1,[r3,#4]            ;658
000048  6011              STR      r1,[r2,#0]            ;658
00004a  bd30              POP      {r4,r5,pc}
;;;663    
                          ENDP

                  |L20.76|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;421      */
;;;422    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4905              LDR      r1,|L21.24|
;;;423    {
;;;424        if(i32BootSrc)
000002  2800              CMP      r0,#0
;;;425        {
;;;426            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
;;;427        }
;;;428        else
;;;429        {
;;;430            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L21.14|
000008  f0400002          ORR      r0,r0,#2              ;426
00000c  e001              B        |L21.18|
                  |L21.14|
00000e  f0200002          BIC      r0,r0,#2
                  |L21.18|
000012  6008              STR      r0,[r1,#0]            ;426
;;;431        }
;;;432    }
000014  4770              BX       lr
;;;433    
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetSPKey||, CODE, READONLY, ALIGN=2

                  FMC_SetSPKey PROC
;;;903      */
;;;904    int32_t  FMC_SetSPKey(uint32_t key[3], uint32_t kpmax, uint32_t kemax,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;905                          const int32_t lock_CONFIG, const int32_t lock_SPROM)
;;;906    {
;;;907        uint32_t  lock_ctrl = 0UL;
;;;908        uint32_t  u32KeySts;
;;;909        int32_t   ret = 0;
;;;910    
;;;911        if (FMC->KPKEYSTS != 0x200UL)
000004  f8df90e8          LDR      r9,|L22.240|
000008  4607              MOV      r7,r0                 ;906
00000a  2500              MOVS     r5,#0                 ;907
00000c  f8dd8024          LDR      r8,[sp,#0x24]
000010  f8d90060          LDR      r0,[r9,#0x60]
000014  461e              MOV      r6,r3                 ;906
000016  4692              MOV      r10,r2                ;906
000018  468b              MOV      r11,r1                ;906
00001a  462c              MOV      r4,r5                 ;909
00001c  f5b07f00          CMP      r0,#0x200
000020  d000              BEQ      |L22.36|
;;;912        {
;;;913            ret = -1;
000022  1e6c              SUBS     r4,r5,#1
                  |L22.36|
;;;914        }
;;;915    
;;;916        if (FMC_Erase(FMC_KPROM_BASE))
000024  4833              LDR      r0,|L22.244|
000026  f7fffffe          BL       FMC_Erase
00002a  b108              CBZ      r0,|L22.48|
;;;917        {
;;;918            ret = -2;
00002c  f06f0401          MVN      r4,#1
                  |L22.48|
;;;919        }
;;;920    
;;;921        if (FMC_Erase(FMC_KPROM_BASE+0x200UL))
000030  4831              LDR      r0,|L22.248|
000032  f7fffffe          BL       FMC_Erase
000036  b108              CBZ      r0,|L22.60|
;;;922        {
;;;923            ret = -3;
000038  f06f0402          MVN      r4,#2
                  |L22.60|
;;;924        }
;;;925    
;;;926        if (!lock_CONFIG)
00003c  b906              CBNZ     r6,|L22.64|
;;;927        {
;;;928            lock_ctrl |= 0x1UL;
00003e  2501              MOVS     r5,#1
                  |L22.64|
;;;929        }
;;;930    
;;;931        if (!lock_SPROM)
000040  f1b80f00          CMP      r8,#0
000044  d101              BNE      |L22.74|
;;;932        {
;;;933            lock_ctrl |= 0x2UL;
000046  f0450502          ORR      r5,r5,#2
                  |L22.74|
;;;934        }
;;;935    
;;;936        if (ret == 0)
00004a  bb2c              CBNZ     r4,|L22.152|
;;;937        {
;;;938            FMC_Write(FMC_KPROM_BASE, key[0]);
00004c  4829              LDR      r0,|L22.244|
00004e  6839              LDR      r1,[r7,#0]
000050  f7fffffe          BL       FMC_Write
;;;939            FMC_Write(FMC_KPROM_BASE+0x4UL, key[1]);
000054  4827              LDR      r0,|L22.244|
000056  6879              LDR      r1,[r7,#4]
000058  1d00              ADDS     r0,r0,#4
00005a  f7fffffe          BL       FMC_Write
;;;940            FMC_Write(FMC_KPROM_BASE+0x8UL, key[2]);
00005e  4825              LDR      r0,|L22.244|
000060  68b9              LDR      r1,[r7,#8]
000062  3008              ADDS     r0,r0,#8
000064  f7fffffe          BL       FMC_Write
;;;941            FMC_Write(FMC_KPROM_BASE+0xCUL, kpmax);
000068  4822              LDR      r0,|L22.244|
00006a  4659              MOV      r1,r11
00006c  300c              ADDS     r0,r0,#0xc
00006e  f7fffffe          BL       FMC_Write
;;;942            FMC_Write(FMC_KPROM_BASE+0x10UL, kemax);
000072  4820              LDR      r0,|L22.244|
000074  4651              MOV      r1,r10
000076  3010              ADDS     r0,r0,#0x10
000078  f7fffffe          BL       FMC_Write
;;;943            FMC_Write(FMC_KPROM_BASE+0x14UL, lock_ctrl);
00007c  481d              LDR      r0,|L22.244|
00007e  4629              MOV      r1,r5
000080  3014              ADDS     r0,r0,#0x14
000082  f7fffffe          BL       FMC_Write
000086  4649              MOV      r1,r9                 ;911
                  |L22.136|
;;;944    
;;;945            while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
000088  6e08              LDR      r0,[r1,#0x60]
00008a  07c0              LSLS     r0,r0,#31
00008c  d1fc              BNE      |L22.136|
;;;946    
;;;947            u32KeySts = FMC->KPKEYSTS;
00008e  6e08              LDR      r0,[r1,#0x60]
;;;948    
;;;949            if (!(u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk))
000090  0782              LSLS     r2,r0,#30
000092  d402              BMI      |L22.154|
;;;950            {
;;;951                /* Security key lock failed! */
;;;952                ret = -4;
000094  f06f0403          MVN      r4,#3
                  |L22.152|
000098  e026              B        |L22.232|
                  |L22.154|
;;;953            }
;;;954            else if ((lock_CONFIG && (!(u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk))) ||
;;;955                     ((!lock_CONFIG) && (u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk)))
00009a  ea4f6280          LSL      r2,r0,#26
00009e  b116              CBZ      r6,|L22.166|
0000a0  2a00              CMP      r2,#0                 ;954
0000a2  da02              BGE      |L22.170|
0000a4  e004              B        |L22.176|
                  |L22.166|
0000a6  2a00              CMP      r2,#0
0000a8  da02              BGE      |L22.176|
                  |L22.170|
;;;956            {
;;;957                /* CONFIG lock failed! */
;;;958                ret = -5;
0000aa  f06f0404          MVN      r4,#4
0000ae  e01b              B        |L22.232|
                  |L22.176|
;;;959            }
;;;960            else if ((lock_SPROM && (!(u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk))) ||
0000b0  f1b80f00          CMP      r8,#0
;;;961                     ((!lock_SPROM) && (u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk)))
0000b4  ea4f6040          LSL      r0,r0,#25
0000b8  d002              BEQ      |L22.192|
0000ba  2800              CMP      r0,#0                 ;960
0000bc  da02              BGE      |L22.196|
0000be  e004              B        |L22.202|
                  |L22.192|
0000c0  2800              CMP      r0,#0
0000c2  da02              BGE      |L22.202|
                  |L22.196|
;;;962            {
;;;963                /* CONFIG lock failed! */
;;;964                ret = -6;
0000c4  f06f0405          MVN      r4,#5
0000c8  e00e              B        |L22.232|
                  |L22.202|
;;;965            }
;;;966            else if (((FMC->KPCNT & FMC_KPCNT_KPMAX_Msk) >> FMC_KPCNT_KPMAX_Pos) != kpmax)
0000ca  6e88              LDR      r0,[r1,#0x68]
0000cc  f3c02203          UBFX     r2,r0,#8,#4
0000d0  455a              CMP      r2,r11
0000d2  d002              BEQ      |L22.218|
;;;967            {
;;;968                /* KPMAX failed! */
;;;969                ret = -7;
0000d4  f06f0406          MVN      r4,#6
0000d8  e006              B        |L22.232|
                  |L22.218|
;;;970            }
;;;971            else if (((FMC->KPKEYCNT & FMC_KPKEYCNT_KPKEMAX_Msk) >> FMC_KPKEYCNT_KPKEMAX_Pos) != kemax)
0000da  6e48              LDR      r0,[r1,#0x64]
0000dc  f3c02105          UBFX     r1,r0,#8,#6
0000e0  4551              CMP      r1,r10
0000e2  d001              BEQ      |L22.232|
;;;972            {
;;;973                /* KEMAX failed! */
;;;974                ret = -8;
0000e4  f06f0407          MVN      r4,#7
                  |L22.232|
;;;975            }
;;;976        }
;;;977        return ret;
0000e8  4620              MOV      r0,r4
;;;978    }
0000ea  e8bd8ff0          POP      {r4-r11,pc}
;;;979    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L22.240|
                          DCD      0x4000c000
                  |L22.244|
                          DCD      0x00301000
                  |L22.248|
                          DCD      0x00301200

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;440      */
;;;441    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L23.24|
;;;442    {
;;;443        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;444        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;445        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;446        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L23.14|
;;;447        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000e  6910              LDR      r0,[r2,#0x10]
000010  07c0              LSLS     r0,r0,#31
000012  d1fc              BNE      |L23.14|
;;;448    }
000014  4770              BX       lr
;;;449    
                          ENDP

000016  0000              DCW      0x0000
                  |L23.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write8Bytes||, CODE, READONLY, ALIGN=2

                  FMC_Write8Bytes PROC
;;;458      */
;;;459    int32_t FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;460    {
000002  4604              MOV      r4,r0
;;;461        int32_t  ret = 0;
;;;462    
;;;463        FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_64;
000004  4b0b              LDR      r3,|L24.52|
000006  2000              MOVS     r0,#0                 ;461
000008  2561              MOVS     r5,#0x61
00000a  60dd              STR      r5,[r3,#0xc]
;;;464        FMC->ISPADDR = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;465        FMC->MPDAT0  = u32data0;
00000e  f8c31080          STR      r1,[r3,#0x80]
;;;466        FMC->MPDAT1  = u32data1;
000012  f8c32084          STR      r2,[r3,#0x84]
;;;467        FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
000016  2101              MOVS     r1,#1
000018  6119              STR      r1,[r3,#0x10]
                  |L24.26|
;;;468    
;;;469        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c19              LDR      r1,[r3,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L24.26|
;;;470    
;;;471        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000020  6c19              LDR      r1,[r3,#0x40]
000022  0649              LSLS     r1,r1,#25
000024  d505              BPL      |L24.50|
;;;472        {
;;;473            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000026  6c18              LDR      r0,[r3,#0x40]
000028  f0400040          ORR      r0,r0,#0x40
00002c  6418              STR      r0,[r3,#0x40]
;;;474            ret = -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L24.50|
;;;475        }
;;;476        return ret;
;;;477    }
000032  bd30              POP      {r4,r5,pc}
;;;478    
                          ENDP

                  |L24.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;774      */
;;;775    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;776    {
;;;777        int   i;
;;;778    
;;;779        FMC_ENABLE_CFG_UPDATE();
000004  4e1e              LDR      r6,|L25.128|
000006  4605              MOV      r5,r0                 ;776
000008  4688              MOV      r8,r1                 ;776
00000a  6830              LDR      r0,[r6,#0]
00000c  f0400010          ORR      r0,r0,#0x10
000010  6030              STR      r0,[r6,#0]
;;;780        FMC_Erase(FMC_CONFIG_BASE);
000012  01b7              LSLS     r7,r6,#6
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       FMC_Erase
;;;781    
;;;782        if ((FMC_Read(FMC_CONFIG_BASE) != 0xFFFFFFFF) || (FMC_Read(FMC_CONFIG_BASE+4) != 0xFFFFFFFF) ||
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       FMC_Read
;;;783                (FMC_Read(FMC_CONFIG_BASE+8) != 0xFFFF5A5A))
;;;784        {
;;;785            FMC_DISABLE_CFG_UPDATE();
;;;786            return -1;
000020  f04f3aff          MOV      r10,#0xffffffff
000024  1c40              ADDS     r0,r0,#1
000026  d11a              BNE      |L25.94|
000028  1d38              ADDS     r0,r7,#4              ;782
00002a  f7fffffe          BL       FMC_Read
00002e  1c40              ADDS     r0,r0,#1              ;782
000030  d115              BNE      |L25.94|
000032  4814              LDR      r0,|L25.132|
000034  f7fffffe          BL       FMC_Read
000038  f24a51a6          MOV      r1,#0xa5a6            ;783
00003c  42c8              CMN      r0,r1                 ;783
00003e  d10e              BNE      |L25.94|
;;;787        }
;;;788    
;;;789        for (i = 0; i < u32Count; i++)
000040  2400              MOVS     r4,#0
000042  46b9              MOV      r9,r7                 ;780
000044  e013              B        |L25.110|
                  |L25.70|
;;;790        {
;;;791            FMC_Write(FMC_CONFIG_BASE+i*4UL, u32Config[1]);
000046  eb090084          ADD      r0,r9,r4,LSL #2
00004a  4607              MOV      r7,r0
00004c  6869              LDR      r1,[r5,#4]
00004e  f7fffffe          BL       FMC_Write
000052  4638              MOV      r0,r7
;;;792    
;;;793            if (FMC_Read(FMC_CONFIG_BASE+i*4UL) != u32Config[1])
000054  f7fffffe          BL       FMC_Read
000058  6869              LDR      r1,[r5,#4]
00005a  4288              CMP      r0,r1
00005c  d006              BEQ      |L25.108|
                  |L25.94|
;;;794            {
;;;795                FMC_DISABLE_CFG_UPDATE();
00005e  6830              LDR      r0,[r6,#0]
000060  f0200010          BIC      r0,r0,#0x10
000064  6030              STR      r0,[r6,#0]
;;;796                return -1;
000066  4650              MOV      r0,r10
                  |L25.104|
;;;797            }
;;;798        }
;;;799    
;;;800        FMC_DISABLE_CFG_UPDATE();
;;;801        return 0;
;;;802    }
000068  e8bd87f0          POP      {r4-r10,pc}
                  |L25.108|
00006c  1c64              ADDS     r4,r4,#1
                  |L25.110|
00006e  4544              CMP      r4,r8                 ;789
000070  d3e9              BCC      |L25.70|
000072  6830              LDR      r0,[r6,#0]            ;800
000074  f0200010          BIC      r0,r0,#0x10           ;800
000078  6030              STR      r0,[r6,#0]            ;800
00007a  2000              MOVS     r0,#0                 ;801
00007c  e7f4              B        |L25.104|
;;;803    
                          ENDP

00007e  0000              DCW      0x0000
                  |L25.128|
                          DCD      0x4000c000
                  |L25.132|
                          DCD      0x00300008

                          AREA ||i.FMC_WriteMultiple||, CODE, READONLY, ALIGN=2

                  FMC_WriteMultiple PROC
;;;488      */
;;;489    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;490    {
000002  4605              MOV      r5,r0
;;;491        int   i, idx, retval = 0;
000004  2000              MOVS     r0,#0
;;;492    
;;;493        if ((u32Addr >= FMC_APROM_END) || ((u32Addr % 8) != 0))
000006  f5b52f00          CMP      r5,#0x80000
00000a  d201              BCS      |L26.16|
00000c  076b              LSLS     r3,r5,#29
00000e  d002              BEQ      |L26.22|
                  |L26.16|
;;;494        {
;;;495            return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L26.20|
;;;496        }
;;;497    
;;;498        u32Len = u32Len - (u32Len % 8);         /* u32Len must be multiple of 8. */
;;;499    
;;;500        idx = 0;
;;;501    
;;;502        while (u32Len >= 8)
;;;503        {
;;;504            FMC->ISPADDR = u32Addr;
;;;505            FMC->MPDAT0  = pu32Buf[idx++];
;;;506            FMC->MPDAT1  = pu32Buf[idx++];
;;;507            FMC->MPDAT2  = pu32Buf[idx++];
;;;508            FMC->MPDAT3  = pu32Buf[idx++];
;;;509            FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_MUL;
;;;510            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;511    
;;;512            for (i = 16; i < FMC_MULTI_WORD_PROG_LEN; )
;;;513            {
;;;514                while (FMC->MPSTS & (FMC_MPSTS_D0_Msk | FMC_MPSTS_D1_Msk))
;;;515                    ;
;;;516                retval += 8;
;;;517                u32Len -= 8;
;;;518                if (u32Len < 8)
;;;519                {
;;;520                    return retval;
;;;521                }
;;;522    
;;;523                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;524                {
;;;525                    /* printf("    [WARNING] busy cleared after D0D1 cleared!\n"); */
;;;526                    i += 8;
;;;527                    break;
;;;528                }
;;;529    
;;;530                FMC->MPDAT0 = pu32Buf[idx++];
;;;531                FMC->MPDAT1 = pu32Buf[idx++];
;;;532    
;;;533                if (i == FMC_MULTI_WORD_PROG_LEN/4)
;;;534                    break;           // done
;;;535    
;;;536                while (FMC->MPSTS & (FMC_MPSTS_D2_Msk | FMC_MPSTS_D3_Msk))
;;;537                    ;
;;;538                retval += 8;
;;;539                u32Len -= 8;
;;;540                if (u32Len < 8)
;;;541                {
;;;542                    return retval;
;;;543                }
;;;544    
;;;545                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;546                {
;;;547                    /* printf("    [WARNING] busy cleared after D2D3 cleared!\n"); */
;;;548                    i += 8;
;;;549                    break;
;;;550                }
;;;551    
;;;552                FMC->MPDAT2 = pu32Buf[idx++];
;;;553                FMC->MPDAT3 = pu32Buf[idx++];
;;;554            }
;;;555    
;;;556            if (i != FMC_MULTI_WORD_PROG_LEN)
;;;557            {
;;;558                /* printf("    [WARNING] Multi-word program interrupted at 0x%x !!\n", i); */
;;;559                return retval;
;;;560            }
;;;561    
;;;562            while (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk) ;
;;;563    
;;;564            u32Addr += FMC_MULTI_WORD_PROG_LEN;
;;;565        }
;;;566        return retval;
;;;567    }
000014  bdf0              POP      {r4-r7,pc}
                  |L26.22|
000016  f0020307          AND      r3,r2,#7              ;498
00001a  1ad3              SUBS     r3,r2,r3              ;498
00001c  2200              MOVS     r2,#0                 ;500
00001e  f44f7c00          MOV      r12,#0x200            ;512
000022  4e2d              LDR      r6,|L26.216|
000024  e053              B        |L26.206|
                  |L26.38|
000026  6075              STR      r5,[r6,#4]            ;504
000028  f8514022          LDR      r4,[r1,r2,LSL #2]     ;505
00002c  f8c64080          STR      r4,[r6,#0x80]         ;505
000030  1c52              ADDS     r2,r2,#1              ;505
000032  f8514022          LDR      r4,[r1,r2,LSL #2]     ;506
000036  f8c64084          STR      r4,[r6,#0x84]         ;506
00003a  1c52              ADDS     r2,r2,#1              ;506
00003c  f8514022          LDR      r4,[r1,r2,LSL #2]     ;507
000040  f8c64088          STR      r4,[r6,#0x88]         ;507
000044  1c52              ADDS     r2,r2,#1              ;507
000046  f8514022          LDR      r4,[r1,r2,LSL #2]     ;508
00004a  f8c6408c          STR      r4,[r6,#0x8c]         ;508
00004e  2427              MOVS     r4,#0x27              ;509
000050  60f4              STR      r4,[r6,#0xc]          ;509
000052  2401              MOVS     r4,#1                 ;510
000054  6134              STR      r4,[r6,#0x10]         ;510
000056  2410              MOVS     r4,#0x10              ;512
000058  1c52              ADDS     r2,r2,#1              ;512
                  |L26.90|
00005a  f8d670c0          LDR      r7,[r6,#0xc0]         ;514
00005e  f0170f30          TST      r7,#0x30              ;514
000062  d1fa              BNE      |L26.90|
000064  3008              ADDS     r0,r0,#8              ;514
000066  3b08              SUBS     r3,r3,#8              ;514
000068  2b08              CMP      r3,#8                 ;518
00006a  d3d3              BCC      |L26.20|
00006c  f8d670c0          LDR      r7,[r6,#0xc0]         ;523
000070  07ff              LSLS     r7,r7,#31             ;523
000072  d02f              BEQ      |L26.212|
000074  f8517022          LDR      r7,[r1,r2,LSL #2]     ;530
000078  f8c67080          STR      r7,[r6,#0x80]         ;530
00007c  1c52              ADDS     r2,r2,#1              ;530
00007e  f8517022          LDR      r7,[r1,r2,LSL #2]     ;531
000082  f8c67084          STR      r7,[r6,#0x84]         ;531
000086  1c52              ADDS     r2,r2,#1              ;531
000088  2c80              CMP      r4,#0x80              ;533
00008a  d0c3              BEQ      |L26.20|
                  |L26.140|
00008c  f8d670c0          LDR      r7,[r6,#0xc0]         ;536
000090  f0170fc0          TST      r7,#0xc0              ;536
000094  d1fa              BNE      |L26.140|
000096  3008              ADDS     r0,r0,#8              ;536
000098  3b08              SUBS     r3,r3,#8              ;536
00009a  2b08              CMP      r3,#8                 ;540
00009c  d3ba              BCC      |L26.20|
00009e  f8d670c0          LDR      r7,[r6,#0xc0]         ;545
0000a2  07ff              LSLS     r7,r7,#31             ;545
0000a4  d016              BEQ      |L26.212|
0000a6  f8517022          LDR      r7,[r1,r2,LSL #2]     ;552
0000aa  f8c67088          STR      r7,[r6,#0x88]         ;552
0000ae  1c52              ADDS     r2,r2,#1              ;552
0000b0  f8517022          LDR      r7,[r1,r2,LSL #2]     ;553
0000b4  f8c6708c          STR      r7,[r6,#0x8c]         ;553
0000b8  1c52              ADDS     r2,r2,#1              ;553
0000ba  4564              CMP      r4,r12                ;512
0000bc  dbcd              BLT      |L26.90|
                  |L26.190|
0000be  4564              CMP      r4,r12                ;556
0000c0  d1a8              BNE      |L26.20|
                  |L26.194|
0000c2  f8d640c0          LDR      r4,[r6,#0xc0]         ;562
0000c6  07e4              LSLS     r4,r4,#31             ;562
0000c8  d1fb              BNE      |L26.194|
0000ca  f5057500          ADD      r5,r5,#0x200          ;562
                  |L26.206|
0000ce  2b08              CMP      r3,#8                 ;502
0000d0  d2a9              BCS      |L26.38|
0000d2  bdf0              POP      {r4-r7,pc}
                  |L26.212|
0000d4  3408              ADDS     r4,r4,#8
0000d6  e7f2              B        |L26.190|
;;;568    
                          ENDP

                  |L26.216|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Write_OTP PROC
;;;578      */
;;;579    int32_t FMC_Write_OTP(uint32_t otp_num, uint32_t low_word, uint32_t high_word)
000000  b5f0              PUSH     {r4-r7,lr}
;;;580    {
000002  4604              MOV      r4,r0
;;;581        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;582    
;;;583        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L27.14|
;;;584        {
;;;585            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
                  |L27.12|
;;;586        }
;;;587    
;;;588        if (ret == 0)
;;;589        {
;;;590            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;591            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL;
;;;592            FMC->ISPDAT = low_word;
;;;593            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;594    
;;;595            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;596    
;;;597            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;598            {
;;;599                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;600                ret = -1;
;;;601            }
;;;602        }
;;;603    
;;;604        if (ret == 0)
;;;605        {
;;;606            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;607            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL + 4UL;
;;;608            FMC->ISPDAT = high_word;
;;;609            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;610    
;;;611            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;612    
;;;613            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;614            {
;;;615                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;616                ret = -1;
;;;617            }
;;;618        }
;;;619    
;;;620        return ret;
;;;621    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L27.14|
00000e  4b14              LDR      r3,|L27.96|
000010  2621              MOVS     r6,#0x21              ;590
000012  60de              STR      r6,[r3,#0xc]          ;590
000014  f44f1544          MOV      r5,#0x310000          ;591
000018  eb0505c4          ADD      r5,r5,r4,LSL #3       ;591
00001c  605d              STR      r5,[r3,#4]            ;591
00001e  6099              STR      r1,[r3,#8]            ;592
000020  2701              MOVS     r7,#1                 ;593
000022  611f              STR      r7,[r3,#0x10]         ;593
                  |L27.36|
000024  6919              LDR      r1,[r3,#0x10]         ;595
000026  07c9              LSLS     r1,r1,#31             ;595
000028  d1fc              BNE      |L27.36|
00002a  6c19              LDR      r1,[r3,#0x40]         ;597
00002c  f04f35ff          MOV      r5,#0xffffffff        ;600
000030  0649              LSLS     r1,r1,#25             ;597
000032  d40e              BMI      |L27.82|
000034  2800              CMP      r0,#0                 ;604
000036  d1e9              BNE      |L27.12|
000038  60de              STR      r6,[r3,#0xc]          ;606
00003a  490a              LDR      r1,|L27.100|
00003c  eb0101c4          ADD      r1,r1,r4,LSL #3       ;607
000040  6059              STR      r1,[r3,#4]            ;607
000042  609a              STR      r2,[r3,#8]            ;608
000044  611f              STR      r7,[r3,#0x10]         ;609
                  |L27.70|
000046  6919              LDR      r1,[r3,#0x10]         ;611
000048  07c9              LSLS     r1,r1,#31             ;611
00004a  d1fc              BNE      |L27.70|
00004c  6c19              LDR      r1,[r3,#0x40]         ;613
00004e  0649              LSLS     r1,r1,#25             ;613
000050  d5dc              BPL      |L27.12|
                  |L27.82|
000052  6c18              LDR      r0,[r3,#0x40]         ;615
000054  f0400040          ORR      r0,r0,#0x40           ;615
000058  6418              STR      r0,[r3,#0x40]         ;615
00005a  4628              MOV      r0,r5                 ;616
00005c  bdf0              POP      {r4-r7,pc}
;;;622    
                          ENDP

00005e  0000              DCW      0x0000
                  |L27.96|
                          DCD      0x4000c000
                  |L27.100|
                          DCD      0x00310004

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____RRX|
#line 587
|__asm___5_fmc_c_65c03504____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
