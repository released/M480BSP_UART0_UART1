; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hsusbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hsusbd.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -D__FPU_PRESENT=1 --omf_browse=.\obj\hsusbd.crf ..\..\..\Library\StdDriver\src\hsusbd.c]
                          THUMB

                          AREA ||i.HSUSBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  HSUSBD_CtrlIn PROC
;;;611     */
;;;612    void HSUSBD_CtrlIn(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;613    {
;;;614        uint32_t volatile i, cnt;
;;;615        uint8_t u8Value;
;;;616        if(g_hsusbd_CtrlInSize >= g_hsusbd_CtrlMaxPktSize)
000002  4b1d              LDR      r3,|L1.120|
000004  2500              MOVS     r5,#0
;;;617        {
;;;618            /* Data size > MXPLD */
;;;619            cnt = g_hsusbd_CtrlMaxPktSize >> 2;
;;;620            for (i=0ul; i<cnt; i++)
;;;621            {
;;;622                HSUSBD->CEPDAT = *(uint32_t *)g_hsusbd_CtrlInPointer;
000006  4c1d              LDR      r4,|L1.124|
000008  69da              LDR      r2,[r3,#0x1c]         ;616  ; g_hsusbd_CtrlMaxPktSize
00000a  6a59              LDR      r1,[r3,#0x24]         ;616  ; g_hsusbd_CtrlInSize
00000c  4291              CMP      r1,r2                 ;616
00000e  d312              BCC      |L1.54|
000010  0890              LSRS     r0,r2,#2              ;619
000012  e9cd0500          STRD     r0,r5,[sp,#0]         ;619
000016  4628              MOV      r0,r5                 ;620
000018  e006              B        |L1.40|
                  |L1.26|
00001a  6998              LDR      r0,[r3,#0x18]  ; g_hsusbd_CtrlInPointer
00001c  c820              LDM      r0!,{r5}
00001e  62a5              STR      r5,[r4,#0x28]
000020  6198              STR      r0,[r3,#0x18]         ;620  ; g_hsusbd_CtrlInPointer
000022  9801              LDR      r0,[sp,#4]            ;620
000024  1c40              ADDS     r0,r0,#1              ;620
000026  9001              STR      r0,[sp,#4]            ;620
                  |L1.40|
000028  9d00              LDR      r5,[sp,#0]            ;620
00002a  42a8              CMP      r0,r5                 ;620
00002c  d3f5              BCC      |L1.26|
;;;623                g_hsusbd_CtrlInPointer = (uint8_t *)(g_hsusbd_CtrlInPointer + 4ul);
;;;624            }
;;;625            HSUSBD_START_CEP_IN(g_hsusbd_CtrlMaxPktSize);
00002e  63a2              STR      r2,[r4,#0x38]
;;;626            g_hsusbd_CtrlInSize -= g_hsusbd_CtrlMaxPktSize;
000030  1a88              SUBS     r0,r1,r2
000032  6258              STR      r0,[r3,#0x24]  ; g_hsusbd_CtrlInSize
;;;627        }
;;;628        else
;;;629        {
;;;630            /* Data size <= MXPLD */
;;;631            cnt = g_hsusbd_CtrlInSize >> 2;
;;;632            for (i=0ul; i<cnt; i++)
;;;633            {
;;;634                HSUSBD->CEPDAT = *(uint32_t *)g_hsusbd_CtrlInPointer;
;;;635                g_hsusbd_CtrlInPointer += 4ul;
;;;636            }
;;;637    
;;;638            for (i=0ul; i<(g_hsusbd_CtrlInSize % 4ul); i++)
;;;639            {
;;;640                u8Value = *(uint8_t *)(g_hsusbd_CtrlInPointer+i);
;;;641                outpb(&HSUSBD->CEPDAT, u8Value);
;;;642            }
;;;643    
;;;644            HSUSBD_START_CEP_IN(g_hsusbd_CtrlInSize);
;;;645            g_hsusbd_CtrlInPointer = 0;
;;;646            g_hsusbd_CtrlInSize = 0ul;
;;;647        }
;;;648    }
000034  bd7c              POP      {r2-r6,pc}
                  |L1.54|
000036  0888              LSRS     r0,r1,#2              ;631
000038  e9cd0500          STRD     r0,r5,[sp,#0]         ;631
00003c  4628              MOV      r0,r5                 ;632
00003e  e006              B        |L1.78|
                  |L1.64|
000040  6998              LDR      r0,[r3,#0x18]         ;634  ; g_hsusbd_CtrlInPointer
000042  c804              LDM      r0!,{r2}              ;634
000044  62a2              STR      r2,[r4,#0x28]         ;634
000046  6198              STR      r0,[r3,#0x18]         ;632  ; g_hsusbd_CtrlInPointer
000048  9801              LDR      r0,[sp,#4]            ;632
00004a  1c40              ADDS     r0,r0,#1              ;632
00004c  9001              STR      r0,[sp,#4]            ;632
                  |L1.78|
00004e  9a00              LDR      r2,[sp,#0]            ;632
000050  4290              CMP      r0,r2                 ;632
000052  d3f5              BCC      |L1.64|
000054  9501              STR      r5,[sp,#4]            ;622
000056  f0010603          AND      r6,r1,#3              ;638
00005a  4628              MOV      r0,r5                 ;638
00005c  699a              LDR      r2,[r3,#0x18]         ;638
00005e  e005              B        |L1.108|
                  |L1.96|
000060  5c10              LDRB     r0,[r2,r0]            ;640
000062  f8840028          STRB     r0,[r4,#0x28]         ;641
000066  9801              LDR      r0,[sp,#4]            ;638
000068  1c40              ADDS     r0,r0,#1              ;638
00006a  9001              STR      r0,[sp,#4]            ;638
                  |L1.108|
00006c  4286              CMP      r6,r0                 ;638
00006e  d8f7              BHI      |L1.96|
000070  63a1              STR      r1,[r4,#0x38]         ;644
000072  619d              STR      r5,[r3,#0x18]         ;646  ; g_hsusbd_CtrlInPointer
000074  625d              STR      r5,[r3,#0x24]         ;646  ; g_hsusbd_CtrlInSize
000076  bd7c              POP      {r2-r6,pc}
;;;649    
                          ENDP

                  |L1.120|
                          DCD      ||.data||
                  |L1.124|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  HSUSBD_CtrlOut PROC
;;;659     */
;;;660    void HSUSBD_CtrlOut(uint8_t pu8Buf[], uint32_t u32Size)
000000  b518              PUSH     {r3,r4,lr}
;;;661    {
;;;662        uint32_t volatile i;
;;;663        while(1)
;;;664        {
;;;665            if ((HSUSBD->CEPINTSTS & HSUSBD_CEPINTSTS_RXPKIF_Msk) == HSUSBD_CEPINTSTS_RXPKIF_Msk)
000002  4a09              LDR      r2,|L2.40|
                  |L2.4|
000004  6b53              LDR      r3,[r2,#0x34]
000006  065b              LSLS     r3,r3,#25
000008  d5fc              BPL      |L2.4|
;;;666            {
;;;667                for (i=0ul; i<u32Size; i++)
00000a  2300              MOVS     r3,#0
00000c  e005              B        |L2.26|
                  |L2.14|
;;;668                {
;;;669                    pu8Buf[i] = inpb(&HSUSBD->CEPDAT);
00000e  f8923028          LDRB     r3,[r2,#0x28]
000012  9c00              LDR      r4,[sp,#0]
000014  5503              STRB     r3,[r0,r4]
000016  9b00              LDR      r3,[sp,#0]            ;667
000018  1c5b              ADDS     r3,r3,#1              ;667
                  |L2.26|
00001a  9300              STR      r3,[sp,#0]            ;667
00001c  428b              CMP      r3,r1                 ;667
00001e  d3f6              BCC      |L2.14|
;;;670                }
;;;671                HSUSBD->CEPINTSTS = HSUSBD_CEPINTSTS_RXPKIF_Msk;
000020  2040              MOVS     r0,#0x40
000022  6350              STR      r0,[r2,#0x34]
;;;672                break;
;;;673            }
;;;674        }
;;;675    }
000024  bd18              POP      {r3,r4,pc}
;;;676    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  HSUSBD_GetDescriptor PROC
;;;164     */
;;;165    int HSUSBD_GetDescriptor(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;166    {
;;;167        uint32_t u32Len;
;;;168        int val = 0;
;;;169    
;;;170        u32Len = gUsbCmd.wLength;
000002  4a3f              LDR      r2,|L3.256|
000004  2500              MOVS     r5,#0                 ;168
;;;171        g_hsusbd_CtrlZero = (uint8_t)0ul;
000006  f1a2002c          SUB      r0,r2,#0x2c
00000a  88d1              LDRH     r1,[r2,#6]            ;170  ; gUsbCmd
00000c  7145              STRB     r5,[r0,#5]
;;;172    
;;;173        switch ((gUsbCmd.wValue & 0xff00ul) >> 8)
00000e  8856              LDRH     r6,[r2,#2]  ; gUsbCmd
000010  4602              MOV      r2,r0                 ;171
000012  0a33              LSRS     r3,r6,#8
;;;174        {
;;;175        /* Get Device Descriptor */
;;;176        case DESC_DEVICE:
;;;177        {
;;;178            u32Len = Minimum(u32Len, LEN_DEVICE);
;;;179            HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8DevDesc, u32Len);
000014  69d4              LDR      r4,[r2,#0x1c]
;;;180            break;
;;;181        }
;;;182        /* Get Configuration Descriptor */
;;;183        case DESC_CONFIG:
;;;184        {
;;;185            uint32_t u32TotalLen;
;;;186            if ((HSUSBD->OPER & 0x04ul) == 0x04ul)
000016  f8dfc0ec          LDR      r12,|L3.260|
;;;187            {
;;;188                u32TotalLen = g_hsusbd_sInfo->gu8ConfigDesc[3];
;;;189                u32TotalLen = g_hsusbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;190    
;;;191                if (u32Len > u32TotalLen)
;;;192                {
;;;193                    u32Len = u32TotalLen;
;;;194                    if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;195                    {
;;;196                        g_hsusbd_CtrlZero = (uint8_t)1ul;
00001a  2701              MOVS     r7,#1
00001c  6a92              LDR      r2,[r2,#0x28]         ;179
;;;197                    }
;;;198                }
;;;199                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8ConfigDesc, u32Len);
;;;200            }
;;;201            else
;;;202            {
;;;203                u32TotalLen = g_hsusbd_sInfo->gu8FullConfigDesc[3];
;;;204                u32TotalLen = g_hsusbd_sInfo->gu8FullConfigDesc[2] + (u32TotalLen << 8);
;;;205    
;;;206                if (u32Len > u32TotalLen)
;;;207                {
;;;208                    u32Len = u32TotalLen;
;;;209                    if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;210                    {
;;;211                        g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;212                    }
;;;213                }
;;;214                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8FullConfigDesc, u32Len);
;;;215            }
;;;216    
;;;217            break;
;;;218        }
;;;219        /* Get Qualifier Descriptor */
;;;220        case DESC_QUALIFIER:
;;;221        {
;;;222            u32Len = Minimum(u32Len, LEN_QUALIFIER);
;;;223            HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8QualDesc, u32Len);
;;;224            break;
;;;225        }
;;;226        /* Get Other Speed Descriptor - Full speed */
;;;227        case DESC_OTHERSPEED:
;;;228        {
;;;229            uint32_t u32TotalLen;
;;;230            if ((HSUSBD->OPER & 0x04ul) == 0x04ul)
;;;231            {
;;;232                u32TotalLen = g_hsusbd_sInfo->gu8HSOtherConfigDesc[3];
;;;233                u32TotalLen = g_hsusbd_sInfo->gu8HSOtherConfigDesc[2] + (u32TotalLen << 8);
;;;234    
;;;235                if (u32Len > u32TotalLen)
;;;236                {
;;;237                    u32Len = u32TotalLen;
;;;238                    if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;239                    {
;;;240                        g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;241                    }
;;;242                }
;;;243                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8HSOtherConfigDesc, u32Len);
;;;244            }
;;;245            else
;;;246            {
;;;247                u32TotalLen = g_hsusbd_sInfo->gu8FSOtherConfigDesc[3];
;;;248                u32TotalLen = g_hsusbd_sInfo->gu8FSOtherConfigDesc[2] + (u32TotalLen << 8);
;;;249    
;;;250                if (u32Len > u32TotalLen)
;;;251                {
;;;252                    u32Len = u32TotalLen;
;;;253                    if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;254                    {
;;;255                        g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;256                    }
;;;257                }
;;;258                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8FSOtherConfigDesc, u32Len);
;;;259            }
;;;260    
;;;261            break;
;;;262        }
;;;263        /* Get HID Descriptor */
;;;264        case DESC_HID:
;;;265        {
;;;266            uint32_t u32ConfigDescOffset;   /* u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index) */
;;;267            u32Len = Minimum(u32Len, LEN_HID);
;;;268            u32ConfigDescOffset = g_hsusbd_sInfo->gu32ConfigHidDescIdx[gUsbCmd.wIndex & 0xfful];
;;;269            HSUSBD_PrepareCtrlIn((uint8_t *)&g_hsusbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
;;;270            break;
;;;271        }
;;;272        /* Get Report Descriptor */
;;;273        case DESC_HID_RPT:
;;;274        {
;;;275            if (u32Len > g_hsusbd_sInfo->gu32HidReportSize[gUsbCmd.wIndex & 0xfful])
;;;276            {
;;;277                u32Len = g_hsusbd_sInfo->gu32HidReportSize[gUsbCmd.wIndex & 0xfful];
;;;278                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;279                {
;;;280                    g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;281                }
;;;282            }
;;;283            HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8HidReportDesc[gUsbCmd.wIndex & 0xfful], u32Len);
;;;284            break;
;;;285        }
;;;286        /* Get String Descriptor */
;;;287        case DESC_STRING:
;;;288        {
;;;289            if((gUsbCmd.wValue & 0xfful) < 8ul)
;;;290            {
;;;291                if (u32Len > g_hsusbd_sInfo->gu8StringDesc[gUsbCmd.wValue & 0xfful][0])
;;;292                {
;;;293                    u32Len = g_hsusbd_sInfo->gu8StringDesc[gUsbCmd.wValue & 0xfful][0];
;;;294                    if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;295                    {
;;;296                        g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;297                    }
;;;298                }
;;;299                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8StringDesc[gUsbCmd.wValue & 0xfful], u32Len);
;;;300            }
;;;301            else
;;;302            {
;;;303                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
00001e  f04f0e02          MOV      lr,#2
000022  2b06              CMP      r3,#6                 ;173
000024  d02b              BEQ      |L3.126|
000026  dc06              BGT      |L3.54|
000028  2b01              CMP      r3,#1                 ;173
00002a  d00d              BEQ      |L3.72|
00002c  2b02              CMP      r3,#2                 ;173
00002e  d010              BEQ      |L3.82|
000030  2b03              CMP      r3,#3                 ;173
000032  d15f              BNE      |L3.244|
000034  e049              B        |L3.202|
                  |L3.54|
000036  2b07              CMP      r3,#7                 ;173
000038  d026              BEQ      |L3.136|
00003a  4e31              LDR      r6,|L3.256|
00003c  2b21              CMP      r3,#0x21              ;173
00003e  7936              LDRB     r6,[r6,#4]            ;268
000040  d02a              BEQ      |L3.152|
000042  2b22              CMP      r3,#0x22              ;173
000044  d156              BNE      |L3.244|
000046  e030              B        |L3.170|
                  |L3.72|
000048  2912              CMP      r1,#0x12              ;178
00004a  d300              BCC      |L3.78|
00004c  2112              MOVS     r1,#0x12              ;178
                  |L3.78|
00004e  6810              LDR      r0,[r2,#0]            ;180
000050  e04d              B        |L3.238|
                  |L3.82|
000052  f8dc3018          LDR      r3,[r12,#0x18]        ;186
000056  075b              LSLS     r3,r3,#29             ;186
000058  d501              BPL      |L3.94|
00005a  6852              LDR      r2,[r2,#4]            ;188
00005c  e000              B        |L3.96|
                  |L3.94|
00005e  6912              LDR      r2,[r2,#0x10]         ;203
                  |L3.96|
000060  78d3              LDRB     r3,[r2,#3]            ;203
000062  7896              LDRB     r6,[r2,#2]            ;204
000064  eb062303          ADD      r3,r6,r3,LSL #8       ;204
000068  4299              CMP      r1,r3                 ;206
00006a  d906              BLS      |L3.122|
00006c  4619              MOV      r1,r3                 ;208
00006e  fbb3f3f4          UDIV     r3,r3,r4              ;209
000072  fb041313          MLS      r3,r4,r3,r1           ;209
000076  b903              CBNZ     r3,|L3.122|
000078  7147              STRB     r7,[r0,#5]            ;211
                  |L3.122|
00007a  4610              MOV      r0,r2                 ;211
00007c  e037              B        |L3.238|
                  |L3.126|
00007e  290a              CMP      r1,#0xa               ;222
000080  d300              BCC      |L3.132|
000082  210a              MOVS     r1,#0xa               ;222
                  |L3.132|
000084  68d0              LDR      r0,[r2,#0xc]          ;224
000086  e032              B        |L3.238|
                  |L3.136|
000088  f8dc3018          LDR      r3,[r12,#0x18]        ;230
00008c  075b              LSLS     r3,r3,#29             ;230
00008e  d501              BPL      |L3.148|
000090  6952              LDR      r2,[r2,#0x14]         ;232
000092  e7e5              B        |L3.96|
                  |L3.148|
000094  6992              LDR      r2,[r2,#0x18]         ;247
000096  e7e3              B        |L3.96|
                  |L3.152|
000098  2909              CMP      r1,#9                 ;267
00009a  d300              BCC      |L3.158|
00009c  2109              MOVS     r1,#9                 ;267
                  |L3.158|
00009e  6a50              LDR      r0,[r2,#0x24]         ;268
0000a0  6852              LDR      r2,[r2,#4]            ;269
0000a2  f8500026          LDR      r0,[r0,r6,LSL #2]     ;268
0000a6  4410              ADD      r0,r0,r2              ;269
0000a8  e021              B        |L3.238|
                  |L3.170|
0000aa  6a13              LDR      r3,[r2,#0x20]         ;275
0000ac  f8533026          LDR      r3,[r3,r6,LSL #2]     ;275
0000b0  428b              CMP      r3,r1                 ;275
0000b2  d206              BCS      |L3.194|
0000b4  4619              MOV      r1,r3                 ;275
0000b6  fbb3f3f4          UDIV     r3,r3,r4              ;278
0000ba  fb041313          MLS      r3,r4,r3,r1           ;278
0000be  b903              CBNZ     r3,|L3.194|
0000c0  7147              STRB     r7,[r0,#5]            ;280
                  |L3.194|
0000c2  69d0              LDR      r0,[r2,#0x1c]         ;283
0000c4  f8500026          LDR      r0,[r0,r6,LSL #2]     ;283
0000c8  e011              B        |L3.238|
                  |L3.202|
0000ca  b2f3              UXTB     r3,r6                 ;289
0000cc  2b08              CMP      r3,#8                 ;289
0000ce  d211              BCS      |L3.244|
0000d0  6896              LDR      r6,[r2,#8]            ;291
0000d2  f8562023          LDR      r2,[r6,r3,LSL #2]     ;291
0000d6  7812              LDRB     r2,[r2,#0]            ;291
0000d8  428a              CMP      r2,r1                 ;291
0000da  d206              BCS      |L3.234|
0000dc  4611              MOV      r1,r2                 ;291
0000de  fbb2f2f4          UDIV     r2,r2,r4              ;294
0000e2  fb041212          MLS      r2,r4,r2,r1           ;294
0000e6  b902              CBNZ     r2,|L3.234|
0000e8  7147              STRB     r7,[r0,#5]            ;296
                  |L3.234|
0000ea  f8560023          LDR      r0,[r6,r3,LSL #2]     ;299
                  |L3.238|
0000ee  f7fffffe          BL       HSUSBD_PrepareCtrlIn
0000f2  e002              B        |L3.250|
                  |L3.244|
0000f4  f8cce02c          STR      lr,[r12,#0x2c]
;;;304                val = 1;
0000f8  2501              MOVS     r5,#1
                  |L3.250|
;;;305            }
;;;306            break;
;;;307        }
;;;308        default:
;;;309            /* Not support. Reply STALL. */
;;;310            HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
;;;311            val = 1;
;;;312            break;
;;;313        }
;;;314        return val;
0000fa  4628              MOV      r0,r5
;;;315    }
0000fc  bdf0              POP      {r4-r7,pc}
;;;316    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L3.256|
                          DCD      ||.data||+0x2c
                  |L3.260|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_Open||, CODE, READONLY, ALIGN=2

                  HSUSBD_Open PROC
;;;66      */
;;;67     void HSUSBD_Open(S_HSUSBD_INFO_T *param, HSUSBD_CLASS_REQ pfnClassReq, HSUSBD_SET_INTERFACE_REQ pfnSetInterface)
000000  4b0b              LDR      r3,|L4.48|
;;;68     {
;;;69         g_hsusbd_sInfo = param;
000002  6298              STR      r0,[r3,#0x28]  ; g_hsusbd_sInfo
000004  e9c31203          STRD     r1,r2,[r3,#0xc]
;;;70         g_hsusbd_pfnClassRequest = pfnClassReq;
;;;71         g_hsusbd_pfnSetInterface = pfnSetInterface;
;;;72     
;;;73         /* get EP0 maximum packet size */
;;;74         g_hsusbd_CtrlMaxPktSize = g_hsusbd_sInfo->gu8DevDesc[7];
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
;;;75     
;;;76         /* Initial USB engine */
;;;77         HSUSBD->PHYCTL |= (HSUSBD_PHYCTL_PHYEN_Msk | HSUSBD_PHYCTL_DPPUEN_Msk);
00000c  61d8              STR      r0,[r3,#0x1c]  ; g_hsusbd_CtrlMaxPktSize
00000e  4b09              LDR      r3,|L4.52|
000010  6818              LDR      r0,[r3,#0]
000012  f4407040          ORR      r0,r0,#0x300
000016  6018              STR      r0,[r3,#0]
;;;78         /* wait PHY clock ready */
;;;79         while (1)
;;;80         {
;;;81             HSUSBD->EP[EPA].EPMPS = 0x20ul;
000018  4807              LDR      r0,|L4.56|
00001a  2120              MOVS     r1,#0x20
                  |L4.28|
00001c  6781              STR      r1,[r0,#0x78]
;;;82             if (HSUSBD->EP[EPA].EPMPS == 0x20ul)
00001e  6f82              LDR      r2,[r0,#0x78]
000020  2a20              CMP      r2,#0x20
000022  d1fb              BNE      |L4.28|
;;;83             {
;;;84                 break;
;;;85             }
;;;86         }
;;;87         /* Force SE0, and then clear it to connect*/
;;;88         HSUSBD_SET_SE0();
000024  6818              LDR      r0,[r3,#0]
000026  f4207080          BIC      r0,r0,#0x100
00002a  6018              STR      r0,[r3,#0]
;;;89     }
00002c  4770              BX       lr
;;;90     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      ||.data||
                  |L4.52|
                          DCD      0x40019704
                  |L4.56|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  HSUSBD_PrepareCtrlIn PROC
;;;594     */
;;;595    void HSUSBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size)
000000  4a01              LDR      r2,|L5.8|
;;;596    {
;;;597        g_hsusbd_CtrlInPointer = pu8Buf;
;;;598        g_hsusbd_CtrlInSize = u32Size;
000002  6251              STR      r1,[r2,#0x24]  ; g_hsusbd_CtrlInSize
000004  6190              STR      r0,[r2,#0x18]  ; g_hsusbd_CtrlInPointer
;;;599    }
000006  4770              BX       lr
;;;600    
                          ENDP

                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.HSUSBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  HSUSBD_ProcessSetupPacket PROC
;;;113     */
;;;114    void HSUSBD_ProcessSetupPacket(void)
000000  4910              LDR      r1,|L6.68|
;;;115    {
;;;116        /* Setup packet process */
;;;117        gUsbCmd.bmRequestType = (uint8_t)(HSUSBD->SETUP1_0 & 0xfful);
000002  6c4a              LDR      r2,[r1,#0x44]
000004  4810              LDR      r0,|L6.72|
000006  7002              STRB     r2,[r0,#0]
;;;118        gUsbCmd.bRequest = (uint8_t)((HSUSBD->SETUP1_0 >> 8) & 0xfful);
000008  6c4b              LDR      r3,[r1,#0x44]
00000a  0a1b              LSRS     r3,r3,#8
00000c  7043              STRB     r3,[r0,#1]
;;;119        gUsbCmd.wValue = (uint16_t)HSUSBD->SETUP3_2;
00000e  6c8b              LDR      r3,[r1,#0x48]
000010  8043              STRH     r3,[r0,#2]
;;;120        gUsbCmd.wIndex = (uint16_t)HSUSBD->SETUP5_4;
000012  6ccb              LDR      r3,[r1,#0x4c]
000014  8083              STRH     r3,[r0,#4]
;;;121        gUsbCmd.wLength = (uint16_t)HSUSBD->SETUP7_6;
000016  6d0b              LDR      r3,[r1,#0x50]
000018  80c3              STRH     r3,[r0,#6]
;;;122    
;;;123        /* USB device request in setup packet: offset 0, D[6..5]: 0=Standard, 1=Class, 2=Vendor, 3=Reserved */
;;;124        switch (gUsbCmd.bmRequestType & 0x60ul)
00001a  f0120060          ANDS     r0,r2,#0x60
00001e  d008              BEQ      |L6.50|
;;;125        {
;;;126        case REQ_STANDARD:
;;;127        {
;;;128            HSUSBD_StandardRequest();
;;;129            break;
;;;130        }
;;;131        case REQ_CLASS:
;;;132        {
;;;133            if (g_hsusbd_pfnClassRequest != NULL)
000020  4a09              LDR      r2,|L6.72|
000022  3a2c              SUBS     r2,r2,#0x2c
000024  2820              CMP      r0,#0x20              ;124
000026  d006              BEQ      |L6.54|
000028  2840              CMP      r0,#0x40              ;124
00002a  d006              BEQ      |L6.58|
;;;134            {
;;;135                g_hsusbd_pfnClassRequest();
;;;136            }
;;;137            break;
;;;138        }
;;;139        case REQ_VENDOR:
;;;140        {
;;;141            if (g_hsusbd_pfnVendorRequest != NULL)
;;;142            {
;;;143                g_hsusbd_pfnVendorRequest();
;;;144            }
;;;145            break;
;;;146        }
;;;147        default:
;;;148        {
;;;149            /* Setup error, stall the device */
;;;150            HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
00002c  2002              MOVS     r0,#2
00002e  62c8              STR      r0,[r1,#0x2c]
                  |L6.48|
;;;151            break;
;;;152        }
;;;153        }
;;;154    }
000030  4770              BX       lr
                  |L6.50|
000032  f7ffbffe          B.W      HSUSBD_StandardRequest
                  |L6.54|
000036  68d0              LDR      r0,[r2,#0xc]          ;133  ; g_hsusbd_pfnClassRequest
000038  e000              B        |L6.60|
                  |L6.58|
00003a  6890              LDR      r0,[r2,#8]            ;141  ; g_hsusbd_pfnVendorRequest
                  |L6.60|
00003c  2800              CMP      r0,#0                 ;141
00003e  d0f7              BEQ      |L6.48|
000040  4700              BX       r0                    ;143
;;;155    
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      0x40019000
                  |L6.72|
                          DCD      ||.data||+0x2c

                          AREA ||i.HSUSBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  HSUSBD_SetVendorRequest PROC
;;;706     */
;;;707    void HSUSBD_SetVendorRequest(HSUSBD_VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L7.8|
;;;708    {
;;;709        g_hsusbd_pfnVendorRequest = pfnVendorReq;
000002  6088              STR      r0,[r1,#8]  ; g_hsusbd_pfnVendorRequest
;;;710    }
000004  4770              BX       lr
;;;711    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||i.HSUSBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  HSUSBD_StandardRequest PROC
;;;326     */
;;;327    void HSUSBD_StandardRequest(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;328    {
;;;329        /* clear global variables for new request */
;;;330        g_hsusbd_CtrlInPointer = 0;
000004  4f5a              LDR      r7,|L8.368|
000006  2500              MOVS     r5,#0
;;;331        g_hsusbd_CtrlInSize = 0ul;
;;;332    
;;;333        if ((gUsbCmd.bmRequestType & 0x80ul) == 0x80ul)   /* request data transfer direction */
000008  f107002c          ADD      r0,r7,#0x2c
00000c  61bd              STR      r5,[r7,#0x18]         ;331  ; g_hsusbd_CtrlInPointer
00000e  627d              STR      r5,[r7,#0x24]  ; g_hsusbd_CtrlInSize
000010  f107012c          ADD      r1,r7,#0x2c
000014  7800              LDRB     r0,[r0,#0]  ; gUsbCmd
;;;334        {
;;;335            /* Device to host */
;;;336            switch (gUsbCmd.bRequest)
;;;337            {
;;;338            case GET_CONFIGURATION:
;;;339            {
;;;340                /* Return current configuration setting */
;;;341                HSUSBD_PrepareCtrlIn((uint8_t *)&g_hsusbd_UsbConfig, 1ul);
;;;342    
;;;343                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;344                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;345                break;
;;;346            }
;;;347            case GET_DESCRIPTOR:
;;;348            {
;;;349                if (!HSUSBD_GetDescriptor())
;;;350                {
;;;351                    HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;352                    HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;353                }
;;;354                break;
;;;355            }
;;;356            case GET_INTERFACE:
;;;357            {
;;;358                /* Return current interface setting */
;;;359                HSUSBD_PrepareCtrlIn((uint8_t *)&g_hsusbd_UsbAltInterface, 1ul);
;;;360    
;;;361                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;362                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;363                break;
;;;364            }
;;;365            case GET_STATUS:
;;;366            {
;;;367                /* Device */
;;;368                if (gUsbCmd.bmRequestType == 0x80ul)
;;;369                {
;;;370                    if ((g_hsusbd_sInfo->gu8ConfigDesc[7] & 0x40ul) == 0x40ul)
;;;371                    {
;;;372                        g_hsusbd_buf[0] = (uint8_t)1ul; /* Self-Powered */
;;;373                    }
;;;374                    else
;;;375                    {
;;;376                        g_hsusbd_buf[0] = (uint8_t)0ul; /* bus-Powered */
;;;377                    }
;;;378                }
;;;379                /* Interface */
;;;380                else if (gUsbCmd.bmRequestType == 0x81ul)
;;;381                {
;;;382                    g_hsusbd_buf[0] = (uint8_t)0ul;
;;;383                }
;;;384                /* Endpoint */
;;;385                else if (gUsbCmd.bmRequestType == 0x82ul)
;;;386                {
;;;387                    uint8_t ep = (uint8_t)(gUsbCmd.wIndex & 0xFul);
000016  f8b1c004          LDRH     r12,[r1,#4]
00001a  7849              LDRB     r1,[r1,#1]            ;336
00001c  4c55              LDR      r4,|L8.372|
00001e  0606              LSLS     r6,r0,#24             ;333
;;;388                    g_hsusbd_buf[0] = (uint8_t)HSUSBD_GetStall((uint32_t)ep)? (uint8_t)1 : (uint8_t)0;
;;;389                }
;;;390                g_hsusbd_buf[1] = (uint8_t)0ul;
;;;391                HSUSBD_PrepareCtrlIn(g_hsusbd_buf, 2ul);
000020  f04f0902          MOV      r9,#2
000024  f00c020f          AND      r2,r12,#0xf           ;387
000028  f04f0301          MOV      r3,#1                 ;341
00002c  d54c              BPL      |L8.200|
00002e  2608              MOVS     r6,#8                 ;336
000030  b199              CBZ      r1,|L8.90|
000032  2906              CMP      r1,#6                 ;336
000034  d007              BEQ      |L8.70|
000036  2908              CMP      r1,#8                 ;336
000038  d002              BEQ      |L8.64|
00003a  290a              CMP      r1,#0xa               ;336
00003c  d140              BNE      |L8.192|
00003e  e008              B        |L8.82|
                  |L8.64|
000040  2101              MOVS     r1,#1                 ;341
000042  484b              LDR      r0,|L8.368|
000044  e039              B        |L8.186|
                  |L8.70|
000046  f7fffffe          BL       HSUSBD_GetDescriptor
00004a  2800              CMP      r0,#0                 ;349
00004c  d13a              BNE      |L8.196|
                  |L8.78|
00004e  6366              STR      r6,[r4,#0x34]         ;351
000050  e058              B        |L8.260|
                  |L8.82|
000052  4847              LDR      r0,|L8.368|
000054  2101              MOVS     r1,#1                 ;359
000056  1c40              ADDS     r0,r0,#1              ;359
000058  e02f              B        |L8.186|
                  |L8.90|
00005a  4947              LDR      r1,|L8.376|
00005c  2880              CMP      r0,#0x80              ;368
00005e  d004              BEQ      |L8.106|
000060  2881              CMP      r0,#0x81              ;380
000062  d009              BEQ      |L8.120|
000064  2882              CMP      r0,#0x82              ;385
000066  d009              BEQ      |L8.124|
000068  e024              B        |L8.180|
                  |L8.106|
00006a  6ab8              LDR      r0,[r7,#0x28]         ;370  ; g_hsusbd_sInfo
00006c  6840              LDR      r0,[r0,#4]            ;370
00006e  79c0              LDRB     r0,[r0,#7]            ;370
000070  0640              LSLS     r0,r0,#25             ;370
000072  d501              BPL      |L8.120|
000074  700b              STRB     r3,[r1,#0]            ;372
000076  e01d              B        |L8.180|
                  |L8.120|
000078  700d              STRB     r5,[r1,#0]            ;382
00007a  e01b              B        |L8.180|
                  |L8.124|
00007c  2300              MOVS     r3,#0                 ;382
00007e  4618              MOV      r0,r3                 ;382
                  |L8.128|
000080  eb000780          ADD      r7,r0,r0,LSL #2       ;382
000084  eb0407c7          ADD      r7,r4,r7,LSL #3       ;382
000088  f8d77080          LDR      r7,[r7,#0x80]         ;382
00008c  f3c71703          UBFX     r7,r7,#4,#4           ;382
000090  4297              CMP      r7,r2                 ;382
000092  d107              BNE      |L8.164|
000094  eb000080          ADD      r0,r0,r0,LSL #2       ;382
000098  eb0400c0          ADD      r0,r4,r0,LSL #3       ;382
00009c  6f40              LDR      r0,[r0,#0x74]         ;382
00009e  f0000310          AND      r3,r0,#0x10           ;382
0000a2  e002              B        |L8.170|
                  |L8.164|
0000a4  1c40              ADDS     r0,r0,#1              ;382
0000a6  280c              CMP      r0,#0xc               ;382
0000a8  d3ea              BCC      |L8.128|
                  |L8.170|
0000aa  b10b              CBZ      r3,|L8.176|
0000ac  2001              MOVS     r0,#1                 ;388
0000ae  e000              B        |L8.178|
                  |L8.176|
0000b0  2000              MOVS     r0,#0                 ;388
                  |L8.178|
0000b2  7008              STRB     r0,[r1,#0]            ;388
                  |L8.180|
0000b4  704d              STRB     r5,[r1,#1]            ;390
0000b6  2102              MOVS     r1,#2
0000b8  482f              LDR      r0,|L8.376|
                  |L8.186|
0000ba  f7fffffe          BL       HSUSBD_PrepareCtrlIn
0000be  e7c6              B        |L8.78|
                  |L8.192|
;;;392                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;393                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;394                break;
;;;395            }
;;;396            default:
;;;397            {
;;;398                /* Setup error, stall the device */
;;;399                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
0000c0  f8c4902c          STR      r9,[r4,#0x2c]
                  |L8.196|
;;;400                break;
;;;401            }
;;;402            }
;;;403        }
;;;404        else
;;;405        {
;;;406            /* Host to device */
;;;407            switch (gUsbCmd.bRequest)
;;;408            {
;;;409            case CLEAR_FEATURE:
;;;410            {
;;;411                if((gUsbCmd.wValue & 0xfful) == FEATURE_ENDPOINT_HALT)
;;;412                {
;;;413    
;;;414                    uint32_t epNum, i;
;;;415    
;;;416                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;417                       a flag: g_u32HsEpStallLock is added to support it */
;;;418                    epNum = (uint32_t)(gUsbCmd.wIndex & 0xFul);
;;;419                    for (i=0ul; i<HSUSBD_MAX_EP; i++)
;;;420                    {
;;;421                        if ((((HSUSBD->EP[i].EPCFG & 0xf0ul) >> 4) == epNum) && ((g_u32HsEpStallLock & (1ul << i)) == 0ul))
;;;422                        {
;;;423                            HSUSBD->EP[i].EPRSPCTL = (HSUSBD->EP[i].EPRSPCTL & 0xeful) | HSUSBD_EP_RSPCTL_TOGGLE;
;;;424                        }
;;;425                    }
;;;426                }
;;;427                /* Status stage */
;;;428                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;429                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;430                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;431                break;
;;;432            }
;;;433            case SET_ADDRESS:
;;;434            {
;;;435                g_hsusbd_UsbAddr = (uint8_t)gUsbCmd.wValue;
;;;436                /* Status Stage */
;;;437                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;438                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;439                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;440                break;
;;;441            }
;;;442            case SET_CONFIGURATION:
;;;443            {
;;;444                g_hsusbd_UsbConfig = (uint8_t)gUsbCmd.wValue;
;;;445                g_hsusbd_Configured = (uint8_t)1ul;
;;;446                /* Status stage */
;;;447                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;448                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;449                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;450                break;
;;;451            }
;;;452            case SET_FEATURE:
;;;453            {
;;;454                if ((gUsbCmd.wValue & 0x3ul) == 2ul)    /* TEST_MODE */
;;;455                {
;;;456                    g_hsusbd_EnableTestMode = (uint8_t)1ul;
;;;457                    g_hsusbd_TestSelector = (uint8_t)(gUsbCmd.wIndex >> 8);
;;;458                }
;;;459                if ((gUsbCmd.wValue & 0x3ul) == 3ul)    /* HNP ebable */
;;;460                {
;;;461                    HSOTG->CTL |= (HSOTG_CTL_HNPREQEN_Msk | HSOTG_CTL_BUSREQ_Msk);
;;;462                }
;;;463    
;;;464                /* Status stage */
;;;465                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;466                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;467                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;468                break;
;;;469            }
;;;470            case SET_INTERFACE:
;;;471            {
;;;472                g_hsusbd_UsbAltInterface = (uint8_t)gUsbCmd.wValue;
;;;473                if (g_hsusbd_pfnSetInterface != NULL)
;;;474                {
;;;475                    g_hsusbd_pfnSetInterface((uint32_t)g_hsusbd_UsbAltInterface);
;;;476                }
;;;477                /* Status stage */
;;;478                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;479                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;480                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;481                break;
;;;482            }
;;;483            default:
;;;484            {
;;;485                /* Setup error, stall the device */
;;;486                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
;;;487                break;
;;;488            }
;;;489            }
;;;490        }
;;;491    }
0000c4  e8bd87f0          POP      {r4-r10,pc}
                  |L8.200|
0000c8  4829              LDR      r0,|L8.368|
0000ca  f44f6680          MOV      r6,#0x400             ;428
0000ce  302c              ADDS     r0,r0,#0x2c           ;333
0000d0  2905              CMP      r1,#5                 ;407
0000d2  f8b08002          LDRH     r8,[r0,#2]            ;411
0000d6  f00800ff          AND      r0,r8,#0xff           ;411
0000da  d035              BEQ      |L8.328|
0000dc  dc08              BGT      |L8.240|
0000de  2901              CMP      r1,#1                 ;407
0000e0  d012              BEQ      |L8.264|
0000e2  2903              CMP      r1,#3                 ;407
0000e4  d1ec              BNE      |L8.192|
0000e6  f0080003          AND      r0,r8,#3              ;454
0000ea  2802              CMP      r0,#2                 ;454
0000ec  d031              BEQ      |L8.338|
0000ee  e034              B        |L8.346|
                  |L8.240|
0000f0  2909              CMP      r1,#9                 ;407
0000f2  d02b              BEQ      |L8.332|
0000f4  290b              CMP      r1,#0xb               ;407
0000f6  d1e3              BNE      |L8.192|
0000f8  7078              STRB     r0,[r7,#1]            ;472
0000fa  6939              LDR      r1,[r7,#0x10]         ;473  ; g_hsusbd_pfnSetInterface
0000fc  b101              CBZ      r1,|L8.256|
0000fe  4788              BLX      r1                    ;475
                  |L8.256|
000100  6366              STR      r6,[r4,#0x34]         ;478
000102  62e5              STR      r5,[r4,#0x2c]         ;479
                  |L8.260|
000104  6326              STR      r6,[r4,#0x30]         ;352
000106  e7dd              B        |L8.196|
                  |L8.264|
000108  f0180fff          TST      r8,#0xff              ;411
00010c  d1f8              BNE      |L8.256|
00010e  697f              LDR      r7,[r7,#0x14]         ;421
000110  2000              MOVS     r0,#0                 ;419
                  |L8.274|
000112  eb000180          ADD      r1,r0,r0,LSL #2       ;421
000116  eb0401c1          ADD      r1,r4,r1,LSL #3       ;421
00011a  f8d1c080          LDR      r12,[r1,#0x80]        ;421
00011e  f3cc1c03          UBFX     r12,r12,#4,#4         ;421
000122  4594              CMP      r12,r2                ;421
000124  d10c              BNE      |L8.320|
000126  fa03fc00          LSL      r12,r3,r0             ;421
00012a  ea1c0f07          TST      r12,r7                ;421
00012e  d107              BNE      |L8.320|
000130  f8d1c074          LDR      r12,[r1,#0x74]        ;423
000134  f00c0cef          AND      r12,r12,#0xef         ;423
000138  f04c0c08          ORR      r12,r12,#8            ;423
00013c  f8c1c074          STR      r12,[r1,#0x74]        ;423
                  |L8.320|
000140  1c40              ADDS     r0,r0,#1              ;423
000142  280c              CMP      r0,#0xc               ;419
000144  d3e5              BCC      |L8.274|
000146  e7db              B        |L8.256|
                  |L8.328|
000148  71b8              STRB     r0,[r7,#6]            ;435
00014a  e7d9              B        |L8.256|
                  |L8.332|
00014c  7038              STRB     r0,[r7,#0]            ;444
00014e  713b              STRB     r3,[r7,#4]            ;445
000150  e7d6              B        |L8.256|
                  |L8.338|
000152  70bb              STRB     r3,[r7,#2]            ;456
000154  ea4f201c          LSR      r0,r12,#8             ;457
000158  70f8              STRB     r0,[r7,#3]            ;457
                  |L8.346|
00015a  ea6f0008          MVN      r0,r8                 ;459
00015e  0780              LSLS     r0,r0,#30             ;459
000160  d1ce              BNE      |L8.256|
000162  4806              LDR      r0,|L8.380|
000164  6801              LDR      r1,[r0,#0]            ;461
000166  f0410106          ORR      r1,r1,#6              ;461
00016a  6001              STR      r1,[r0,#0]            ;461
00016c  e7c8              B        |L8.256|
;;;492    
                          ENDP

00016e  0000              DCW      0x0000
                  |L8.368|
                          DCD      ||.data||
                  |L8.372|
                          DCD      0x40019000
                  |L8.376|
                          DCD      ||.bss||
                  |L8.380|
                          DCD      0x4004f000

                          AREA ||i.HSUSBD_Start||, CODE, READONLY, ALIGN=2

                  HSUSBD_Start PROC
;;;99      */
;;;100    void HSUSBD_Start(void)
000000  4802              LDR      r0,|L9.12|
;;;101    {
;;;102        HSUSBD_CLR_SE0();
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;103    }
00000a  4770              BX       lr
;;;104    
                          ENDP

                  |L9.12|
                          DCD      0x40019704

                          AREA ||i.HSUSBD_SwReset||, CODE, READONLY, ALIGN=2

                  HSUSBD_SwReset PROC
;;;685     */
;;;686    void HSUSBD_SwReset(void)
000000  4904              LDR      r1,|L10.20|
;;;687    {
;;;688        /* Reset all variables for protocol */
;;;689        g_hsusbd_UsbAddr = (uint8_t)0ul;
000002  2000              MOVS     r0,#0
000004  7188              STRB     r0,[r1,#6]
;;;690        g_hsusbd_DmaDone = 0ul;
000006  6208              STR      r0,[r1,#0x20]  ; g_hsusbd_DmaDone
;;;691        g_hsusbd_ShortPacket = (uint8_t)0ul;
000008  71c8              STRB     r0,[r1,#7]
;;;692        g_hsusbd_Configured = (uint8_t)0ul;
00000a  7108              STRB     r0,[r1,#4]
;;;693    
;;;694        /* Reset USB device address */
;;;695        HSUSBD_SET_ADDR(0ul);
00000c  4902              LDR      r1,|L10.24|
00000e  6208              STR      r0,[r1,#0x20]
;;;696    }
000010  4770              BX       lr
;;;697    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      ||.data||
                  |L10.24|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_UpdateDeviceState||, CODE, READONLY, ALIGN=2

                  HSUSBD_UpdateDeviceState PROC
;;;509    
;;;510    void HSUSBD_UpdateDeviceState(void)
000000  b578              PUSH     {r3-r6,lr}
;;;511    {
;;;512        switch (gUsbCmd.bRequest)
000002  4a35              LDR      r2,|L11.216|
000004  4834              LDR      r0,|L11.216|
;;;513        {
;;;514        case SET_ADDRESS:
;;;515        {
;;;516            HSUSBD_SET_ADDR(g_hsusbd_UsbAddr);
;;;517            break;
;;;518        }
;;;519        case SET_CONFIGURATION:
;;;520        {
;;;521            if (g_hsusbd_UsbConfig == 0ul)
;;;522            {
;;;523                uint32_t volatile i;
;;;524                /* Reset PID DATA0 */
;;;525                for (i=0ul; i<HSUSBD_MAX_EP; i++)
;;;526                {
;;;527                    if ((HSUSBD->EP[i].EPCFG & 0x1ul) == 0x1ul)
;;;528                    {
;;;529                        HSUSBD->EP[i].EPRSPCTL = HSUSBD_EP_RSPCTL_TOGGLE;
000006  2408              MOVS     r4,#8
;;;530                    }
;;;531                }
;;;532            }
;;;533            break;
;;;534        }
;;;535        case SET_FEATURE:
;;;536        {
;;;537            if(gUsbCmd.wValue == FEATURE_ENDPOINT_HALT)
000008  8851              LDRH     r1,[r2,#2]
;;;538            {
;;;539                uint32_t idx;
;;;540                idx = (uint32_t)(gUsbCmd.wIndex & 0xFul);
00000a  7912              LDRB     r2,[r2,#4]
00000c  7840              LDRB     r0,[r0,#1]            ;512  ; gUsbCmd
00000e  f002030f          AND      r3,r2,#0xf
000012  4a32              LDR      r2,|L11.220|
000014  2801              CMP      r0,#1                 ;512
000016  d04c              BEQ      |L11.178|
000018  4d2f              LDR      r5,|L11.216|
00001a  2600              MOVS     r6,#0                 ;511
00001c  3d2c              SUBS     r5,r5,#0x2c           ;516
00001e  2803              CMP      r0,#3                 ;512
000020  d01a              BEQ      |L11.88|
000022  2805              CMP      r0,#5                 ;512
000024  d015              BEQ      |L11.82|
000026  2809              CMP      r0,#9                 ;512
000028  d112              BNE      |L11.80|
00002a  7828              LDRB     r0,[r5,#0]            ;521  ; g_hsusbd_UsbConfig
00002c  2800              CMP      r0,#0                 ;521
00002e  d10f              BNE      |L11.80|
000030  9600              STR      r6,[sp,#0]            ;525
                  |L11.50|
000032  9800              LDR      r0,[sp,#0]            ;527
000034  eb000080          ADD      r0,r0,r0,LSL #2       ;527
000038  eb0200c0          ADD      r0,r2,r0,LSL #3       ;527
00003c  f8d01080          LDR      r1,[r0,#0x80]         ;527
000040  07c9              LSLS     r1,r1,#31             ;527
000042  d000              BEQ      |L11.70|
000044  6744              STR      r4,[r0,#0x74]         ;529
                  |L11.70|
000046  9800              LDR      r0,[sp,#0]            ;525
000048  1c40              ADDS     r0,r0,#1              ;525
00004a  9000              STR      r0,[sp,#0]            ;525
00004c  280c              CMP      r0,#0xc               ;525
00004e  d3f0              BCC      |L11.50|
                  |L11.80|
;;;541                HSUSBD_SetStall(idx);
;;;542            }
;;;543            else if (g_hsusbd_EnableTestMode)
;;;544            {
;;;545                g_hsusbd_EnableTestMode = (uint8_t)0ul;
;;;546                if (g_hsusbd_TestSelector == TEST_J)
;;;547                {
;;;548                    HSUSBD->TEST = TEST_J;
;;;549                }
;;;550                else if (g_hsusbd_TestSelector == TEST_K)
;;;551                {
;;;552                    HSUSBD->TEST = TEST_K;
;;;553                }
;;;554                else if (g_hsusbd_TestSelector == TEST_SE0_NAK)
;;;555                {
;;;556                    HSUSBD->TEST = TEST_SE0_NAK;
;;;557                }
;;;558                else if (g_hsusbd_TestSelector == TEST_PACKET)
;;;559                {
;;;560                    HSUSBD->TEST = TEST_PACKET;
;;;561                }
;;;562                else if (g_hsusbd_TestSelector == TEST_FORCE_ENABLE)
;;;563                {
;;;564                    HSUSBD->TEST = TEST_FORCE_ENABLE;
;;;565                }
;;;566            }
;;;567            break;
;;;568        }
;;;569        case CLEAR_FEATURE:
;;;570        {
;;;571            if(gUsbCmd.wValue == FEATURE_ENDPOINT_HALT)
;;;572            {
;;;573                uint32_t idx;
;;;574                idx = (uint32_t)(gUsbCmd.wIndex & 0xFul);
;;;575                HSUSBD_ClearStall(idx);
;;;576            }
;;;577            break;
;;;578        }
;;;579        default:
;;;580            break;
;;;581        }
;;;582    }
000050  bd78              POP      {r3-r6,pc}
                  |L11.82|
000052  79a8              LDRB     r0,[r5,#6]            ;516  ; g_hsusbd_UsbAddr
000054  6210              STR      r0,[r2,#0x20]         ;516
                  |L11.86|
000056  bd78              POP      {r3-r6,pc}
                  |L11.88|
000058  2402              MOVS     r4,#2
00005a  b181              CBZ      r1,|L11.126|
00005c  78a8              LDRB     r0,[r5,#2]            ;543  ; g_hsusbd_EnableTestMode
00005e  2800              CMP      r0,#0                 ;543
000060  d0f9              BEQ      |L11.86|
000062  70ae              STRB     r6,[r5,#2]            ;545
000064  78e8              LDRB     r0,[r5,#3]            ;546  ; g_hsusbd_TestSelector
000066  2801              CMP      r0,#1                 ;546
000068  d007              BEQ      |L11.122|
00006a  2802              CMP      r0,#2                 ;550
00006c  d01f              BEQ      |L11.174|
00006e  2803              CMP      r0,#3                 ;554
000070  d003              BEQ      |L11.122|
000072  2804              CMP      r0,#4                 ;558
000074  d001              BEQ      |L11.122|
000076  2805              CMP      r0,#5                 ;562
000078  d1ed              BNE      |L11.86|
                  |L11.122|
00007a  6250              STR      r0,[r2,#0x24]         ;548
00007c  bd78              POP      {r3-r6,pc}
                  |L11.126|
00007e  b1a3              CBZ      r3,|L11.170|
000080  2000              MOVS     r0,#0
                  |L11.130|
000082  eb000180          ADD      r1,r0,r0,LSL #2
000086  eb0201c1          ADD      r1,r2,r1,LSL #3
00008a  f8d14080          LDR      r4,[r1,#0x80]
00008e  f3c41403          UBFX     r4,r4,#4,#4
000092  429c              CMP      r4,r3
000094  d105              BNE      |L11.162|
000096  6f4c              LDR      r4,[r1,#0x74]
000098  f00404f7          AND      r4,r4,#0xf7
00009c  f0440410          ORR      r4,r4,#0x10
0000a0  674c              STR      r4,[r1,#0x74]
                  |L11.162|
0000a2  1c40              ADDS     r0,r0,#1
0000a4  280c              CMP      r0,#0xc
0000a6  d3ec              BCC      |L11.130|
0000a8  bd78              POP      {r3-r6,pc}
                  |L11.170|
0000aa  62d4              STR      r4,[r2,#0x2c]
0000ac  bd78              POP      {r3-r6,pc}
                  |L11.174|
0000ae  6254              STR      r4,[r2,#0x24]         ;552
                  |L11.176|
0000b0  bd78              POP      {r3-r6,pc}
                  |L11.178|
0000b2  2900              CMP      r1,#0                 ;571
0000b4  d1fc              BNE      |L11.176|
0000b6  2000              MOVS     r0,#0                 ;571
                  |L11.184|
0000b8  eb000180          ADD      r1,r0,r0,LSL #2       ;571
0000bc  eb0201c1          ADD      r1,r2,r1,LSL #3       ;571
0000c0  f8d15080          LDR      r5,[r1,#0x80]         ;571
0000c4  f3c51503          UBFX     r5,r5,#4,#4           ;571
0000c8  429d              CMP      r5,r3                 ;571
0000ca  d100              BNE      |L11.206|
0000cc  674c              STR      r4,[r1,#0x74]         ;571
                  |L11.206|
0000ce  1c40              ADDS     r0,r0,#1              ;571
0000d0  280c              CMP      r0,#0xc               ;571
0000d2  d3f1              BCC      |L11.184|
0000d4  bd78              POP      {r3-r6,pc}
;;;583    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L11.216|
                          DCD      ||.data||+0x2c
                  |L11.220|
                          DCD      0x40019000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_hsusbd_buf
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  g_hsusbd_UsbConfig
000000  00                DCB      0x00
                  g_hsusbd_UsbAltInterface
000001  00                DCB      0x00
                  g_hsusbd_EnableTestMode
000002  00                DCB      0x00
                  g_hsusbd_TestSelector
000003  00                DCB      0x00
                  g_hsusbd_Configured
000004  00                DCB      0x00
                  g_hsusbd_CtrlZero
000005  00                DCB      0x00
                  g_hsusbd_UsbAddr
000006  00                DCB      0x00
                  g_hsusbd_ShortPacket
000007  00                DCB      0x00
                  g_hsusbd_pfnVendorRequest
                          DCD      0x00000000
                  g_hsusbd_pfnClassRequest
                          DCD      0x00000000
                  g_hsusbd_pfnSetInterface
                          DCD      0x00000000
                  g_u32HsEpStallLock
                          DCD      0x00000000
                  g_hsusbd_CtrlInPointer
                          DCD      0x00000000
                  g_hsusbd_CtrlMaxPktSize
                          DCD      0x00000040
                  g_hsusbd_DmaDone
                          DCD      0x00000000
                  g_hsusbd_CtrlInSize
                          DCD      0x00000000
                  g_hsusbd_sInfo
                          DCD      0x00000000
                  gUsbCmd
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\hsusbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_hsusbd_c_c680add9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____REVSH|
#line 402
|__asm___8_hsusbd_c_c680add9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____RRX|
#line 587
|__asm___8_hsusbd_c_c680add9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
